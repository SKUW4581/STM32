
TEST_010_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c4  080058c4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058cc  080058cc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080058d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004208  2000006c  08005940  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004274  08005940  00024274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014557  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030b1  00000000  00000000  00034636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  000376e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d96  00000000  00000000  00038878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190f5  00000000  00000000  0003960e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ce3  00000000  00000000  00052703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098a8a  00000000  00000000  000663e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005248  00000000  00000000  000fee70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005748 	.word	0x08005748

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005748 	.word	0x08005748

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000088 	.word	0x20000088
 80005ac:	20000128 	.word	0x20000128

080005b0 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int bn = 0; mode = 0, t1 = 0 ;	//mode : 1 button pressed, 0 relese
int step = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	 step = 0;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
	 mode = 1;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	601a      	str	r2, [r3, #0]
	 bn++;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80005ce:	6013      	str	r3, [r2, #0]
	//printf("B1 button pressed..... %d times", bn++);
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	20000380 	.word	0x20000380
 80005e0:	2000037c 	.word	0x2000037c
 80005e4:	20000378 	.word	0x20000378

080005e8 <LD2test>:
void LD2test()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005ec:	2120      	movs	r1, #32
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <LD2test+0x10>)
 80005f0:	f000 ffa5 	bl	800153e <HAL_GPIO_TogglePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40020000 	.word	0x40020000

080005fc <step_wave>:
void step_wave(int step)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	switch(step)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3b01      	subs	r3, #1
 8000608:	2b03      	cmp	r3, #3
 800060a:	d863      	bhi.n	80006d4 <step_wave+0xd8>
 800060c:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <step_wave+0x18>)
 800060e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000612:	bf00      	nop
 8000614:	08000625 	.word	0x08000625
 8000618:	08000651 	.word	0x08000651
 800061c:	0800067d 	.word	0x0800067d
 8000620:	080006a9 	.word	0x080006a9
	{
	case 1:
	//step 1
	HAL_GPIO_WritePin(D3_GPIO_Port ,D3_Pin, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	2108      	movs	r1, #8
 8000628:	482c      	ldr	r0, [pc, #176]	; (80006dc <step_wave+0xe0>)
 800062a:	f000 ff6f 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port ,D4_Pin, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	482a      	ldr	r0, [pc, #168]	; (80006dc <step_wave+0xe0>)
 8000634:	f000 ff6a 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port ,D5_Pin, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	4827      	ldr	r0, [pc, #156]	; (80006dc <step_wave+0xe0>)
 800063e:	f000 ff65 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port ,D6_Pin, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	4824      	ldr	r0, [pc, #144]	; (80006dc <step_wave+0xe0>)
 800064a:	f000 ff5f 	bl	800150c <HAL_GPIO_WritePin>
			break;
 800064e:	e041      	b.n	80006d4 <step_wave+0xd8>
	case 2:
	//step 2
	HAL_GPIO_WritePin(D3_GPIO_Port ,D3_Pin, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2108      	movs	r1, #8
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <step_wave+0xe0>)
 8000656:	f000 ff59 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port ,D4_Pin, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	2120      	movs	r1, #32
 800065e:	481f      	ldr	r0, [pc, #124]	; (80006dc <step_wave+0xe0>)
 8000660:	f000 ff54 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port ,D5_Pin, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2110      	movs	r1, #16
 8000668:	481c      	ldr	r0, [pc, #112]	; (80006dc <step_wave+0xe0>)
 800066a:	f000 ff4f 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port ,D6_Pin, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000674:	4819      	ldr	r0, [pc, #100]	; (80006dc <step_wave+0xe0>)
 8000676:	f000 ff49 	bl	800150c <HAL_GPIO_WritePin>
			break;
 800067a:	e02b      	b.n	80006d4 <step_wave+0xd8>
	case 3:
	//step 3
	HAL_GPIO_WritePin(D3_GPIO_Port ,D3_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2108      	movs	r1, #8
 8000680:	4816      	ldr	r0, [pc, #88]	; (80006dc <step_wave+0xe0>)
 8000682:	f000 ff43 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port ,D4_Pin, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2120      	movs	r1, #32
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <step_wave+0xe0>)
 800068c:	f000 ff3e 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port ,D5_Pin, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2110      	movs	r1, #16
 8000694:	4811      	ldr	r0, [pc, #68]	; (80006dc <step_wave+0xe0>)
 8000696:	f000 ff39 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port ,D6_Pin, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a0:	480e      	ldr	r0, [pc, #56]	; (80006dc <step_wave+0xe0>)
 80006a2:	f000 ff33 	bl	800150c <HAL_GPIO_WritePin>
			break;
 80006a6:	e015      	b.n	80006d4 <step_wave+0xd8>
	case 4:
	//step 4
	HAL_GPIO_WritePin(D3_GPIO_Port ,D3_Pin, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2108      	movs	r1, #8
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <step_wave+0xe0>)
 80006ae:	f000 ff2d 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port ,D4_Pin, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2120      	movs	r1, #32
 80006b6:	4809      	ldr	r0, [pc, #36]	; (80006dc <step_wave+0xe0>)
 80006b8:	f000 ff28 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port ,D5_Pin, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <step_wave+0xe0>)
 80006c2:	f000 ff23 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port ,D6_Pin, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <step_wave+0xe0>)
 80006ce:	f000 ff1d 	bl	800150c <HAL_GPIO_WritePin>
			break;
 80006d2:	bf00      	nop
	}
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40020400 	.word	0x40020400

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b5b0      	push	{r4, r5, r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fc51 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f83b 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 f8cd 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f2:	f000 f8a1 	bl	8000838 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, mystartTask01, osPriorityNormal, 0, 128);
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <main+0x70>)
 80006f8:	f107 041c 	add.w	r4, r7, #28
 80006fc:	461d      	mov	r5, r3
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fb46 	bl	8002da2 <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <main+0x74>)
 800071a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, myStartTask02, osPriorityIdle, 0, 128);
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <main+0x78>)
 800071e:	463c      	mov	r4, r7
 8000720:	461d      	mov	r5, r3
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800072e:	463b      	mov	r3, r7
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fb35 	bl	8002da2 <osThreadCreate>
 8000738:	4603      	mov	r3, r0
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <main+0x7c>)
 800073c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ProgramStart("RTOS - TEST");
 800073e:	4808      	ldr	r0, [pc, #32]	; (8000760 <main+0x80>)
 8000740:	f000 f9f6 	bl	8000b30 <ProgramStart>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000744:	f002 fb26 	bl	8002d94 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LD2test();
 8000748:	f7ff ff4e 	bl	80005e8 <LD2test>
 800074c:	e7fc      	b.n	8000748 <main+0x68>
 800074e:	bf00      	nop
 8000750:	08005778 	.word	0x08005778
 8000754:	20000370 	.word	0x20000370
 8000758:	080057a0 	.word	0x080057a0
 800075c:	20000374 	.word	0x20000374
 8000760:	08005760 	.word	0x08005760

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 f848 	bl	8004808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	; (8000830 <SystemClock_Config+0xcc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xd0>)
 80007ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2310      	movs	r3, #16
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007d4:	2310      	movs	r3, #16
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007de:	2304      	movs	r3, #4
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e2:	2304      	movs	r3, #4
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 feda 	bl	80015a4 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007f6:	f000 f943 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2102      	movs	r1, #2
 8000816:	4618      	mov	r0, r3
 8000818:	f001 f93c 	bl	8001a94 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000822:	f000 f92d 	bl	8000a80 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART2_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000870:	f001 fdd6 	bl	8002420 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f901 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000328 	.word	0x20000328
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a3b      	ldr	r2, [pc, #236]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b32      	ldr	r3, [pc, #200]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a26      	ldr	r2, [pc, #152]	; (8000998 <MX_GPIO_Init+0x10c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_GPIO_Init+0x10c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	4821      	ldr	r0, [pc, #132]	; (800099c <MX_GPIO_Init+0x110>)
 8000918:	f000 fdf8 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000922:	481f      	ldr	r0, [pc, #124]	; (80009a0 <MX_GPIO_Init+0x114>)
 8000924:	f000 fdf2 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4819      	ldr	r0, [pc, #100]	; (80009a4 <MX_GPIO_Init+0x118>)
 8000940:	f000 fc48 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000944:	2320      	movs	r3, #32
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4810      	ldr	r0, [pc, #64]	; (800099c <MX_GPIO_Init+0x110>)
 800095c:	f000 fc3a 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000960:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <MX_GPIO_Init+0x114>)
 800097a:	f000 fc2b 	bl	80011d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	2028      	movs	r0, #40	; 0x28
 8000984:	f000 fbfc 	bl	8001180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000988:	2028      	movs	r0, #40	; 0x28
 800098a:	f000 fc15 	bl	80011b8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40020800 	.word	0x40020800

080009a8 <mystartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_mystartTask01 */
void mystartTask01(void const * argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int n1 = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	LD2test();
 80009b4:	f7ff fe18 	bl	80005e8 <LD2test>
	Cursor(0, 0);
 80009b8:	2100      	movs	r1, #0
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 f8de 	bl	8000b7c <Cursor>
	//printf("============LD2 flashed %d Times_Task1=============\r\n", n1++);
	printf("============motor flashed %d Times_Task1=============\r\n", n1++);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60fa      	str	r2, [r7, #12]
 80009c6:	4619      	mov	r1, r3
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <mystartTask01+0x30>)
 80009ca:	f003 fd09 	bl	80043e0 <iprintf>
//	HAL_Delay(100);
    osDelay(10);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f002 fa33 	bl	8002e3a <osDelay>
  {
 80009d4:	e7ee      	b.n	80009b4 <mystartTask01+0xc>
 80009d6:	bf00      	nop
 80009d8:	080057bc 	.word	0x080057bc

080009dc <myStartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myStartTask02 */
void myStartTask02(void const * argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myStartTask02 */
	int n2 = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  int d;	//degree angle
	  Cursor(0,10);
 80009e8:	210a      	movs	r1, #10
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 f8c6 	bl	8000b7c <Cursor>
	  if(mode)
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <myStartTask02+0x70>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d021      	beq.n	8000a3c <myStartTask02+0x60>
	  {
	  //printf("Input Degree :"); scanf("%d", &d);
	  //int wf = 2048 * d / 360;
	  //int step = 4096 * d / 360;
	  //printf("wave(full) : %d steps, Half : %d step", wf, step);
		  printf("B1 button pressed..... %d times", bn);
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <myStartTask02+0x74>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	4815      	ldr	r0, [pc, #84]	; (8000a54 <myStartTask02+0x78>)
 8000a00:	f003 fcee 	bl	80043e0 <iprintf>
		  for(int i = 0; i < 256; i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e011      	b.n	8000a2e <myStartTask02+0x52>
		  {
			  step_wave((i % 4) + 1); osDelay(10);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	425a      	negs	r2, r3
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	f002 0203 	and.w	r2, r2, #3
 8000a16:	bf58      	it	pl
 8000a18:	4253      	negpl	r3, r2
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fded 	bl	80005fc <step_wave>
 8000a22:	200a      	movs	r0, #10
 8000a24:	f002 fa09 	bl	8002e3a <osDelay>
		  for(int i = 0; i < 256; i++)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2bff      	cmp	r3, #255	; 0xff
 8000a32:	ddea      	ble.n	8000a0a <myStartTask02+0x2e>
		  }
		  mode = 0;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <myStartTask02+0x70>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e002      	b.n	8000a42 <myStartTask02+0x66>
	  }
	  else
	  {	 printf("				" ); }
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <myStartTask02+0x7c>)
 8000a3e:	f003 fccf 	bl	80043e0 <iprintf>

	  osDelay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f002 f9f9 	bl	8002e3a <osDelay>
  {
 8000a48:	e7ce      	b.n	80009e8 <myStartTask02+0xc>
 8000a4a:	bf00      	nop
 8000a4c:	2000037c 	.word	0x2000037c
 8000a50:	20000378 	.word	0x20000378
 8000a54:	080057f4 	.word	0x080057f4
 8000a58:	08005814 	.word	0x08005814

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6e:	f000 faaf 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40014400 	.word	0x40014400

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <__io_getchar>:
//include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c.h"

extern UART_HandleTypeDef huart2;	// 외부

int __io_getchar(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
   char ch;
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000a92:	bf00      	nop
 8000a94:	1df9      	adds	r1, r7, #7
 8000a96:	230a      	movs	r3, #10
 8000a98:	2201      	movs	r2, #1
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <__io_getchar+0x44>)
 8000a9c:	f001 fd9b 	bl	80025d6 <HAL_UART_Receive>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1f6      	bne.n	8000a94 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000aa6:	1df9      	adds	r1, r7, #7
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <__io_getchar+0x44>)
 8000aae:	f001 fd07 	bl	80024c0 <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b0d      	cmp	r3, #13
 8000ab6:	d105      	bne.n	8000ac4 <__io_getchar+0x38>
 8000ab8:	230a      	movs	r3, #10
 8000aba:	2201      	movs	r2, #1
 8000abc:	4905      	ldr	r1, [pc, #20]	; (8000ad4 <__io_getchar+0x48>)
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <__io_getchar+0x44>)
 8000ac0:	f001 fcfe 	bl	80024c0 <HAL_UART_Transmit>
   return ch;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000328 	.word	0x20000328
 8000ad4:	0800581c 	.word	0x0800581c

08000ad8 <__io_putchar>:

int __io_putchar(int ch)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // size(byte), timeout(ms)
 8000ae0:	1d39      	adds	r1, r7, #4
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <__io_putchar+0x20>)
 8000ae8:	f001 fcea 	bl	80024c0 <HAL_UART_Transmit>
   return ch;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000328 	.word	0x20000328

08000afc <StandBy>:

void StandBy()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {}
 8000b00:	bf00      	nop
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <StandBy+0x1c>)
 8000b08:	f000 fce8 	bl	80014dc <HAL_GPIO_ReadPin>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f7      	bne.n	8000b02 <StandBy+0x6>
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40020800 	.word	0x40020800

08000b1c <cls>:

void cls()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <cls+0x10>)
 8000b22:	f003 fc5d 	bl	80043e0 <iprintf>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	08005820 	.word	0x08005820

08000b30 <ProgramStart>:

void ProgramStart(char* str)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H");
   cls();
 8000b38:	f7ff fff0 	bl	8000b1c <cls>
   Cursor(0,0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f81c 	bl	8000b7c <Cursor>
   printf("Program Name - %s\r\n", str);
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <ProgramStart+0x40>)
 8000b48:	f003 fc4a 	bl	80043e0 <iprintf>
   printf("Press Blue-button(B1) to Start...\r\n");
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <ProgramStart+0x44>)
 8000b4e:	f003 fcad 	bl	80044ac <puts>
   StandBy();
 8000b52:	f7ff ffd3 	bl	8000afc <StandBy>
   setvbuf(stdin, NULL, _IONBF, 0);
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <ProgramStart+0x48>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6858      	ldr	r0, [r3, #4]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	2202      	movs	r2, #2
 8000b60:	2100      	movs	r1, #0
 8000b62:	f003 fcab 	bl	80044bc <setvbuf>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08005828 	.word	0x08005828
 8000b74:	0800583c 	.word	0x0800583c
 8000b78:	20000068 	.word	0x20000068

08000b7c <Cursor>:

void Cursor(int x, int y)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf , "\033[%d;%dH", y, x);	//sprintf( buffer, "%d",a,b) console이 아니라 문자열 buf로 출력
 8000b86:	f107 000c 	add.w	r0, r7, #12
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	4906      	ldr	r1, [pc, #24]	; (8000ba8 <Cursor+0x2c>)
 8000b90:	f003 fd42 	bl	8004618 <siprintf>
	printf("%s",buf);					//방법 2 puts(buf) puts문자열 출력 함수
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4804      	ldr	r0, [pc, #16]	; (8000bac <Cursor+0x30>)
 8000b9c:	f003 fc20 	bl	80043e0 <iprintf>
}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08005860 	.word	0x08005860
 8000bac:	0800586c 	.word	0x0800586c

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_MspInit+0x54>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_MspInit+0x54>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_MspInit+0x54>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_MspInit+0x54>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_MspInit+0x54>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_MspInit+0x54>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	f06f 0001 	mvn.w	r0, #1
 8000bf6:	f000 fac3 	bl	8001180 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0x84>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12b      	bne.n	8000c82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c62:	230c      	movs	r3, #12
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c72:	2307      	movs	r3, #7
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_UART_MspInit+0x8c>)
 8000c7e:	f000 faa9 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <HAL_InitTick+0xd0>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <HAL_InitTick+0xd0>)
 8000cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <HAL_InitTick+0xd0>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc4:	f107 020c 	add.w	r2, r7, #12
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 f900 	bl	8001ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cd4:	f001 f8ea 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8000cd8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <HAL_InitTick+0xd4>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_InitTick+0xd8>)
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <HAL_InitTick+0xdc>)
 8000cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_InitTick+0xd8>)
 8000cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <HAL_InitTick+0xd8>)
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_InitTick+0xd8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_InitTick+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_InitTick+0xd8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000d0e:	4818      	ldr	r0, [pc, #96]	; (8000d70 <HAL_InitTick+0xd8>)
 8000d10:	f001 f912 	bl	8001f38 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d11b      	bne.n	8000d5a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000d22:	4813      	ldr	r0, [pc, #76]	; (8000d70 <HAL_InitTick+0xd8>)
 8000d24:	f001 f962 	bl	8001fec <HAL_TIM_Base_Start_IT>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d111      	bne.n	8000d5a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d36:	2019      	movs	r0, #25
 8000d38:	f000 fa3e 	bl	80011b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b0f      	cmp	r3, #15
 8000d40:	d808      	bhi.n	8000d54 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d42:	2200      	movs	r2, #0
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	2019      	movs	r0, #25
 8000d48:	f000 fa1a 	bl	8001180 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_InitTick+0xe0>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e002      	b.n	8000d5a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3730      	adds	r7, #48	; 0x30
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	20000384 	.word	0x20000384
 8000d74:	40014400 	.word	0x40014400
 8000d78:	20000004 	.word	0x20000004

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dae:	f001 f97f 	bl	80020b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000384 	.word	0x20000384

08000dbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc4:	f000 fbd6 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00a      	b.n	8000df4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dde:	f7ff fe55 	bl	8000a8c <__io_getchar>
 8000de2:	4601      	mov	r1, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf0      	blt.n	8000dde <_read+0x12>
  }

  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e009      	b.n	8000e2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60ba      	str	r2, [r7, #8]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fe59 	bl	8000ad8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf1      	blt.n	8000e18 <_write+0x12>
  }
  return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_close>:

int _close(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e66:	605a      	str	r2, [r3, #4]
  return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_isatty>:

int _isatty(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed8:	f003 fd3a 	bl	8004950 <__errno>
 8000edc:	4603      	mov	r3, r0
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20020000 	.word	0x20020000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	200003cc 	.word	0x200003cc
 8000f10:	20004278 	.word	0x20004278

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3c:	f7ff ffea 	bl	8000f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f003 fcf9 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fbb9 	bl	80006e0 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f7c:	080058d4 	.word	0x080058d4
  ldr r2, =_sbss
 8000f80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f84:	20004274 	.word	0x20004274

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f8d8 	bl	800116a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	200f      	movs	r0, #15
 8000fbc:	f7ff fe6c 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fdf6 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	200003d0 	.word	0x200003d0

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200003d0 	.word	0x200003d0

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4c 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001192:	f7ff ff61 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001196:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	6978      	ldr	r0, [r7, #20]
 800119e:	f7ff ffb1 	bl	8001104 <NVIC_EncodePriority>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff80 	bl	80010b0 <__NVIC_SetPriority>
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff54 	bl	8001074 <__NVIC_EnableIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e159      	b.n	80014a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8148 	bne.w	800149e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	2b02      	cmp	r3, #2
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80a2 	beq.w	800149e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b57      	ldr	r3, [pc, #348]	; (80014bc <HAL_GPIO_Init+0x2e8>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a56      	ldr	r2, [pc, #344]	; (80014bc <HAL_GPIO_Init+0x2e8>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b54      	ldr	r3, [pc, #336]	; (80014bc <HAL_GPIO_Init+0x2e8>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a52      	ldr	r2, [pc, #328]	; (80014c0 <HAL_GPIO_Init+0x2ec>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a49      	ldr	r2, [pc, #292]	; (80014c4 <HAL_GPIO_Init+0x2f0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x202>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a48      	ldr	r2, [pc, #288]	; (80014c8 <HAL_GPIO_Init+0x2f4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x1fe>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a47      	ldr	r2, [pc, #284]	; (80014cc <HAL_GPIO_Init+0x2f8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x1f6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <HAL_GPIO_Init+0x300>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x1f2>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e008      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013d6:	2300      	movs	r3, #0
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f002 0203 	and.w	r2, r2, #3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4093      	lsls	r3, r2
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e8:	4935      	ldr	r1, [pc, #212]	; (80014c0 <HAL_GPIO_Init+0x2ec>)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <HAL_GPIO_Init+0x304>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141a:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <HAL_GPIO_Init+0x304>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_GPIO_Init+0x304>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001444:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <HAL_GPIO_Init+0x304>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_GPIO_Init+0x304>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146e:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_GPIO_Init+0x304>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_GPIO_Init+0x304>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_GPIO_Init+0x304>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	f67f aea2 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001550:	887a      	ldrh	r2, [r7, #2]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	041a      	lsls	r2, r3, #16
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43d9      	mvns	r1, r3
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	400b      	ands	r3, r1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f80c 	bl	80005b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40013c00 	.word	0x40013c00

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e267      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d075      	beq.n	80016ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015c2:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d00c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ce:	4b85      	ldr	r3, [pc, #532]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d112      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b82      	ldr	r3, [pc, #520]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e6:	d10b      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	4b7e      	ldr	r3, [pc, #504]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d05b      	beq.n	80016ac <HAL_RCC_OscConfig+0x108>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d157      	bne.n	80016ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e242      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x74>
 800160a:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a75      	ldr	r2, [pc, #468]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e01d      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x98>
 8001622:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a6f      	ldr	r2, [pc, #444]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6c      	ldr	r2, [pc, #432]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 800163c:	4b69      	ldr	r3, [pc, #420]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a68      	ldr	r2, [pc, #416]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b66      	ldr	r3, [pc, #408]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a65      	ldr	r2, [pc, #404]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800164e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fccc 	bl	8000ff8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fcc8 	bl	8000ff8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e207      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0xc0>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fcb8 	bl	8000ff8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fcb4 	bl	8000ff8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1f3      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0xe8>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d063      	beq.n	8001782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016ba:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00b      	beq.n	80016de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d11c      	bne.n	800170c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d116      	bne.n	800170c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <HAL_RCC_OscConfig+0x152>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e1c7      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4937      	ldr	r1, [pc, #220]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	e03a      	b.n	8001782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_OscConfig+0x244>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fc6d 	bl	8000ff8 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fc69 	bl	8000ff8 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1a8      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4925      	ldr	r1, [pc, #148]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_OscConfig+0x244>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fc4c 	bl	8000ff8 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001764:	f7ff fc48 	bl	8000ff8 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e187      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d036      	beq.n	80017fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d016      	beq.n	80017c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_RCC_OscConfig+0x248>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fc2c 	bl	8000ff8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fc28 	bl	8000ff8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e167      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80017b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x200>
 80017c2:	e01b      	b.n	80017fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_OscConfig+0x248>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fc15 	bl	8000ff8 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	e00e      	b.n	80017f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fc11 	bl	8000ff8 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d907      	bls.n	80017f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e150      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	42470000 	.word	0x42470000
 80017ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80017f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ea      	bne.n	80017d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 8097 	beq.w	8001938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180e:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10f      	bne.n	800183a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a7c      	ldr	r2, [pc, #496]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d118      	bne.n	8001878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001846:	4b74      	ldr	r3, [pc, #464]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a73      	ldr	r2, [pc, #460]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001852:	f7ff fbd1 	bl	8000ff8 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7ff fbcd 	bl	8000ff8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e10c      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x2ea>
 8001880:	4b64      	ldr	r3, [pc, #400]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a63      	ldr	r2, [pc, #396]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x324>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b05      	cmp	r3, #5
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x30c>
 8001896:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a5e      	ldr	r2, [pc, #376]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
 80018a2:	4b5c      	ldr	r3, [pc, #368]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a5b      	ldr	r2, [pc, #364]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0x324>
 80018b0:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	4a57      	ldr	r2, [pc, #348]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	; 0x70
 80018bc:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 0304 	bic.w	r3, r3, #4
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d015      	beq.n	80018fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff fb92 	bl	8000ff8 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7ff fb8e 	bl	8000ff8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0cb      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0ee      	beq.n	80018d8 <HAL_RCC_OscConfig+0x334>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7ff fb7c 	bl	8000ff8 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff fb78 	bl	8000ff8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e0b5      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ee      	bne.n	8001904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a38      	ldr	r2, [pc, #224]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80a1 	beq.w	8001a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d05c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d141      	bne.n	80019da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_RCC_OscConfig+0x478>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fb4c 	bl	8000ff8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fb48 	bl	8000ff8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e087      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	019b      	lsls	r3, r3, #6
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	3b01      	subs	r3, #1
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	491b      	ldr	r1, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x478>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fb21 	bl	8000ff8 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff fb1d 	bl	8000ff8 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e05c      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x416>
 80019d8:	e054      	b.n	8001a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_RCC_OscConfig+0x478>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fb0a 	bl	8000ff8 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff fb06 	bl	8000ff8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e045      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x444>
 8001a06:	e03d      	b.n	8001a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d107      	bne.n	8001a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e038      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x4ec>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d028      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d121      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d11a      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d111      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d107      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0cc      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d90c      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0b8      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001af2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	494d      	ldr	r1, [pc, #308]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d044      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d119      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e07f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e067      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff fa38 	bl	8000ff8 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff fa34 	bl	8000ff8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e04f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d20c      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e032      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1a:	f000 f821 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	490a      	ldr	r1, [pc, #40]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	5ccb      	ldrb	r3, [r1, r3]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f82c 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08005878 	.word	0x08005878
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c64:	b094      	sub	sp, #80	; 0x50
 8001c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c78:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d00d      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	f200 80e1 	bhi.w	8001e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x34>
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c92:	e0db      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c98:	e0db      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c9a:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c9e:	e0d8      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca0:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001caa:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cca:	2300      	movs	r3, #0
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	462b      	mov	r3, r5
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	0159      	lsls	r1, r3, #5
 8001ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce4:	0150      	lsls	r0, r2, #5
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4621      	mov	r1, r4
 8001cec:	1a51      	subs	r1, r2, r1
 8001cee:	6139      	str	r1, [r7, #16]
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d04:	4659      	mov	r1, fp
 8001d06:	018b      	lsls	r3, r1, #6
 8001d08:	4651      	mov	r1, sl
 8001d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d0e:	4651      	mov	r1, sl
 8001d10:	018a      	lsls	r2, r1, #6
 8001d12:	4651      	mov	r1, sl
 8001d14:	ebb2 0801 	subs.w	r8, r2, r1
 8001d18:	4659      	mov	r1, fp
 8001d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d32:	4690      	mov	r8, r2
 8001d34:	4699      	mov	r9, r3
 8001d36:	4623      	mov	r3, r4
 8001d38:	eb18 0303 	adds.w	r3, r8, r3
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	462b      	mov	r3, r5
 8001d40:	eb49 0303 	adc.w	r3, r9, r3
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d52:	4629      	mov	r1, r5
 8001d54:	024b      	lsls	r3, r1, #9
 8001d56:	4621      	mov	r1, r4
 8001d58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	024a      	lsls	r2, r1, #9
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d66:	2200      	movs	r2, #0
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d70:	f7fe fa86 	bl	8000280 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d7c:	e058      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	2200      	movs	r2, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	4611      	mov	r1, r2
 8001d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d98:	4642      	mov	r2, r8
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	f04f 0000 	mov.w	r0, #0
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	0159      	lsls	r1, r3, #5
 8001da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001daa:	0150      	lsls	r0, r2, #5
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4641      	mov	r1, r8
 8001db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001db6:	4649      	mov	r1, r9
 8001db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	00eb      	lsls	r3, r5, #3
 8001de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001de6:	00e2      	lsls	r2, r4, #3
 8001de8:	4614      	mov	r4, r2
 8001dea:	461d      	mov	r5, r3
 8001dec:	4643      	mov	r3, r8
 8001dee:	18e3      	adds	r3, r4, r3
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	464b      	mov	r3, r9
 8001df4:	eb45 0303 	adc.w	r3, r5, r3
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e06:	4629      	mov	r1, r5
 8001e08:	028b      	lsls	r3, r1, #10
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e10:	4621      	mov	r1, r4
 8001e12:	028a      	lsls	r2, r1, #10
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	61fa      	str	r2, [r7, #28]
 8001e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e24:	f7fe fa2c 	bl	8000280 <__aeabi_uldivmod>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	0c1b      	lsrs	r3, r3, #16
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e4a:	e002      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3750      	adds	r7, #80	; 0x50
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	007a1200 	.word	0x007a1200

08001e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000

08001e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0a9b      	lsrs	r3, r3, #10
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4903      	ldr	r1, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	08005888 	.word	0x08005888

08001eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb0:	f7ff ffdc 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0b5b      	lsrs	r3, r3, #13
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4903      	ldr	r1, [pc, #12]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	08005888 	.word	0x08005888

08001ed4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_RCC_GetClockConfig+0x60>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0207 	and.w	r2, r3, #7
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e041      	b.n	8001fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f839 	bl	8001fd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 f9b2 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d001      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e044      	b.n	800208e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_TIM_Base_Start_IT+0xb0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d018      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202e:	d013      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a16      	ldr	r2, [pc, #88]	; (80020ac <HAL_TIM_Base_Start_IT+0xc0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b06      	cmp	r3, #6
 8002068:	d010      	beq.n	800208c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	e007      	b.n	800208c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40014000 	.word	0x40014000

080020b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d020      	beq.n	8002114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01b      	beq.n	8002114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0202 	mvn.w	r2, #2
 80020e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8d2 	bl	80022a4 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8c4 	bl	8002290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8d5 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d020      	beq.n	8002160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0204 	mvn.w	r2, #4
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8ac 	bl	80022a4 <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f89e 	bl	8002290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f8af 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d020      	beq.n	80021ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0208 	mvn.w	r2, #8
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2204      	movs	r2, #4
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f886 	bl	80022a4 <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f878 	bl	8002290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f889 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d020      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0210 	mvn.w	r2, #16
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2208      	movs	r2, #8
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f860 	bl	80022a4 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f852 	bl	8002290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f863 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00c      	beq.n	800221c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0201 	mvn.w	r2, #1
 8002214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fc20 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00c      	beq.n	8002240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f8e6 	bl	800240c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f834 	bl	80022cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0220 	mvn.w	r2, #32
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8b8 	bl	80023f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a3a      	ldr	r2, [pc, #232]	; (80023dc <TIM_Base_SetConfig+0xfc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00f      	beq.n	8002318 <TIM_Base_SetConfig+0x38>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d00b      	beq.n	8002318 <TIM_Base_SetConfig+0x38>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <TIM_Base_SetConfig+0x100>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <TIM_Base_SetConfig+0x38>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a36      	ldr	r2, [pc, #216]	; (80023e4 <TIM_Base_SetConfig+0x104>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0x38>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a35      	ldr	r2, [pc, #212]	; (80023e8 <TIM_Base_SetConfig+0x108>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d108      	bne.n	800232a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a2b      	ldr	r2, [pc, #172]	; (80023dc <TIM_Base_SetConfig+0xfc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01b      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002338:	d017      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a28      	ldr	r2, [pc, #160]	; (80023e0 <TIM_Base_SetConfig+0x100>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a27      	ldr	r2, [pc, #156]	; (80023e4 <TIM_Base_SetConfig+0x104>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00f      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <TIM_Base_SetConfig+0x108>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00b      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <TIM_Base_SetConfig+0x10c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <TIM_Base_SetConfig+0x110>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d003      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a23      	ldr	r2, [pc, #140]	; (80023f4 <TIM_Base_SetConfig+0x114>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d108      	bne.n	800237c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <TIM_Base_SetConfig+0xfc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f023 0201 	bic.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]
  }
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40010000 	.word	0x40010000
 80023e0:	40000400 	.word	0x40000400
 80023e4:	40000800 	.word	0x40000800
 80023e8:	40000c00 	.word	0x40000c00
 80023ec:	40014000 	.word	0x40014000
 80023f0:	40014400 	.word	0x40014400
 80023f4:	40014800 	.word	0x40014800

080023f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e042      	b.n	80024b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe fbde 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa09 	bl	800287c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d175      	bne.n	80025cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_UART_Transmit+0x2c>
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e06e      	b.n	80025ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2221      	movs	r2, #33	; 0x21
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024fe:	f7fe fd7b 	bl	8000ff8 <HAL_GetTick>
 8002502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002518:	d108      	bne.n	800252c <HAL_UART_Transmit+0x6c>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d104      	bne.n	800252c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	e003      	b.n	8002534 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002534:	e02e      	b.n	8002594 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2200      	movs	r2, #0
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f8df 	bl	8002704 <UART_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e03a      	b.n	80025ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800256c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	3302      	adds	r3, #2
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e007      	b.n	8002586 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	3301      	adds	r3, #1
 8002584:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1cb      	bne.n	8002536 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2200      	movs	r2, #0
 80025a6:	2140      	movs	r1, #64	; 0x40
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f8ab 	bl	8002704 <UART_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e006      	b.n	80025ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e000      	b.n	80025ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b08a      	sub	sp, #40	; 0x28
 80025da:	af02      	add	r7, sp, #8
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	f040 8081 	bne.w	80026fa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_UART_Receive+0x2e>
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e079      	b.n	80026fc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2222      	movs	r2, #34	; 0x22
 8002612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800261c:	f7fe fcec 	bl	8000ff8 <HAL_GetTick>
 8002620:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	88fa      	ldrh	r2, [r7, #6]
 800262c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002636:	d108      	bne.n	800264a <HAL_UART_Receive+0x74>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	e003      	b.n	8002652 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002652:	e047      	b.n	80026e4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2200      	movs	r2, #0
 800265c:	2120      	movs	r1, #32
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f850 	bl	8002704 <UART_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e042      	b.n	80026fc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10c      	bne.n	8002696 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	b29b      	uxth	r3, r3
 8002684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002688:	b29a      	uxth	r2, r3
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	3302      	adds	r3, #2
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e01f      	b.n	80026d6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269e:	d007      	beq.n	80026b0 <HAL_UART_Receive+0xda>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_UART_Receive+0xe8>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e008      	b.n	80026d0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	3301      	adds	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1b2      	bne.n	8002654 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e000      	b.n	80026fc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
  }
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002714:	e03b      	b.n	800278e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d037      	beq.n	800278e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7fe fc6b 	bl	8000ff8 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	6a3a      	ldr	r2, [r7, #32]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <UART_WaitOnFlagUntilTimeout+0x30>
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e03a      	b.n	80027ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d023      	beq.n	800278e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d020      	beq.n	800278e <UART_WaitOnFlagUntilTimeout+0x8a>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b40      	cmp	r3, #64	; 0x40
 8002750:	d01d      	beq.n	800278e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b08      	cmp	r3, #8
 800275e:	d116      	bne.n	800278e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f81d 	bl	80027b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2208      	movs	r2, #8
 8002780:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e00f      	b.n	80027ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d0b4      	beq.n	8002716 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b095      	sub	sp, #84	; 0x54
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027de:	643a      	str	r2, [r7, #64]	; 0x40
 80027e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027e6:	e841 2300 	strex	r3, r2, [r1]
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e5      	bne.n	80027be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3314      	adds	r3, #20
 80027f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	e853 3f00 	ldrex	r3, [r3]
 8002800:	61fb      	str	r3, [r7, #28]
   return(result);
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	64bb      	str	r3, [r7, #72]	; 0x48
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3314      	adds	r3, #20
 8002810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e5      	bne.n	80027f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	2b01      	cmp	r3, #1
 800282c:	d119      	bne.n	8002862 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	e853 3f00 	ldrex	r3, [r3]
 800283c:	60bb      	str	r3, [r7, #8]
   return(result);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f023 0310 	bic.w	r3, r3, #16
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800284e:	61ba      	str	r2, [r7, #24]
 8002850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	6979      	ldr	r1, [r7, #20]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	e841 2300 	strex	r3, r2, [r1]
 800285a:	613b      	str	r3, [r7, #16]
   return(result);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e5      	bne.n	800282e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002870:	bf00      	nop
 8002872:	3754      	adds	r7, #84	; 0x54
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800287c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002880:	b0c0      	sub	sp, #256	; 0x100
 8002882:	af00      	add	r7, sp, #0
 8002884:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002898:	68d9      	ldr	r1, [r3, #12]
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	ea40 0301 	orr.w	r3, r0, r1
 80028a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028d4:	f021 010c 	bic.w	r1, r1, #12
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028e2:	430b      	orrs	r3, r1
 80028e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f6:	6999      	ldr	r1, [r3, #24]
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	ea40 0301 	orr.w	r3, r0, r1
 8002902:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b8f      	ldr	r3, [pc, #572]	; (8002b48 <UART_SetConfig+0x2cc>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d005      	beq.n	800291c <UART_SetConfig+0xa0>
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b8d      	ldr	r3, [pc, #564]	; (8002b4c <UART_SetConfig+0x2d0>)
 8002918:	429a      	cmp	r2, r3
 800291a:	d104      	bne.n	8002926 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800291c:	f7ff fac6 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8002920:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002924:	e003      	b.n	800292e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002926:	f7ff faad 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 800292a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002938:	f040 810c 	bne.w	8002b54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800293c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002940:	2200      	movs	r2, #0
 8002942:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002946:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800294a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800294e:	4622      	mov	r2, r4
 8002950:	462b      	mov	r3, r5
 8002952:	1891      	adds	r1, r2, r2
 8002954:	65b9      	str	r1, [r7, #88]	; 0x58
 8002956:	415b      	adcs	r3, r3
 8002958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800295a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800295e:	4621      	mov	r1, r4
 8002960:	eb12 0801 	adds.w	r8, r2, r1
 8002964:	4629      	mov	r1, r5
 8002966:	eb43 0901 	adc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800298c:	462b      	mov	r3, r5
 800298e:	eb49 0303 	adc.w	r3, r9, r3
 8002992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029aa:	460b      	mov	r3, r1
 80029ac:	18db      	adds	r3, r3, r3
 80029ae:	653b      	str	r3, [r7, #80]	; 0x50
 80029b0:	4613      	mov	r3, r2
 80029b2:	eb42 0303 	adc.w	r3, r2, r3
 80029b6:	657b      	str	r3, [r7, #84]	; 0x54
 80029b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029c0:	f7fd fc5e 	bl	8000280 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <UART_SetConfig+0x2d4>)
 80029ca:	fba3 2302 	umull	r2, r3, r3, r2
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	011c      	lsls	r4, r3, #4
 80029d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	1891      	adds	r1, r2, r2
 80029ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80029ec:	415b      	adcs	r3, r3
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029f4:	4641      	mov	r1, r8
 80029f6:	eb12 0a01 	adds.w	sl, r2, r1
 80029fa:	4649      	mov	r1, r9
 80029fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a14:	4692      	mov	sl, r2
 8002a16:	469b      	mov	fp, r3
 8002a18:	4643      	mov	r3, r8
 8002a1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a22:	464b      	mov	r3, r9
 8002a24:	eb4b 0303 	adc.w	r3, fp, r3
 8002a28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a40:	460b      	mov	r3, r1
 8002a42:	18db      	adds	r3, r3, r3
 8002a44:	643b      	str	r3, [r7, #64]	; 0x40
 8002a46:	4613      	mov	r3, r2
 8002a48:	eb42 0303 	adc.w	r3, r2, r3
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a56:	f7fd fc13 	bl	8000280 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <UART_SetConfig+0x2d4>)
 8002a62:	fba3 2301 	umull	r2, r3, r3, r1
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2264      	movs	r2, #100	; 0x64
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	1acb      	subs	r3, r1, r3
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <UART_SetConfig+0x2d4>)
 8002a78:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a84:	441c      	add	r4, r3
 8002a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a98:	4642      	mov	r2, r8
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	1891      	adds	r1, r2, r2
 8002a9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002aa0:	415b      	adcs	r3, r3
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	1851      	adds	r1, r2, r1
 8002aac:	6339      	str	r1, [r7, #48]	; 0x30
 8002aae:	4649      	mov	r1, r9
 8002ab0:	414b      	adcs	r3, r1
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ac0:	4659      	mov	r1, fp
 8002ac2:	00cb      	lsls	r3, r1, #3
 8002ac4:	4651      	mov	r1, sl
 8002ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aca:	4651      	mov	r1, sl
 8002acc:	00ca      	lsls	r2, r1, #3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	189b      	adds	r3, r3, r2
 8002ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002adc:	464b      	mov	r3, r9
 8002ade:	460a      	mov	r2, r1
 8002ae0:	eb42 0303 	adc.w	r3, r2, r3
 8002ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002af4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002af8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002afc:	460b      	mov	r3, r1
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b02:	4613      	mov	r3, r2
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b12:	f7fd fbb5 	bl	8000280 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <UART_SetConfig+0x2d4>)
 8002b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	2164      	movs	r1, #100	; 0x64
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	3332      	adds	r3, #50	; 0x32
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <UART_SetConfig+0x2d4>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	f003 0207 	and.w	r2, r3, #7
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4422      	add	r2, r4
 8002b42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b44:	e106      	b.n	8002d54 <UART_SetConfig+0x4d8>
 8002b46:	bf00      	nop
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b66:	4642      	mov	r2, r8
 8002b68:	464b      	mov	r3, r9
 8002b6a:	1891      	adds	r1, r2, r2
 8002b6c:	6239      	str	r1, [r7, #32]
 8002b6e:	415b      	adcs	r3, r3
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b76:	4641      	mov	r1, r8
 8002b78:	1854      	adds	r4, r2, r1
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	eb43 0501 	adc.w	r5, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	00eb      	lsls	r3, r5, #3
 8002b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8e:	00e2      	lsls	r2, r4, #3
 8002b90:	4614      	mov	r4, r2
 8002b92:	461d      	mov	r5, r3
 8002b94:	4643      	mov	r3, r8
 8002b96:	18e3      	adds	r3, r4, r3
 8002b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b9c:	464b      	mov	r3, r9
 8002b9e:	eb45 0303 	adc.w	r3, r5, r3
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	008b      	lsls	r3, r1, #2
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bcc:	4621      	mov	r1, r4
 8002bce:	008a      	lsls	r2, r1, #2
 8002bd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bd4:	f7fd fb54 	bl	8000280 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4b60      	ldr	r3, [pc, #384]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002bde:	fba3 2302 	umull	r2, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	011c      	lsls	r4, r3, #4
 8002be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	1891      	adds	r1, r2, r2
 8002bfe:	61b9      	str	r1, [r7, #24]
 8002c00:	415b      	adcs	r3, r3
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c08:	4641      	mov	r1, r8
 8002c0a:	1851      	adds	r1, r2, r1
 8002c0c:	6139      	str	r1, [r7, #16]
 8002c0e:	4649      	mov	r1, r9
 8002c10:	414b      	adcs	r3, r1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c20:	4659      	mov	r1, fp
 8002c22:	00cb      	lsls	r3, r1, #3
 8002c24:	4651      	mov	r1, sl
 8002c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c2a:	4651      	mov	r1, sl
 8002c2c:	00ca      	lsls	r2, r1, #3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	4642      	mov	r2, r8
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	460a      	mov	r2, r1
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c60:	4649      	mov	r1, r9
 8002c62:	008b      	lsls	r3, r1, #2
 8002c64:	4641      	mov	r1, r8
 8002c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c6a:	4641      	mov	r1, r8
 8002c6c:	008a      	lsls	r2, r1, #2
 8002c6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c72:	f7fd fb05 	bl	8000280 <__aeabi_uldivmod>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2264      	movs	r2, #100	; 0x64
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	1acb      	subs	r3, r1, r3
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	3332      	adds	r3, #50	; 0x32
 8002c90:	4a33      	ldr	r2, [pc, #204]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9c:	441c      	add	r4, r3
 8002c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ca6:	677a      	str	r2, [r7, #116]	; 0x74
 8002ca8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cac:	4642      	mov	r2, r8
 8002cae:	464b      	mov	r3, r9
 8002cb0:	1891      	adds	r1, r2, r2
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	415b      	adcs	r3, r3
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	1851      	adds	r1, r2, r1
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	414b      	adcs	r3, r1
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	00cb      	lsls	r3, r1, #3
 8002cd8:	4651      	mov	r1, sl
 8002cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cde:	4651      	mov	r1, sl
 8002ce0:	00ca      	lsls	r2, r1, #3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4642      	mov	r2, r8
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cee:	464b      	mov	r3, r9
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	eb42 0303 	adc.w	r3, r2, r3
 8002cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	663b      	str	r3, [r7, #96]	; 0x60
 8002d02:	667a      	str	r2, [r7, #100]	; 0x64
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d10:	4649      	mov	r1, r9
 8002d12:	008b      	lsls	r3, r1, #2
 8002d14:	4641      	mov	r1, r8
 8002d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	008a      	lsls	r2, r1, #2
 8002d1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d22:	f7fd faad 	bl	8000280 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	2164      	movs	r1, #100	; 0x64
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	3332      	adds	r3, #50	; 0x32
 8002d3e:	4a08      	ldr	r2, [pc, #32]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4422      	add	r2, r4
 8002d52:	609a      	str	r2, [r3, #8]
}
 8002d54:	bf00      	nop
 8002d56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d60:	51eb851f 	.word	0x51eb851f

08002d64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d76:	2b84      	cmp	r3, #132	; 0x84
 8002d78:	d005      	beq.n	8002d86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002d7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	3303      	adds	r3, #3
 8002d84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d86:	68fb      	ldr	r3, [r7, #12]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d98:	f000 faf6 	bl	8003388 <vTaskStartScheduler>
  
  return osOK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da4:	b089      	sub	sp, #36	; 0x24
 8002da6:	af04      	add	r7, sp, #16
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <osThreadCreate+0x54>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01c      	beq.n	8002df6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685c      	ldr	r4, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691e      	ldr	r6, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ffc8 	bl	8002d64 <makeFreeRtosPriority>
 8002dd4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dde:	9202      	str	r2, [sp, #8]
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	9100      	str	r1, [sp, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4632      	mov	r2, r6
 8002de8:	4629      	mov	r1, r5
 8002dea:	4620      	mov	r0, r4
 8002dec:	f000 f8ed 	bl	8002fca <xTaskCreateStatic>
 8002df0:	4603      	mov	r3, r0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e01c      	b.n	8002e30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685c      	ldr	r4, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e02:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ffaa 	bl	8002d64 <makeFreeRtosPriority>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	9200      	str	r2, [sp, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4632      	mov	r2, r6
 8002e1e:	4629      	mov	r1, r5
 8002e20:	4620      	mov	r0, r4
 8002e22:	f000 f92f 	bl	8003084 <xTaskCreate>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d001      	beq.n	8002e30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e30:	68fb      	ldr	r3, [r7, #12]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <osDelay+0x16>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	e000      	b.n	8002e52 <osDelay+0x18>
 8002e50:	2301      	movs	r3, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fa64 	bl	8003320 <vTaskDelay>
  
  return osOK;
 8002e58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f103 0208 	add.w	r2, r3, #8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f103 0208 	add.w	r2, r3, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f103 0208 	add.w	r2, r3, #8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	601a      	str	r2, [r3, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	d103      	bne.n	8002f24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e00c      	b.n	8002f3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3308      	adds	r3, #8
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e002      	b.n	8002f32 <vListInsert+0x2e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d2f6      	bcs.n	8002f2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6892      	ldr	r2, [r2, #8]
 8002f8c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6852      	ldr	r2, [r2, #4]
 8002f96:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d103      	bne.n	8002faa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b08e      	sub	sp, #56	; 0x38
 8002fce:	af04      	add	r7, sp, #16
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ff0:	bf00      	nop
 8002ff2:	e7fe      	b.n	8002ff2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <xTaskCreateStatic+0x46>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	61fb      	str	r3, [r7, #28]
}
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003010:	23a0      	movs	r3, #160	; 0xa0
 8003012:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2ba0      	cmp	r3, #160	; 0xa0
 8003018:	d00a      	beq.n	8003030 <xTaskCreateStatic+0x66>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	61bb      	str	r3, [r7, #24]
}
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003030:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01e      	beq.n	8003076 <xTaskCreateStatic+0xac>
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01b      	beq.n	8003076 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003046:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	2202      	movs	r2, #2
 800304c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003050:	2300      	movs	r3, #0
 8003052:	9303      	str	r3, [sp, #12]
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	9302      	str	r3, [sp, #8]
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f851 	bl	8003110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800306e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003070:	f000 f8ec 	bl	800324c <prvAddNewTaskToReadyList>
 8003074:	e001      	b.n	800307a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800307a:	697b      	ldr	r3, [r7, #20]
	}
 800307c:	4618      	mov	r0, r3
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	; 0x30
 8003088:	af04      	add	r7, sp, #16
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fef5 	bl	8003e88 <pvPortMalloc>
 800309e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00e      	beq.n	80030c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030a6:	20a0      	movs	r0, #160	; 0xa0
 80030a8:	f000 feee 	bl	8003e88 <pvPortMalloc>
 80030ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ba:	e005      	b.n	80030c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030bc:	6978      	ldr	r0, [r7, #20]
 80030be:	f000 ffaf 	bl	8004020 <vPortFree>
 80030c2:	e001      	b.n	80030c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d017      	beq.n	80030fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	2300      	movs	r3, #0
 80030da:	9303      	str	r3, [sp, #12]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	9302      	str	r3, [sp, #8]
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f80f 	bl	8003110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030f2:	69f8      	ldr	r0, [r7, #28]
 80030f4:	f000 f8aa 	bl	800324c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030f8:	2301      	movs	r3, #1
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	e002      	b.n	8003104 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003104:	69bb      	ldr	r3, [r7, #24]
	}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003128:	3b01      	subs	r3, #1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f023 0307 	bic.w	r3, r3, #7
 8003136:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	617b      	str	r3, [r7, #20]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01f      	beq.n	800319e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e012      	b.n	800318a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	7819      	ldrb	r1, [r3, #0]
 800316c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	3334      	adds	r3, #52	; 0x34
 8003174:	460a      	mov	r2, r1
 8003176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2b0f      	cmp	r3, #15
 800318e:	d9e9      	bls.n	8003164 <prvInitialiseNewTask+0x54>
 8003190:	e000      	b.n	8003194 <prvInitialiseNewTask+0x84>
			{
				break;
 8003192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800319c:	e003      	b.n	80031a6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d901      	bls.n	80031b0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031ac:	2306      	movs	r3, #6
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	2200      	movs	r2, #0
 80031c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	3304      	adds	r3, #4
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fe6b 	bl	8002ea2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	3318      	adds	r3, #24
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fe66 	bl	8002ea2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	f1c3 0207 	rsb	r2, r3, #7
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	334c      	adds	r3, #76	; 0x4c
 8003200:	224c      	movs	r2, #76	; 0x4c
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f001 faff 	bl	8004808 <memset>
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <prvInitialiseNewTask+0x130>)
 800320e:	651a      	str	r2, [r3, #80]	; 0x50
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <prvInitialiseNewTask+0x134>)
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <prvInitialiseNewTask+0x138>)
 800321a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	69b8      	ldr	r0, [r7, #24]
 8003222:	f000 fc1f 	bl	8003a64 <pxPortInitialiseStack>
 8003226:	4602      	mov	r2, r0
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003238:	bf00      	nop
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20004128 	.word	0x20004128
 8003244:	20004190 	.word	0x20004190
 8003248:	200041f8 	.word	0x200041f8

0800324c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003254:	f000 fd36 	bl	8003cc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003258:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <prvAddNewTaskToReadyList+0xb8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	4a29      	ldr	r2, [pc, #164]	; (8003304 <prvAddNewTaskToReadyList+0xb8>)
 8003260:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003262:	4b29      	ldr	r3, [pc, #164]	; (8003308 <prvAddNewTaskToReadyList+0xbc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800326a:	4a27      	ldr	r2, [pc, #156]	; (8003308 <prvAddNewTaskToReadyList+0xbc>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <prvAddNewTaskToReadyList+0xb8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d110      	bne.n	800329a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003278:	f000 facc 	bl	8003814 <prvInitialiseTaskLists>
 800327c:	e00d      	b.n	800329a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <prvAddNewTaskToReadyList+0xc0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <prvAddNewTaskToReadyList+0xbc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	429a      	cmp	r2, r3
 8003292:	d802      	bhi.n	800329a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <prvAddNewTaskToReadyList+0xbc>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <prvAddNewTaskToReadyList+0xc4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <prvAddNewTaskToReadyList+0xc4>)
 80032a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <prvAddNewTaskToReadyList+0xc8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <prvAddNewTaskToReadyList+0xc8>)
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <prvAddNewTaskToReadyList+0xcc>)
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	f7ff fdf5 	bl	8002ebc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032d2:	f000 fd27 	bl	8003d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <prvAddNewTaskToReadyList+0xc0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00e      	beq.n	80032fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <prvAddNewTaskToReadyList+0xbc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d207      	bcs.n	80032fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <prvAddNewTaskToReadyList+0xd0>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200004d4 	.word	0x200004d4
 8003308:	200003d4 	.word	0x200003d4
 800330c:	200004e0 	.word	0x200004e0
 8003310:	200004f0 	.word	0x200004f0
 8003314:	200004dc 	.word	0x200004dc
 8003318:	200003d8 	.word	0x200003d8
 800331c:	e000ed04 	.word	0xe000ed04

08003320 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d017      	beq.n	8003362 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <vTaskDelay+0x60>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <vTaskDelay+0x30>
	__asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	60bb      	str	r3, [r7, #8]
}
 800334c:	bf00      	nop
 800334e:	e7fe      	b.n	800334e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003350:	f000 f884 	bl	800345c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003354:	2100      	movs	r1, #0
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fb1e 	bl	8003998 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800335c:	f000 f88c 	bl	8003478 <xTaskResumeAll>
 8003360:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <vTaskDelay+0x64>)
 800336a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200004fc 	.word	0x200004fc
 8003384:	e000ed04 	.word	0xe000ed04

08003388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003396:	463a      	mov	r2, r7
 8003398:	1d39      	adds	r1, r7, #4
 800339a:	f107 0308 	add.w	r3, r7, #8
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f8ec 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033a4:	6839      	ldr	r1, [r7, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	9202      	str	r2, [sp, #8]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	2300      	movs	r3, #0
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2300      	movs	r3, #0
 80033b4:	460a      	mov	r2, r1
 80033b6:	4921      	ldr	r1, [pc, #132]	; (800343c <vTaskStartScheduler+0xb4>)
 80033b8:	4821      	ldr	r0, [pc, #132]	; (8003440 <vTaskStartScheduler+0xb8>)
 80033ba:	f7ff fe06 	bl	8002fca <xTaskCreateStatic>
 80033be:	4603      	mov	r3, r0
 80033c0:	4a20      	ldr	r2, [pc, #128]	; (8003444 <vTaskStartScheduler+0xbc>)
 80033c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033c4:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <vTaskStartScheduler+0xbc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033cc:	2301      	movs	r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	e001      	b.n	80033d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d11b      	bne.n	8003414 <vTaskStartScheduler+0x8c>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	613b      	str	r3, [r7, #16]
}
 80033ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <vTaskStartScheduler+0xc0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	334c      	adds	r3, #76	; 0x4c
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <vTaskStartScheduler+0xc4>)
 80033f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <vTaskStartScheduler+0xc8>)
 80033fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003400:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <vTaskStartScheduler+0xcc>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <vTaskStartScheduler+0xd0>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800340e:	f000 fbb7 	bl	8003b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003412:	e00e      	b.n	8003432 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d10a      	bne.n	8003432 <vTaskStartScheduler+0xaa>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	60fb      	str	r3, [r7, #12]
}
 800342e:	bf00      	nop
 8003430:	e7fe      	b.n	8003430 <vTaskStartScheduler+0xa8>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	08005870 	.word	0x08005870
 8003440:	080037e5 	.word	0x080037e5
 8003444:	200004f8 	.word	0x200004f8
 8003448:	200003d4 	.word	0x200003d4
 800344c:	20000068 	.word	0x20000068
 8003450:	200004f4 	.word	0x200004f4
 8003454:	200004e0 	.word	0x200004e0
 8003458:	200004d8 	.word	0x200004d8

0800345c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <vTaskSuspendAll+0x18>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3301      	adds	r3, #1
 8003466:	4a03      	ldr	r2, [pc, #12]	; (8003474 <vTaskSuspendAll+0x18>)
 8003468:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	200004fc 	.word	0x200004fc

08003478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <xTaskResumeAll+0x114>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	603b      	str	r3, [r7, #0]
}
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034a4:	f000 fc0e 	bl	8003cc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034a8:	4b38      	ldr	r3, [pc, #224]	; (800358c <xTaskResumeAll+0x114>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	4a37      	ldr	r2, [pc, #220]	; (800358c <xTaskResumeAll+0x114>)
 80034b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b2:	4b36      	ldr	r3, [pc, #216]	; (800358c <xTaskResumeAll+0x114>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d161      	bne.n	800357e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034ba:	4b35      	ldr	r3, [pc, #212]	; (8003590 <xTaskResumeAll+0x118>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d05d      	beq.n	800357e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034c2:	e02e      	b.n	8003522 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c4:	4b33      	ldr	r3, [pc, #204]	; (8003594 <xTaskResumeAll+0x11c>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3318      	adds	r3, #24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fd50 	bl	8002f76 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3304      	adds	r3, #4
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fd4b 	bl	8002f76 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	2201      	movs	r2, #1
 80034e6:	409a      	lsls	r2, r3
 80034e8:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <xTaskResumeAll+0x120>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <xTaskResumeAll+0x120>)
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4a27      	ldr	r2, [pc, #156]	; (800359c <xTaskResumeAll+0x124>)
 8003500:	441a      	add	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3304      	adds	r3, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f7ff fcd7 	bl	8002ebc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003512:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <xTaskResumeAll+0x128>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800351c:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <xTaskResumeAll+0x12c>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003522:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <xTaskResumeAll+0x11c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1cc      	bne.n	80034c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003530:	f000 fa12 	bl	8003958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003534:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <xTaskResumeAll+0x130>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d010      	beq.n	8003562 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003540:	f000 f836 	bl	80035b0 <xTaskIncrementTick>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800354a:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <xTaskResumeAll+0x12c>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f1      	bne.n	8003540 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <xTaskResumeAll+0x130>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <xTaskResumeAll+0x12c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <xTaskResumeAll+0x134>)
 8003570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800357e:	f000 fbd1 	bl	8003d24 <vPortExitCritical>

	return xAlreadyYielded;
 8003582:	68bb      	ldr	r3, [r7, #8]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200004fc 	.word	0x200004fc
 8003590:	200004d4 	.word	0x200004d4
 8003594:	20000494 	.word	0x20000494
 8003598:	200004dc 	.word	0x200004dc
 800359c:	200003d8 	.word	0x200003d8
 80035a0:	200003d4 	.word	0x200003d4
 80035a4:	200004e8 	.word	0x200004e8
 80035a8:	200004e4 	.word	0x200004e4
 80035ac:	e000ed04 	.word	0xe000ed04

080035b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ba:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <xTaskIncrementTick+0x144>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 808e 	bne.w	80036e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035c4:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <xTaskIncrementTick+0x148>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035cc:	4a4a      	ldr	r2, [pc, #296]	; (80036f8 <xTaskIncrementTick+0x148>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d120      	bne.n	800361a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80035d8:	4b48      	ldr	r3, [pc, #288]	; (80036fc <xTaskIncrementTick+0x14c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	603b      	str	r3, [r7, #0]
}
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <xTaskIncrementTick+0x46>
 80035f8:	4b40      	ldr	r3, [pc, #256]	; (80036fc <xTaskIncrementTick+0x14c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	4b40      	ldr	r3, [pc, #256]	; (8003700 <xTaskIncrementTick+0x150>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3e      	ldr	r2, [pc, #248]	; (80036fc <xTaskIncrementTick+0x14c>)
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4a3e      	ldr	r2, [pc, #248]	; (8003700 <xTaskIncrementTick+0x150>)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <xTaskIncrementTick+0x154>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	4a3c      	ldr	r2, [pc, #240]	; (8003704 <xTaskIncrementTick+0x154>)
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	f000 f99f 	bl	8003958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800361a:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <xTaskIncrementTick+0x158>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	429a      	cmp	r2, r3
 8003622:	d348      	bcc.n	80036b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <xTaskIncrementTick+0x14c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <xTaskIncrementTick+0x158>)
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	601a      	str	r2, [r3, #0]
					break;
 8003636:	e03e      	b.n	80036b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <xTaskIncrementTick+0x14c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d203      	bcs.n	8003658 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003650:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <xTaskIncrementTick+0x158>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003656:	e02e      	b.n	80036b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	3304      	adds	r3, #4
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fc8a 	bl	8002f76 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3318      	adds	r3, #24
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fc81 	bl	8002f76 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	2201      	movs	r2, #1
 800367a:	409a      	lsls	r2, r3
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <xTaskIncrementTick+0x15c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4313      	orrs	r3, r2
 8003682:	4a22      	ldr	r2, [pc, #136]	; (800370c <xTaskIncrementTick+0x15c>)
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <xTaskIncrementTick+0x160>)
 8003694:	441a      	add	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3304      	adds	r3, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f7ff fc0d 	bl	8002ebc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <xTaskIncrementTick+0x164>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d3b9      	bcc.n	8003624 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036b4:	e7b6      	b.n	8003624 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <xTaskIncrementTick+0x164>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	4914      	ldr	r1, [pc, #80]	; (8003710 <xTaskIncrementTick+0x160>)
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d901      	bls.n	80036d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80036ce:	2301      	movs	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <xTaskIncrementTick+0x168>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80036da:	2301      	movs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e004      	b.n	80036ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <xTaskIncrementTick+0x16c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	4a0d      	ldr	r2, [pc, #52]	; (800371c <xTaskIncrementTick+0x16c>)
 80036e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80036ea:	697b      	ldr	r3, [r7, #20]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200004fc 	.word	0x200004fc
 80036f8:	200004d8 	.word	0x200004d8
 80036fc:	2000048c 	.word	0x2000048c
 8003700:	20000490 	.word	0x20000490
 8003704:	200004ec 	.word	0x200004ec
 8003708:	200004f4 	.word	0x200004f4
 800370c:	200004dc 	.word	0x200004dc
 8003710:	200003d8 	.word	0x200003d8
 8003714:	200003d4 	.word	0x200003d4
 8003718:	200004e8 	.word	0x200004e8
 800371c:	200004e4 	.word	0x200004e4

08003720 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <vTaskSwitchContext+0xac>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800372e:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <vTaskSwitchContext+0xb0>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003734:	e044      	b.n	80037c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <vTaskSwitchContext+0xb0>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <vTaskSwitchContext+0xb4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800374a:	7afb      	ldrb	r3, [r7, #11]
 800374c:	f1c3 031f 	rsb	r3, r3, #31
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	4921      	ldr	r1, [pc, #132]	; (80037d8 <vTaskSwitchContext+0xb8>)
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	607b      	str	r3, [r7, #4]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <vTaskSwitchContext+0x5a>
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <vTaskSwitchContext+0xb8>)
 8003788:	4413      	add	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	3308      	adds	r3, #8
 800379e:	429a      	cmp	r2, r3
 80037a0:	d104      	bne.n	80037ac <vTaskSwitchContext+0x8c>
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	605a      	str	r2, [r3, #4]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <vTaskSwitchContext+0xbc>)
 80037b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <vTaskSwitchContext+0xbc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	334c      	adds	r3, #76	; 0x4c
 80037bc:	4a08      	ldr	r2, [pc, #32]	; (80037e0 <vTaskSwitchContext+0xc0>)
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	200004fc 	.word	0x200004fc
 80037d0:	200004e8 	.word	0x200004e8
 80037d4:	200004dc 	.word	0x200004dc
 80037d8:	200003d8 	.word	0x200003d8
 80037dc:	200003d4 	.word	0x200003d4
 80037e0:	20000068 	.word	0x20000068

080037e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037ec:	f000 f852 	bl	8003894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <prvIdleTask+0x28>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d9f9      	bls.n	80037ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <prvIdleTask+0x2c>)
 80037fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003808:	e7f0      	b.n	80037ec <prvIdleTask+0x8>
 800380a:	bf00      	nop
 800380c:	200003d8 	.word	0x200003d8
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	e00c      	b.n	800383a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4a12      	ldr	r2, [pc, #72]	; (8003874 <prvInitialiseTaskLists+0x60>)
 800382c:	4413      	add	r3, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fb17 	bl	8002e62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3301      	adds	r3, #1
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b06      	cmp	r3, #6
 800383e:	d9ef      	bls.n	8003820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <prvInitialiseTaskLists+0x64>)
 8003842:	f7ff fb0e 	bl	8002e62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003846:	480d      	ldr	r0, [pc, #52]	; (800387c <prvInitialiseTaskLists+0x68>)
 8003848:	f7ff fb0b 	bl	8002e62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800384c:	480c      	ldr	r0, [pc, #48]	; (8003880 <prvInitialiseTaskLists+0x6c>)
 800384e:	f7ff fb08 	bl	8002e62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003852:	480c      	ldr	r0, [pc, #48]	; (8003884 <prvInitialiseTaskLists+0x70>)
 8003854:	f7ff fb05 	bl	8002e62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003858:	480b      	ldr	r0, [pc, #44]	; (8003888 <prvInitialiseTaskLists+0x74>)
 800385a:	f7ff fb02 	bl	8002e62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <prvInitialiseTaskLists+0x78>)
 8003860:	4a05      	ldr	r2, [pc, #20]	; (8003878 <prvInitialiseTaskLists+0x64>)
 8003862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <prvInitialiseTaskLists+0x7c>)
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <prvInitialiseTaskLists+0x68>)
 8003868:	601a      	str	r2, [r3, #0]
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200003d8 	.word	0x200003d8
 8003878:	20000464 	.word	0x20000464
 800387c:	20000478 	.word	0x20000478
 8003880:	20000494 	.word	0x20000494
 8003884:	200004a8 	.word	0x200004a8
 8003888:	200004c0 	.word	0x200004c0
 800388c:	2000048c 	.word	0x2000048c
 8003890:	20000490 	.word	0x20000490

08003894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800389a:	e019      	b.n	80038d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800389c:	f000 fa12 	bl	8003cc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <prvCheckTasksWaitingTermination+0x50>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fb62 	bl	8002f76 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <prvCheckTasksWaitingTermination+0x54>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <prvCheckTasksWaitingTermination+0x54>)
 80038ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <prvCheckTasksWaitingTermination+0x58>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <prvCheckTasksWaitingTermination+0x58>)
 80038c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038c6:	f000 fa2d 	bl	8003d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f810 	bl	80038f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <prvCheckTasksWaitingTermination+0x58>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e1      	bne.n	800389c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200004a8 	.word	0x200004a8
 80038e8:	200004d4 	.word	0x200004d4
 80038ec:	200004bc 	.word	0x200004bc

080038f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	334c      	adds	r3, #76	; 0x4c
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 ff9b 	bl	8004838 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003908:	2b00      	cmp	r3, #0
 800390a:	d108      	bne.n	800391e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fb85 	bl	8004020 <vPortFree>
				vPortFree( pxTCB );
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fb82 	bl	8004020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800391c:	e018      	b.n	8003950 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003924:	2b01      	cmp	r3, #1
 8003926:	d103      	bne.n	8003930 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fb79 	bl	8004020 <vPortFree>
	}
 800392e:	e00f      	b.n	8003950 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003936:	2b02      	cmp	r3, #2
 8003938:	d00a      	beq.n	8003950 <prvDeleteTCB+0x60>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	60fb      	str	r3, [r7, #12]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <prvDeleteTCB+0x5e>
	}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <prvResetNextTaskUnblockTime+0x38>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <prvResetNextTaskUnblockTime+0x3c>)
 800396a:	f04f 32ff 	mov.w	r2, #4294967295
 800396e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003970:	e008      	b.n	8003984 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <prvResetNextTaskUnblockTime+0x38>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4a04      	ldr	r2, [pc, #16]	; (8003994 <prvResetNextTaskUnblockTime+0x3c>)
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	2000048c 	.word	0x2000048c
 8003994:	200004f4 	.word	0x200004f4

08003998 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039a2:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <prvAddCurrentTaskToDelayedList+0xb0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fae1 	bl	8002f76 <uxListRemove>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	2201      	movs	r2, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43da      	mvns	r2, r3
 80039c8:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4013      	ands	r3, r2
 80039ce:	4a20      	ldr	r2, [pc, #128]	; (8003a50 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d10a      	bne.n	80039f0 <prvAddCurrentTaskToDelayedList+0x58>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3304      	adds	r3, #4
 80039e6:	4619      	mov	r1, r3
 80039e8:	481a      	ldr	r0, [pc, #104]	; (8003a54 <prvAddCurrentTaskToDelayedList+0xbc>)
 80039ea:	f7ff fa67 	bl	8002ebc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039ee:	e026      	b.n	8003a3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d209      	bcs.n	8003a1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f7ff fa75 	bl	8002f04 <vListInsert>
}
 8003a1a:	e010      	b.n	8003a3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3304      	adds	r3, #4
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f7ff fa6b 	bl	8002f04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d202      	bcs.n	8003a3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	6013      	str	r3, [r2, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200004d8 	.word	0x200004d8
 8003a4c:	200003d4 	.word	0x200003d4
 8003a50:	200004dc 	.word	0x200004dc
 8003a54:	200004c0 	.word	0x200004c0
 8003a58:	20000490 	.word	0x20000490
 8003a5c:	2000048c 	.word	0x2000048c
 8003a60:	200004f4 	.word	0x200004f4

08003a64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3b04      	subs	r3, #4
 8003a74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3b04      	subs	r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f023 0201 	bic.w	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3b04      	subs	r3, #4
 8003a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <pxPortInitialiseStack+0x64>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3b14      	subs	r3, #20
 8003a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3b04      	subs	r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f06f 0202 	mvn.w	r2, #2
 8003ab2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3b20      	subs	r3, #32
 8003ab8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003aba:	68fb      	ldr	r3, [r7, #12]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	08003acd 	.word	0x08003acd

08003acc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <prvTaskExitError+0x54>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d00a      	beq.n	8003af6 <prvTaskExitError+0x2a>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	60fb      	str	r3, [r7, #12]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <prvTaskExitError+0x28>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	60bb      	str	r3, [r7, #8]
}
 8003b08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b0a:	bf00      	nop
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0fc      	beq.n	8003b0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b12:	bf00      	nop
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	2000000c 	.word	0x2000000c
	...

08003b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b30:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <pxCurrentTCBConst2>)
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	6808      	ldr	r0, [r1, #0]
 8003b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3a:	f380 8809 	msr	PSP, r0
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f380 8811 	msr	BASEPRI, r0
 8003b4a:	4770      	bx	lr
 8003b4c:	f3af 8000 	nop.w

08003b50 <pxCurrentTCBConst2>:
 8003b50:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop

08003b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b58:	4808      	ldr	r0, [pc, #32]	; (8003b7c <prvPortStartFirstTask+0x24>)
 8003b5a:	6800      	ldr	r0, [r0, #0]
 8003b5c:	6800      	ldr	r0, [r0, #0]
 8003b5e:	f380 8808 	msr	MSP, r0
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f380 8814 	msr	CONTROL, r0
 8003b6a:	b662      	cpsie	i
 8003b6c:	b661      	cpsie	f
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	df00      	svc	0
 8003b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b7a:	bf00      	nop
 8003b7c:	e000ed08 	.word	0xe000ed08

08003b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b86:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <xPortStartScheduler+0x120>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a46      	ldr	r2, [pc, #280]	; (8003ca4 <xPortStartScheduler+0x124>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d10a      	bne.n	8003ba6 <xPortStartScheduler+0x26>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	613b      	str	r3, [r7, #16]
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ba6:	4b3e      	ldr	r3, [pc, #248]	; (8003ca0 <xPortStartScheduler+0x120>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a3f      	ldr	r2, [pc, #252]	; (8003ca8 <xPortStartScheduler+0x128>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10a      	bne.n	8003bc6 <xPortStartScheduler+0x46>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60fb      	str	r3, [r7, #12]
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bc6:	4b39      	ldr	r3, [pc, #228]	; (8003cac <xPortStartScheduler+0x12c>)
 8003bc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	22ff      	movs	r2, #255	; 0xff
 8003bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <xPortStartScheduler+0x130>)
 8003bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <xPortStartScheduler+0x134>)
 8003bf0:	2207      	movs	r2, #7
 8003bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bf4:	e009      	b.n	8003c0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003bf6:	4b2f      	ldr	r3, [pc, #188]	; (8003cb4 <xPortStartScheduler+0x134>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <xPortStartScheduler+0x134>)
 8003bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d0ef      	beq.n	8003bf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c16:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <xPortStartScheduler+0x134>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1c3 0307 	rsb	r3, r3, #7
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d00a      	beq.n	8003c38 <xPortStartScheduler+0xb8>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	60bb      	str	r3, [r7, #8]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <xPortStartScheduler+0x134>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <xPortStartScheduler+0x134>)
 8003c40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c42:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <xPortStartScheduler+0x134>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c4a:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <xPortStartScheduler+0x134>)
 8003c4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <xPortStartScheduler+0x138>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <xPortStartScheduler+0x138>)
 8003c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <xPortStartScheduler+0x138>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <xPortStartScheduler+0x138>)
 8003c68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c6e:	f000 f8dd 	bl	8003e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <xPortStartScheduler+0x13c>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c78:	f000 f8fc 	bl	8003e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <xPortStartScheduler+0x140>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0f      	ldr	r2, [pc, #60]	; (8003cc0 <xPortStartScheduler+0x140>)
 8003c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c88:	f7ff ff66 	bl	8003b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c8c:	f7ff fd48 	bl	8003720 <vTaskSwitchContext>
	prvTaskExitError();
 8003c90:	f7ff ff1c 	bl	8003acc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	e000ed00 	.word	0xe000ed00
 8003ca4:	410fc271 	.word	0x410fc271
 8003ca8:	410fc270 	.word	0x410fc270
 8003cac:	e000e400 	.word	0xe000e400
 8003cb0:	20000500 	.word	0x20000500
 8003cb4:	20000504 	.word	0x20000504
 8003cb8:	e000ed20 	.word	0xe000ed20
 8003cbc:	2000000c 	.word	0x2000000c
 8003cc0:	e000ef34 	.word	0xe000ef34

08003cc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	607b      	str	r3, [r7, #4]
}
 8003cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003cde:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <vPortEnterCritical+0x58>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <vPortEnterCritical+0x58>)
 8003ce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <vPortEnterCritical+0x58>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d10f      	bne.n	8003d10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <vPortEnterCritical+0x5c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <vPortEnterCritical+0x4c>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	603b      	str	r3, [r7, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <vPortEnterCritical+0x4a>
	}
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	2000000c 	.word	0x2000000c
 8003d20:	e000ed04 	.word	0xe000ed04

08003d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <vPortExitCritical+0x50>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <vPortExitCritical+0x24>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	607b      	str	r3, [r7, #4]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <vPortExitCritical+0x50>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <vPortExitCritical+0x50>)
 8003d50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <vPortExitCritical+0x50>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d105      	bne.n	8003d66 <vPortExitCritical+0x42>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	2000000c 	.word	0x2000000c
	...

08003d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d80:	f3ef 8009 	mrs	r0, PSP
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <pxCurrentTCBConst>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f01e 0f10 	tst.w	lr, #16
 8003d90:	bf08      	it	eq
 8003d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	6010      	str	r0, [r2, #0]
 8003d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003da4:	f380 8811 	msr	BASEPRI, r0
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f7ff fcb6 	bl	8003720 <vTaskSwitchContext>
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f380 8811 	msr	BASEPRI, r0
 8003dbc:	bc09      	pop	{r0, r3}
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	6808      	ldr	r0, [r1, #0]
 8003dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc6:	f01e 0f10 	tst.w	lr, #16
 8003dca:	bf08      	it	eq
 8003dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003dd0:	f380 8809 	msr	PSP, r0
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst>:
 8003de0:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
}
 8003e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e02:	f7ff fbd5 	bl	80035b0 <xTaskIncrementTick>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <SysTick_Handler+0x40>)
 8003e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	2300      	movs	r3, #0
 8003e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	f383 8811 	msr	BASEPRI, r3
}
 8003e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	e000ed04 	.word	0xe000ed04

08003e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <vPortSetupTimerInterrupt+0x34>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <vPortSetupTimerInterrupt+0x38>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <vPortSetupTimerInterrupt+0x3c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <vPortSetupTimerInterrupt+0x40>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <vPortSetupTimerInterrupt+0x44>)
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <vPortSetupTimerInterrupt+0x34>)
 8003e50:	2207      	movs	r2, #7
 8003e52:	601a      	str	r2, [r3, #0]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000e010 	.word	0xe000e010
 8003e64:	e000e018 	.word	0xe000e018
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	10624dd3 	.word	0x10624dd3
 8003e70:	e000e014 	.word	0xe000e014

08003e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e84 <vPortEnableVFP+0x10>
 8003e78:	6801      	ldr	r1, [r0, #0]
 8003e7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e7e:	6001      	str	r1, [r0, #0]
 8003e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e82:	bf00      	nop
 8003e84:	e000ed88 	.word	0xe000ed88

08003e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e94:	f7ff fae2 	bl	800345c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e98:	4b5b      	ldr	r3, [pc, #364]	; (8004008 <pvPortMalloc+0x180>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ea0:	f000 f920 	bl	80040e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <pvPortMalloc+0x184>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 8093 	bne.w	8003fd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01d      	beq.n	8003ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003eb8:	2208      	movs	r2, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d014      	beq.n	8003ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f023 0307 	bic.w	r3, r3, #7
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	617b      	str	r3, [r7, #20]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d06e      	beq.n	8003fd8 <pvPortMalloc+0x150>
 8003efa:	4b45      	ldr	r3, [pc, #276]	; (8004010 <pvPortMalloc+0x188>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d869      	bhi.n	8003fd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f04:	4b43      	ldr	r3, [pc, #268]	; (8004014 <pvPortMalloc+0x18c>)
 8003f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <pvPortMalloc+0x18c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f0e:	e004      	b.n	8003f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d903      	bls.n	8003f2c <pvPortMalloc+0xa4>
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f1      	bne.n	8003f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f2c:	4b36      	ldr	r3, [pc, #216]	; (8004008 <pvPortMalloc+0x180>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d050      	beq.n	8003fd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	4413      	add	r3, r2
 8003f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	2308      	movs	r3, #8
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d91f      	bls.n	8003f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <pvPortMalloc+0xf8>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	613b      	str	r3, [r7, #16]
}
 8003f7c:	bf00      	nop
 8003f7e:	e7fe      	b.n	8003f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f92:	69b8      	ldr	r0, [r7, #24]
 8003f94:	f000 f908 	bl	80041a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <pvPortMalloc+0x188>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	4a1b      	ldr	r2, [pc, #108]	; (8004010 <pvPortMalloc+0x188>)
 8003fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <pvPortMalloc+0x188>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <pvPortMalloc+0x190>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d203      	bcs.n	8003fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fb2:	4b17      	ldr	r3, [pc, #92]	; (8004010 <pvPortMalloc+0x188>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a18      	ldr	r2, [pc, #96]	; (8004018 <pvPortMalloc+0x190>)
 8003fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <pvPortMalloc+0x184>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <pvPortMalloc+0x194>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	4a11      	ldr	r2, [pc, #68]	; (800401c <pvPortMalloc+0x194>)
 8003fd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fd8:	f7ff fa4e 	bl	8003478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <pvPortMalloc+0x174>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	60fb      	str	r3, [r7, #12]
}
 8003ff8:	bf00      	nop
 8003ffa:	e7fe      	b.n	8003ffa <pvPortMalloc+0x172>
	return pvReturn;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3728      	adds	r7, #40	; 0x28
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20004110 	.word	0x20004110
 800400c:	20004124 	.word	0x20004124
 8004010:	20004114 	.word	0x20004114
 8004014:	20004108 	.word	0x20004108
 8004018:	20004118 	.word	0x20004118
 800401c:	2000411c 	.word	0x2000411c

08004020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d04d      	beq.n	80040ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004032:	2308      	movs	r3, #8
 8004034:	425b      	negs	r3, r3
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4413      	add	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <vPortFree+0xb8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <vPortFree+0x44>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	60fb      	str	r3, [r7, #12]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <vPortFree+0x62>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60bb      	str	r3, [r7, #8]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <vPortFree+0xb8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01e      	beq.n	80040ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11a      	bne.n	80040ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <vPortFree+0xb8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	401a      	ands	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040a8:	f7ff f9d8 	bl	800345c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <vPortFree+0xbc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4413      	add	r3, r2
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <vPortFree+0xbc>)
 80040b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ba:	6938      	ldr	r0, [r7, #16]
 80040bc:	f000 f874 	bl	80041a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <vPortFree+0xc0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	4a06      	ldr	r2, [pc, #24]	; (80040e0 <vPortFree+0xc0>)
 80040c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040ca:	f7ff f9d5 	bl	8003478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20004124 	.word	0x20004124
 80040dc:	20004114 	.word	0x20004114
 80040e0:	20004120 	.word	0x20004120

080040e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80040ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040f0:	4b27      	ldr	r3, [pc, #156]	; (8004190 <prvHeapInit+0xac>)
 80040f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3307      	adds	r3, #7
 8004102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0307 	bic.w	r3, r3, #7
 800410a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <prvHeapInit+0xac>)
 8004114:	4413      	add	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <prvHeapInit+0xb0>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <prvHeapInit+0xb0>)
 8004124:	2200      	movs	r2, #0
 8004126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	4413      	add	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004130:	2208      	movs	r2, #8
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0307 	bic.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a15      	ldr	r2, [pc, #84]	; (8004198 <prvHeapInit+0xb4>)
 8004144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <prvHeapInit+0xb4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <prvHeapInit+0xb4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <prvHeapInit+0xb4>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <prvHeapInit+0xb8>)
 8004172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <prvHeapInit+0xbc>)
 800417a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <prvHeapInit+0xc0>)
 800417e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004182:	601a      	str	r2, [r3, #0]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	20000508 	.word	0x20000508
 8004194:	20004108 	.word	0x20004108
 8004198:	20004110 	.word	0x20004110
 800419c:	20004118 	.word	0x20004118
 80041a0:	20004114 	.word	0x20004114
 80041a4:	20004124 	.word	0x20004124

080041a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041b0:	4b28      	ldr	r3, [pc, #160]	; (8004254 <prvInsertBlockIntoFreeList+0xac>)
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e002      	b.n	80041bc <prvInsertBlockIntoFreeList+0x14>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d8f7      	bhi.n	80041b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4413      	add	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d108      	bne.n	80041ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	441a      	add	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	441a      	add	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d118      	bne.n	8004230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <prvInsertBlockIntoFreeList+0xb0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d00d      	beq.n	8004226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	441a      	add	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e008      	b.n	8004238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <prvInsertBlockIntoFreeList+0xb0>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e003      	b.n	8004238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d002      	beq.n	8004246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20004108 	.word	0x20004108
 8004258:	20004110 	.word	0x20004110

0800425c <std>:
 800425c:	2300      	movs	r3, #0
 800425e:	b510      	push	{r4, lr}
 8004260:	4604      	mov	r4, r0
 8004262:	e9c0 3300 	strd	r3, r3, [r0]
 8004266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800426a:	6083      	str	r3, [r0, #8]
 800426c:	8181      	strh	r1, [r0, #12]
 800426e:	6643      	str	r3, [r0, #100]	; 0x64
 8004270:	81c2      	strh	r2, [r0, #14]
 8004272:	6183      	str	r3, [r0, #24]
 8004274:	4619      	mov	r1, r3
 8004276:	2208      	movs	r2, #8
 8004278:	305c      	adds	r0, #92	; 0x5c
 800427a:	f000 fac5 	bl	8004808 <memset>
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <std+0x58>)
 8004280:	6263      	str	r3, [r4, #36]	; 0x24
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <std+0x5c>)
 8004284:	62a3      	str	r3, [r4, #40]	; 0x28
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <std+0x60>)
 8004288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <std+0x64>)
 800428c:	6323      	str	r3, [r4, #48]	; 0x30
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <std+0x68>)
 8004290:	6224      	str	r4, [r4, #32]
 8004292:	429c      	cmp	r4, r3
 8004294:	d006      	beq.n	80042a4 <std+0x48>
 8004296:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800429a:	4294      	cmp	r4, r2
 800429c:	d002      	beq.n	80042a4 <std+0x48>
 800429e:	33d0      	adds	r3, #208	; 0xd0
 80042a0:	429c      	cmp	r4, r3
 80042a2:	d105      	bne.n	80042b0 <std+0x54>
 80042a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ac:	f000 bb7a 	b.w	80049a4 <__retarget_lock_init_recursive>
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	bf00      	nop
 80042b4:	08004659 	.word	0x08004659
 80042b8:	0800467b 	.word	0x0800467b
 80042bc:	080046b3 	.word	0x080046b3
 80042c0:	080046d7 	.word	0x080046d7
 80042c4:	20004128 	.word	0x20004128

080042c8 <stdio_exit_handler>:
 80042c8:	4a02      	ldr	r2, [pc, #8]	; (80042d4 <stdio_exit_handler+0xc>)
 80042ca:	4903      	ldr	r1, [pc, #12]	; (80042d8 <stdio_exit_handler+0x10>)
 80042cc:	4803      	ldr	r0, [pc, #12]	; (80042dc <stdio_exit_handler+0x14>)
 80042ce:	f000 b869 	b.w	80043a4 <_fwalk_sglue>
 80042d2:	bf00      	nop
 80042d4:	20000010 	.word	0x20000010
 80042d8:	0800552d 	.word	0x0800552d
 80042dc:	2000001c 	.word	0x2000001c

080042e0 <cleanup_stdio>:
 80042e0:	6841      	ldr	r1, [r0, #4]
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <cleanup_stdio+0x34>)
 80042e4:	4299      	cmp	r1, r3
 80042e6:	b510      	push	{r4, lr}
 80042e8:	4604      	mov	r4, r0
 80042ea:	d001      	beq.n	80042f0 <cleanup_stdio+0x10>
 80042ec:	f001 f91e 	bl	800552c <_fflush_r>
 80042f0:	68a1      	ldr	r1, [r4, #8]
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <cleanup_stdio+0x38>)
 80042f4:	4299      	cmp	r1, r3
 80042f6:	d002      	beq.n	80042fe <cleanup_stdio+0x1e>
 80042f8:	4620      	mov	r0, r4
 80042fa:	f001 f917 	bl	800552c <_fflush_r>
 80042fe:	68e1      	ldr	r1, [r4, #12]
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <cleanup_stdio+0x3c>)
 8004302:	4299      	cmp	r1, r3
 8004304:	d004      	beq.n	8004310 <cleanup_stdio+0x30>
 8004306:	4620      	mov	r0, r4
 8004308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800430c:	f001 b90e 	b.w	800552c <_fflush_r>
 8004310:	bd10      	pop	{r4, pc}
 8004312:	bf00      	nop
 8004314:	20004128 	.word	0x20004128
 8004318:	20004190 	.word	0x20004190
 800431c:	200041f8 	.word	0x200041f8

08004320 <global_stdio_init.part.0>:
 8004320:	b510      	push	{r4, lr}
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <global_stdio_init.part.0+0x30>)
 8004324:	4c0b      	ldr	r4, [pc, #44]	; (8004354 <global_stdio_init.part.0+0x34>)
 8004326:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <global_stdio_init.part.0+0x38>)
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	4620      	mov	r0, r4
 800432c:	2200      	movs	r2, #0
 800432e:	2104      	movs	r1, #4
 8004330:	f7ff ff94 	bl	800425c <std>
 8004334:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004338:	2201      	movs	r2, #1
 800433a:	2109      	movs	r1, #9
 800433c:	f7ff ff8e 	bl	800425c <std>
 8004340:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004344:	2202      	movs	r2, #2
 8004346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434a:	2112      	movs	r1, #18
 800434c:	f7ff bf86 	b.w	800425c <std>
 8004350:	20004260 	.word	0x20004260
 8004354:	20004128 	.word	0x20004128
 8004358:	080042c9 	.word	0x080042c9

0800435c <__sfp_lock_acquire>:
 800435c:	4801      	ldr	r0, [pc, #4]	; (8004364 <__sfp_lock_acquire+0x8>)
 800435e:	f000 bb22 	b.w	80049a6 <__retarget_lock_acquire_recursive>
 8004362:	bf00      	nop
 8004364:	20004269 	.word	0x20004269

08004368 <__sfp_lock_release>:
 8004368:	4801      	ldr	r0, [pc, #4]	; (8004370 <__sfp_lock_release+0x8>)
 800436a:	f000 bb1d 	b.w	80049a8 <__retarget_lock_release_recursive>
 800436e:	bf00      	nop
 8004370:	20004269 	.word	0x20004269

08004374 <__sinit>:
 8004374:	b510      	push	{r4, lr}
 8004376:	4604      	mov	r4, r0
 8004378:	f7ff fff0 	bl	800435c <__sfp_lock_acquire>
 800437c:	6a23      	ldr	r3, [r4, #32]
 800437e:	b11b      	cbz	r3, 8004388 <__sinit+0x14>
 8004380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004384:	f7ff bff0 	b.w	8004368 <__sfp_lock_release>
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <__sinit+0x28>)
 800438a:	6223      	str	r3, [r4, #32]
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <__sinit+0x2c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f5      	bne.n	8004380 <__sinit+0xc>
 8004394:	f7ff ffc4 	bl	8004320 <global_stdio_init.part.0>
 8004398:	e7f2      	b.n	8004380 <__sinit+0xc>
 800439a:	bf00      	nop
 800439c:	080042e1 	.word	0x080042e1
 80043a0:	20004260 	.word	0x20004260

080043a4 <_fwalk_sglue>:
 80043a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043a8:	4607      	mov	r7, r0
 80043aa:	4688      	mov	r8, r1
 80043ac:	4614      	mov	r4, r2
 80043ae:	2600      	movs	r6, #0
 80043b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043b4:	f1b9 0901 	subs.w	r9, r9, #1
 80043b8:	d505      	bpl.n	80043c6 <_fwalk_sglue+0x22>
 80043ba:	6824      	ldr	r4, [r4, #0]
 80043bc:	2c00      	cmp	r4, #0
 80043be:	d1f7      	bne.n	80043b0 <_fwalk_sglue+0xc>
 80043c0:	4630      	mov	r0, r6
 80043c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c6:	89ab      	ldrh	r3, [r5, #12]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d907      	bls.n	80043dc <_fwalk_sglue+0x38>
 80043cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043d0:	3301      	adds	r3, #1
 80043d2:	d003      	beq.n	80043dc <_fwalk_sglue+0x38>
 80043d4:	4629      	mov	r1, r5
 80043d6:	4638      	mov	r0, r7
 80043d8:	47c0      	blx	r8
 80043da:	4306      	orrs	r6, r0
 80043dc:	3568      	adds	r5, #104	; 0x68
 80043de:	e7e9      	b.n	80043b4 <_fwalk_sglue+0x10>

080043e0 <iprintf>:
 80043e0:	b40f      	push	{r0, r1, r2, r3}
 80043e2:	b507      	push	{r0, r1, r2, lr}
 80043e4:	4906      	ldr	r1, [pc, #24]	; (8004400 <iprintf+0x20>)
 80043e6:	ab04      	add	r3, sp, #16
 80043e8:	6808      	ldr	r0, [r1, #0]
 80043ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ee:	6881      	ldr	r1, [r0, #8]
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	f000 fd6b 	bl	8004ecc <_vfiprintf_r>
 80043f6:	b003      	add	sp, #12
 80043f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043fc:	b004      	add	sp, #16
 80043fe:	4770      	bx	lr
 8004400:	20000068 	.word	0x20000068

08004404 <_puts_r>:
 8004404:	6a03      	ldr	r3, [r0, #32]
 8004406:	b570      	push	{r4, r5, r6, lr}
 8004408:	6884      	ldr	r4, [r0, #8]
 800440a:	4605      	mov	r5, r0
 800440c:	460e      	mov	r6, r1
 800440e:	b90b      	cbnz	r3, 8004414 <_puts_r+0x10>
 8004410:	f7ff ffb0 	bl	8004374 <__sinit>
 8004414:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004416:	07db      	lsls	r3, r3, #31
 8004418:	d405      	bmi.n	8004426 <_puts_r+0x22>
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	0598      	lsls	r0, r3, #22
 800441e:	d402      	bmi.n	8004426 <_puts_r+0x22>
 8004420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004422:	f000 fac0 	bl	80049a6 <__retarget_lock_acquire_recursive>
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	0719      	lsls	r1, r3, #28
 800442a:	d513      	bpl.n	8004454 <_puts_r+0x50>
 800442c:	6923      	ldr	r3, [r4, #16]
 800442e:	b18b      	cbz	r3, 8004454 <_puts_r+0x50>
 8004430:	3e01      	subs	r6, #1
 8004432:	68a3      	ldr	r3, [r4, #8]
 8004434:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004438:	3b01      	subs	r3, #1
 800443a:	60a3      	str	r3, [r4, #8]
 800443c:	b9e9      	cbnz	r1, 800447a <_puts_r+0x76>
 800443e:	2b00      	cmp	r3, #0
 8004440:	da2e      	bge.n	80044a0 <_puts_r+0x9c>
 8004442:	4622      	mov	r2, r4
 8004444:	210a      	movs	r1, #10
 8004446:	4628      	mov	r0, r5
 8004448:	f000 f949 	bl	80046de <__swbuf_r>
 800444c:	3001      	adds	r0, #1
 800444e:	d007      	beq.n	8004460 <_puts_r+0x5c>
 8004450:	250a      	movs	r5, #10
 8004452:	e007      	b.n	8004464 <_puts_r+0x60>
 8004454:	4621      	mov	r1, r4
 8004456:	4628      	mov	r0, r5
 8004458:	f000 f97e 	bl	8004758 <__swsetup_r>
 800445c:	2800      	cmp	r0, #0
 800445e:	d0e7      	beq.n	8004430 <_puts_r+0x2c>
 8004460:	f04f 35ff 	mov.w	r5, #4294967295
 8004464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004466:	07da      	lsls	r2, r3, #31
 8004468:	d405      	bmi.n	8004476 <_puts_r+0x72>
 800446a:	89a3      	ldrh	r3, [r4, #12]
 800446c:	059b      	lsls	r3, r3, #22
 800446e:	d402      	bmi.n	8004476 <_puts_r+0x72>
 8004470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004472:	f000 fa99 	bl	80049a8 <__retarget_lock_release_recursive>
 8004476:	4628      	mov	r0, r5
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	2b00      	cmp	r3, #0
 800447c:	da04      	bge.n	8004488 <_puts_r+0x84>
 800447e:	69a2      	ldr	r2, [r4, #24]
 8004480:	429a      	cmp	r2, r3
 8004482:	dc06      	bgt.n	8004492 <_puts_r+0x8e>
 8004484:	290a      	cmp	r1, #10
 8004486:	d004      	beq.n	8004492 <_puts_r+0x8e>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	7019      	strb	r1, [r3, #0]
 8004490:	e7cf      	b.n	8004432 <_puts_r+0x2e>
 8004492:	4622      	mov	r2, r4
 8004494:	4628      	mov	r0, r5
 8004496:	f000 f922 	bl	80046de <__swbuf_r>
 800449a:	3001      	adds	r0, #1
 800449c:	d1c9      	bne.n	8004432 <_puts_r+0x2e>
 800449e:	e7df      	b.n	8004460 <_puts_r+0x5c>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	250a      	movs	r5, #10
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	6022      	str	r2, [r4, #0]
 80044a8:	701d      	strb	r5, [r3, #0]
 80044aa:	e7db      	b.n	8004464 <_puts_r+0x60>

080044ac <puts>:
 80044ac:	4b02      	ldr	r3, [pc, #8]	; (80044b8 <puts+0xc>)
 80044ae:	4601      	mov	r1, r0
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	f7ff bfa7 	b.w	8004404 <_puts_r>
 80044b6:	bf00      	nop
 80044b8:	20000068 	.word	0x20000068

080044bc <setvbuf>:
 80044bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80044c0:	461d      	mov	r5, r3
 80044c2:	4b54      	ldr	r3, [pc, #336]	; (8004614 <setvbuf+0x158>)
 80044c4:	681f      	ldr	r7, [r3, #0]
 80044c6:	4604      	mov	r4, r0
 80044c8:	460e      	mov	r6, r1
 80044ca:	4690      	mov	r8, r2
 80044cc:	b127      	cbz	r7, 80044d8 <setvbuf+0x1c>
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	b913      	cbnz	r3, 80044d8 <setvbuf+0x1c>
 80044d2:	4638      	mov	r0, r7
 80044d4:	f7ff ff4e 	bl	8004374 <__sinit>
 80044d8:	f1b8 0f02 	cmp.w	r8, #2
 80044dc:	d006      	beq.n	80044ec <setvbuf+0x30>
 80044de:	f1b8 0f01 	cmp.w	r8, #1
 80044e2:	f200 8094 	bhi.w	800460e <setvbuf+0x152>
 80044e6:	2d00      	cmp	r5, #0
 80044e8:	f2c0 8091 	blt.w	800460e <setvbuf+0x152>
 80044ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044ee:	07da      	lsls	r2, r3, #31
 80044f0:	d405      	bmi.n	80044fe <setvbuf+0x42>
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	059b      	lsls	r3, r3, #22
 80044f6:	d402      	bmi.n	80044fe <setvbuf+0x42>
 80044f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044fa:	f000 fa54 	bl	80049a6 <__retarget_lock_acquire_recursive>
 80044fe:	4621      	mov	r1, r4
 8004500:	4638      	mov	r0, r7
 8004502:	f001 f813 	bl	800552c <_fflush_r>
 8004506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004508:	b141      	cbz	r1, 800451c <setvbuf+0x60>
 800450a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800450e:	4299      	cmp	r1, r3
 8004510:	d002      	beq.n	8004518 <setvbuf+0x5c>
 8004512:	4638      	mov	r0, r7
 8004514:	f000 fa58 	bl	80049c8 <_free_r>
 8004518:	2300      	movs	r3, #0
 800451a:	6363      	str	r3, [r4, #52]	; 0x34
 800451c:	2300      	movs	r3, #0
 800451e:	61a3      	str	r3, [r4, #24]
 8004520:	6063      	str	r3, [r4, #4]
 8004522:	89a3      	ldrh	r3, [r4, #12]
 8004524:	0618      	lsls	r0, r3, #24
 8004526:	d503      	bpl.n	8004530 <setvbuf+0x74>
 8004528:	6921      	ldr	r1, [r4, #16]
 800452a:	4638      	mov	r0, r7
 800452c:	f000 fa4c 	bl	80049c8 <_free_r>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	f1b8 0f02 	cmp.w	r8, #2
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	d05f      	beq.n	8004602 <setvbuf+0x146>
 8004542:	ab01      	add	r3, sp, #4
 8004544:	466a      	mov	r2, sp
 8004546:	4621      	mov	r1, r4
 8004548:	4638      	mov	r0, r7
 800454a:	f001 f817 	bl	800557c <__swhatbuf_r>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	4318      	orrs	r0, r3
 8004552:	81a0      	strh	r0, [r4, #12]
 8004554:	bb2d      	cbnz	r5, 80045a2 <setvbuf+0xe6>
 8004556:	9d00      	ldr	r5, [sp, #0]
 8004558:	4628      	mov	r0, r5
 800455a:	f000 fa81 	bl	8004a60 <malloc>
 800455e:	4606      	mov	r6, r0
 8004560:	2800      	cmp	r0, #0
 8004562:	d150      	bne.n	8004606 <setvbuf+0x14a>
 8004564:	f8dd 9000 	ldr.w	r9, [sp]
 8004568:	45a9      	cmp	r9, r5
 800456a:	d13e      	bne.n	80045ea <setvbuf+0x12e>
 800456c:	f04f 35ff 	mov.w	r5, #4294967295
 8004570:	2200      	movs	r2, #0
 8004572:	60a2      	str	r2, [r4, #8]
 8004574:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004578:	6022      	str	r2, [r4, #0]
 800457a:	6122      	str	r2, [r4, #16]
 800457c:	2201      	movs	r2, #1
 800457e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004582:	6162      	str	r2, [r4, #20]
 8004584:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004586:	f043 0302 	orr.w	r3, r3, #2
 800458a:	07d1      	lsls	r1, r2, #31
 800458c:	81a3      	strh	r3, [r4, #12]
 800458e:	d404      	bmi.n	800459a <setvbuf+0xde>
 8004590:	059b      	lsls	r3, r3, #22
 8004592:	d402      	bmi.n	800459a <setvbuf+0xde>
 8004594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004596:	f000 fa07 	bl	80049a8 <__retarget_lock_release_recursive>
 800459a:	4628      	mov	r0, r5
 800459c:	b003      	add	sp, #12
 800459e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045a2:	2e00      	cmp	r6, #0
 80045a4:	d0d8      	beq.n	8004558 <setvbuf+0x9c>
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	b913      	cbnz	r3, 80045b0 <setvbuf+0xf4>
 80045aa:	4638      	mov	r0, r7
 80045ac:	f7ff fee2 	bl	8004374 <__sinit>
 80045b0:	f1b8 0f01 	cmp.w	r8, #1
 80045b4:	bf08      	it	eq
 80045b6:	89a3      	ldrheq	r3, [r4, #12]
 80045b8:	6026      	str	r6, [r4, #0]
 80045ba:	bf04      	itt	eq
 80045bc:	f043 0301 	orreq.w	r3, r3, #1
 80045c0:	81a3      	strheq	r3, [r4, #12]
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f013 0208 	ands.w	r2, r3, #8
 80045c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80045cc:	d01d      	beq.n	800460a <setvbuf+0x14e>
 80045ce:	07da      	lsls	r2, r3, #31
 80045d0:	bf41      	itttt	mi
 80045d2:	2200      	movmi	r2, #0
 80045d4:	426d      	negmi	r5, r5
 80045d6:	60a2      	strmi	r2, [r4, #8]
 80045d8:	61a5      	strmi	r5, [r4, #24]
 80045da:	bf58      	it	pl
 80045dc:	60a5      	strpl	r5, [r4, #8]
 80045de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80045e0:	f015 0501 	ands.w	r5, r5, #1
 80045e4:	d0d4      	beq.n	8004590 <setvbuf+0xd4>
 80045e6:	2500      	movs	r5, #0
 80045e8:	e7d7      	b.n	800459a <setvbuf+0xde>
 80045ea:	4648      	mov	r0, r9
 80045ec:	f000 fa38 	bl	8004a60 <malloc>
 80045f0:	4606      	mov	r6, r0
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d0ba      	beq.n	800456c <setvbuf+0xb0>
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	464d      	mov	r5, r9
 8004600:	e7d1      	b.n	80045a6 <setvbuf+0xea>
 8004602:	2500      	movs	r5, #0
 8004604:	e7b4      	b.n	8004570 <setvbuf+0xb4>
 8004606:	46a9      	mov	r9, r5
 8004608:	e7f5      	b.n	80045f6 <setvbuf+0x13a>
 800460a:	60a2      	str	r2, [r4, #8]
 800460c:	e7e7      	b.n	80045de <setvbuf+0x122>
 800460e:	f04f 35ff 	mov.w	r5, #4294967295
 8004612:	e7c2      	b.n	800459a <setvbuf+0xde>
 8004614:	20000068 	.word	0x20000068

08004618 <siprintf>:
 8004618:	b40e      	push	{r1, r2, r3}
 800461a:	b500      	push	{lr}
 800461c:	b09c      	sub	sp, #112	; 0x70
 800461e:	ab1d      	add	r3, sp, #116	; 0x74
 8004620:	9002      	str	r0, [sp, #8]
 8004622:	9006      	str	r0, [sp, #24]
 8004624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004628:	4809      	ldr	r0, [pc, #36]	; (8004650 <siprintf+0x38>)
 800462a:	9107      	str	r1, [sp, #28]
 800462c:	9104      	str	r1, [sp, #16]
 800462e:	4909      	ldr	r1, [pc, #36]	; (8004654 <siprintf+0x3c>)
 8004630:	f853 2b04 	ldr.w	r2, [r3], #4
 8004634:	9105      	str	r1, [sp, #20]
 8004636:	6800      	ldr	r0, [r0, #0]
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	a902      	add	r1, sp, #8
 800463c:	f000 fb1e 	bl	8004c7c <_svfiprintf_r>
 8004640:	9b02      	ldr	r3, [sp, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	b01c      	add	sp, #112	; 0x70
 8004648:	f85d eb04 	ldr.w	lr, [sp], #4
 800464c:	b003      	add	sp, #12
 800464e:	4770      	bx	lr
 8004650:	20000068 	.word	0x20000068
 8004654:	ffff0208 	.word	0xffff0208

08004658 <__sread>:
 8004658:	b510      	push	{r4, lr}
 800465a:	460c      	mov	r4, r1
 800465c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004660:	f000 f952 	bl	8004908 <_read_r>
 8004664:	2800      	cmp	r0, #0
 8004666:	bfab      	itete	ge
 8004668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800466a:	89a3      	ldrhlt	r3, [r4, #12]
 800466c:	181b      	addge	r3, r3, r0
 800466e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004672:	bfac      	ite	ge
 8004674:	6563      	strge	r3, [r4, #84]	; 0x54
 8004676:	81a3      	strhlt	r3, [r4, #12]
 8004678:	bd10      	pop	{r4, pc}

0800467a <__swrite>:
 800467a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467e:	461f      	mov	r7, r3
 8004680:	898b      	ldrh	r3, [r1, #12]
 8004682:	05db      	lsls	r3, r3, #23
 8004684:	4605      	mov	r5, r0
 8004686:	460c      	mov	r4, r1
 8004688:	4616      	mov	r6, r2
 800468a:	d505      	bpl.n	8004698 <__swrite+0x1e>
 800468c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004690:	2302      	movs	r3, #2
 8004692:	2200      	movs	r2, #0
 8004694:	f000 f926 	bl	80048e4 <_lseek_r>
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800469e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	4632      	mov	r2, r6
 80046a6:	463b      	mov	r3, r7
 80046a8:	4628      	mov	r0, r5
 80046aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ae:	f000 b93d 	b.w	800492c <_write_r>

080046b2 <__sseek>:
 80046b2:	b510      	push	{r4, lr}
 80046b4:	460c      	mov	r4, r1
 80046b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ba:	f000 f913 	bl	80048e4 <_lseek_r>
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	bf15      	itete	ne
 80046c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80046c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046ce:	81a3      	strheq	r3, [r4, #12]
 80046d0:	bf18      	it	ne
 80046d2:	81a3      	strhne	r3, [r4, #12]
 80046d4:	bd10      	pop	{r4, pc}

080046d6 <__sclose>:
 80046d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046da:	f000 b89d 	b.w	8004818 <_close_r>

080046de <__swbuf_r>:
 80046de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e0:	460e      	mov	r6, r1
 80046e2:	4614      	mov	r4, r2
 80046e4:	4605      	mov	r5, r0
 80046e6:	b118      	cbz	r0, 80046f0 <__swbuf_r+0x12>
 80046e8:	6a03      	ldr	r3, [r0, #32]
 80046ea:	b90b      	cbnz	r3, 80046f0 <__swbuf_r+0x12>
 80046ec:	f7ff fe42 	bl	8004374 <__sinit>
 80046f0:	69a3      	ldr	r3, [r4, #24]
 80046f2:	60a3      	str	r3, [r4, #8]
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	071a      	lsls	r2, r3, #28
 80046f8:	d525      	bpl.n	8004746 <__swbuf_r+0x68>
 80046fa:	6923      	ldr	r3, [r4, #16]
 80046fc:	b31b      	cbz	r3, 8004746 <__swbuf_r+0x68>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	6922      	ldr	r2, [r4, #16]
 8004702:	1a98      	subs	r0, r3, r2
 8004704:	6963      	ldr	r3, [r4, #20]
 8004706:	b2f6      	uxtb	r6, r6
 8004708:	4283      	cmp	r3, r0
 800470a:	4637      	mov	r7, r6
 800470c:	dc04      	bgt.n	8004718 <__swbuf_r+0x3a>
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 ff0b 	bl	800552c <_fflush_r>
 8004716:	b9e0      	cbnz	r0, 8004752 <__swbuf_r+0x74>
 8004718:	68a3      	ldr	r3, [r4, #8]
 800471a:	3b01      	subs	r3, #1
 800471c:	60a3      	str	r3, [r4, #8]
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	6022      	str	r2, [r4, #0]
 8004724:	701e      	strb	r6, [r3, #0]
 8004726:	6962      	ldr	r2, [r4, #20]
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	429a      	cmp	r2, r3
 800472c:	d004      	beq.n	8004738 <__swbuf_r+0x5a>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	07db      	lsls	r3, r3, #31
 8004732:	d506      	bpl.n	8004742 <__swbuf_r+0x64>
 8004734:	2e0a      	cmp	r6, #10
 8004736:	d104      	bne.n	8004742 <__swbuf_r+0x64>
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f000 fef6 	bl	800552c <_fflush_r>
 8004740:	b938      	cbnz	r0, 8004752 <__swbuf_r+0x74>
 8004742:	4638      	mov	r0, r7
 8004744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004746:	4621      	mov	r1, r4
 8004748:	4628      	mov	r0, r5
 800474a:	f000 f805 	bl	8004758 <__swsetup_r>
 800474e:	2800      	cmp	r0, #0
 8004750:	d0d5      	beq.n	80046fe <__swbuf_r+0x20>
 8004752:	f04f 37ff 	mov.w	r7, #4294967295
 8004756:	e7f4      	b.n	8004742 <__swbuf_r+0x64>

08004758 <__swsetup_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <__swsetup_r+0xac>)
 800475c:	4605      	mov	r5, r0
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	460c      	mov	r4, r1
 8004762:	b118      	cbz	r0, 800476c <__swsetup_r+0x14>
 8004764:	6a03      	ldr	r3, [r0, #32]
 8004766:	b90b      	cbnz	r3, 800476c <__swsetup_r+0x14>
 8004768:	f7ff fe04 	bl	8004374 <__sinit>
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004772:	0718      	lsls	r0, r3, #28
 8004774:	d422      	bmi.n	80047bc <__swsetup_r+0x64>
 8004776:	06d9      	lsls	r1, r3, #27
 8004778:	d407      	bmi.n	800478a <__swsetup_r+0x32>
 800477a:	2309      	movs	r3, #9
 800477c:	602b      	str	r3, [r5, #0]
 800477e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e034      	b.n	80047f4 <__swsetup_r+0x9c>
 800478a:	0758      	lsls	r0, r3, #29
 800478c:	d512      	bpl.n	80047b4 <__swsetup_r+0x5c>
 800478e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004790:	b141      	cbz	r1, 80047a4 <__swsetup_r+0x4c>
 8004792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004796:	4299      	cmp	r1, r3
 8004798:	d002      	beq.n	80047a0 <__swsetup_r+0x48>
 800479a:	4628      	mov	r0, r5
 800479c:	f000 f914 	bl	80049c8 <_free_r>
 80047a0:	2300      	movs	r3, #0
 80047a2:	6363      	str	r3, [r4, #52]	; 0x34
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047aa:	81a3      	strh	r3, [r4, #12]
 80047ac:	2300      	movs	r3, #0
 80047ae:	6063      	str	r3, [r4, #4]
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	f043 0308 	orr.w	r3, r3, #8
 80047ba:	81a3      	strh	r3, [r4, #12]
 80047bc:	6923      	ldr	r3, [r4, #16]
 80047be:	b94b      	cbnz	r3, 80047d4 <__swsetup_r+0x7c>
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ca:	d003      	beq.n	80047d4 <__swsetup_r+0x7c>
 80047cc:	4621      	mov	r1, r4
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 fefa 	bl	80055c8 <__smakebuf_r>
 80047d4:	89a0      	ldrh	r0, [r4, #12]
 80047d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047da:	f010 0301 	ands.w	r3, r0, #1
 80047de:	d00a      	beq.n	80047f6 <__swsetup_r+0x9e>
 80047e0:	2300      	movs	r3, #0
 80047e2:	60a3      	str	r3, [r4, #8]
 80047e4:	6963      	ldr	r3, [r4, #20]
 80047e6:	425b      	negs	r3, r3
 80047e8:	61a3      	str	r3, [r4, #24]
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	b943      	cbnz	r3, 8004800 <__swsetup_r+0xa8>
 80047ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047f2:	d1c4      	bne.n	800477e <__swsetup_r+0x26>
 80047f4:	bd38      	pop	{r3, r4, r5, pc}
 80047f6:	0781      	lsls	r1, r0, #30
 80047f8:	bf58      	it	pl
 80047fa:	6963      	ldrpl	r3, [r4, #20]
 80047fc:	60a3      	str	r3, [r4, #8]
 80047fe:	e7f4      	b.n	80047ea <__swsetup_r+0x92>
 8004800:	2000      	movs	r0, #0
 8004802:	e7f7      	b.n	80047f4 <__swsetup_r+0x9c>
 8004804:	20000068 	.word	0x20000068

08004808 <memset>:
 8004808:	4402      	add	r2, r0
 800480a:	4603      	mov	r3, r0
 800480c:	4293      	cmp	r3, r2
 800480e:	d100      	bne.n	8004812 <memset+0xa>
 8004810:	4770      	bx	lr
 8004812:	f803 1b01 	strb.w	r1, [r3], #1
 8004816:	e7f9      	b.n	800480c <memset+0x4>

08004818 <_close_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	4d06      	ldr	r5, [pc, #24]	; (8004834 <_close_r+0x1c>)
 800481c:	2300      	movs	r3, #0
 800481e:	4604      	mov	r4, r0
 8004820:	4608      	mov	r0, r1
 8004822:	602b      	str	r3, [r5, #0]
 8004824:	f7fc fb0b 	bl	8000e3e <_close>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d102      	bne.n	8004832 <_close_r+0x1a>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	b103      	cbz	r3, 8004832 <_close_r+0x1a>
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	20004264 	.word	0x20004264

08004838 <_reclaim_reent>:
 8004838:	4b29      	ldr	r3, [pc, #164]	; (80048e0 <_reclaim_reent+0xa8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4283      	cmp	r3, r0
 800483e:	b570      	push	{r4, r5, r6, lr}
 8004840:	4604      	mov	r4, r0
 8004842:	d04b      	beq.n	80048dc <_reclaim_reent+0xa4>
 8004844:	69c3      	ldr	r3, [r0, #28]
 8004846:	b143      	cbz	r3, 800485a <_reclaim_reent+0x22>
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d144      	bne.n	80048d8 <_reclaim_reent+0xa0>
 800484e:	69e3      	ldr	r3, [r4, #28]
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	b111      	cbz	r1, 800485a <_reclaim_reent+0x22>
 8004854:	4620      	mov	r0, r4
 8004856:	f000 f8b7 	bl	80049c8 <_free_r>
 800485a:	6961      	ldr	r1, [r4, #20]
 800485c:	b111      	cbz	r1, 8004864 <_reclaim_reent+0x2c>
 800485e:	4620      	mov	r0, r4
 8004860:	f000 f8b2 	bl	80049c8 <_free_r>
 8004864:	69e1      	ldr	r1, [r4, #28]
 8004866:	b111      	cbz	r1, 800486e <_reclaim_reent+0x36>
 8004868:	4620      	mov	r0, r4
 800486a:	f000 f8ad 	bl	80049c8 <_free_r>
 800486e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004870:	b111      	cbz	r1, 8004878 <_reclaim_reent+0x40>
 8004872:	4620      	mov	r0, r4
 8004874:	f000 f8a8 	bl	80049c8 <_free_r>
 8004878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800487a:	b111      	cbz	r1, 8004882 <_reclaim_reent+0x4a>
 800487c:	4620      	mov	r0, r4
 800487e:	f000 f8a3 	bl	80049c8 <_free_r>
 8004882:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004884:	b111      	cbz	r1, 800488c <_reclaim_reent+0x54>
 8004886:	4620      	mov	r0, r4
 8004888:	f000 f89e 	bl	80049c8 <_free_r>
 800488c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800488e:	b111      	cbz	r1, 8004896 <_reclaim_reent+0x5e>
 8004890:	4620      	mov	r0, r4
 8004892:	f000 f899 	bl	80049c8 <_free_r>
 8004896:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004898:	b111      	cbz	r1, 80048a0 <_reclaim_reent+0x68>
 800489a:	4620      	mov	r0, r4
 800489c:	f000 f894 	bl	80049c8 <_free_r>
 80048a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80048a2:	b111      	cbz	r1, 80048aa <_reclaim_reent+0x72>
 80048a4:	4620      	mov	r0, r4
 80048a6:	f000 f88f 	bl	80049c8 <_free_r>
 80048aa:	6a23      	ldr	r3, [r4, #32]
 80048ac:	b1b3      	cbz	r3, 80048dc <_reclaim_reent+0xa4>
 80048ae:	4620      	mov	r0, r4
 80048b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80048b4:	4718      	bx	r3
 80048b6:	5949      	ldr	r1, [r1, r5]
 80048b8:	b941      	cbnz	r1, 80048cc <_reclaim_reent+0x94>
 80048ba:	3504      	adds	r5, #4
 80048bc:	69e3      	ldr	r3, [r4, #28]
 80048be:	2d80      	cmp	r5, #128	; 0x80
 80048c0:	68d9      	ldr	r1, [r3, #12]
 80048c2:	d1f8      	bne.n	80048b6 <_reclaim_reent+0x7e>
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 f87f 	bl	80049c8 <_free_r>
 80048ca:	e7c0      	b.n	800484e <_reclaim_reent+0x16>
 80048cc:	680e      	ldr	r6, [r1, #0]
 80048ce:	4620      	mov	r0, r4
 80048d0:	f000 f87a 	bl	80049c8 <_free_r>
 80048d4:	4631      	mov	r1, r6
 80048d6:	e7ef      	b.n	80048b8 <_reclaim_reent+0x80>
 80048d8:	2500      	movs	r5, #0
 80048da:	e7ef      	b.n	80048bc <_reclaim_reent+0x84>
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	bf00      	nop
 80048e0:	20000068 	.word	0x20000068

080048e4 <_lseek_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d07      	ldr	r5, [pc, #28]	; (8004904 <_lseek_r+0x20>)
 80048e8:	4604      	mov	r4, r0
 80048ea:	4608      	mov	r0, r1
 80048ec:	4611      	mov	r1, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	602a      	str	r2, [r5, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f7fc faca 	bl	8000e8c <_lseek>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_lseek_r+0x1e>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_lseek_r+0x1e>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	20004264 	.word	0x20004264

08004908 <_read_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d07      	ldr	r5, [pc, #28]	; (8004928 <_read_r+0x20>)
 800490c:	4604      	mov	r4, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fc fa58 	bl	8000dcc <_read>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_read_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_read_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20004264 	.word	0x20004264

0800492c <_write_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4d07      	ldr	r5, [pc, #28]	; (800494c <_write_r+0x20>)
 8004930:	4604      	mov	r4, r0
 8004932:	4608      	mov	r0, r1
 8004934:	4611      	mov	r1, r2
 8004936:	2200      	movs	r2, #0
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f7fc fa63 	bl	8000e06 <_write>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_write_r+0x1e>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_write_r+0x1e>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	20004264 	.word	0x20004264

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000068 	.word	0x20000068

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4d0d      	ldr	r5, [pc, #52]	; (8004994 <__libc_init_array+0x38>)
 8004960:	4c0d      	ldr	r4, [pc, #52]	; (8004998 <__libc_init_array+0x3c>)
 8004962:	1b64      	subs	r4, r4, r5
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	2600      	movs	r6, #0
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	4d0b      	ldr	r5, [pc, #44]	; (800499c <__libc_init_array+0x40>)
 800496e:	4c0c      	ldr	r4, [pc, #48]	; (80049a0 <__libc_init_array+0x44>)
 8004970:	f000 feea 	bl	8005748 <_init>
 8004974:	1b64      	subs	r4, r4, r5
 8004976:	10a4      	asrs	r4, r4, #2
 8004978:	2600      	movs	r6, #0
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f855 3b04 	ldr.w	r3, [r5], #4
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f855 3b04 	ldr.w	r3, [r5], #4
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	080058cc 	.word	0x080058cc
 8004998:	080058cc 	.word	0x080058cc
 800499c:	080058cc 	.word	0x080058cc
 80049a0:	080058d0 	.word	0x080058d0

080049a4 <__retarget_lock_init_recursive>:
 80049a4:	4770      	bx	lr

080049a6 <__retarget_lock_acquire_recursive>:
 80049a6:	4770      	bx	lr

080049a8 <__retarget_lock_release_recursive>:
 80049a8:	4770      	bx	lr

080049aa <memcpy>:
 80049aa:	440a      	add	r2, r1
 80049ac:	4291      	cmp	r1, r2
 80049ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80049b2:	d100      	bne.n	80049b6 <memcpy+0xc>
 80049b4:	4770      	bx	lr
 80049b6:	b510      	push	{r4, lr}
 80049b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049c0:	4291      	cmp	r1, r2
 80049c2:	d1f9      	bne.n	80049b8 <memcpy+0xe>
 80049c4:	bd10      	pop	{r4, pc}
	...

080049c8 <_free_r>:
 80049c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049ca:	2900      	cmp	r1, #0
 80049cc:	d044      	beq.n	8004a58 <_free_r+0x90>
 80049ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d2:	9001      	str	r0, [sp, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f1a1 0404 	sub.w	r4, r1, #4
 80049da:	bfb8      	it	lt
 80049dc:	18e4      	addlt	r4, r4, r3
 80049de:	f000 f8e7 	bl	8004bb0 <__malloc_lock>
 80049e2:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <_free_r+0x94>)
 80049e4:	9801      	ldr	r0, [sp, #4]
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	b933      	cbnz	r3, 80049f8 <_free_r+0x30>
 80049ea:	6063      	str	r3, [r4, #4]
 80049ec:	6014      	str	r4, [r2, #0]
 80049ee:	b003      	add	sp, #12
 80049f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049f4:	f000 b8e2 	b.w	8004bbc <__malloc_unlock>
 80049f8:	42a3      	cmp	r3, r4
 80049fa:	d908      	bls.n	8004a0e <_free_r+0x46>
 80049fc:	6825      	ldr	r5, [r4, #0]
 80049fe:	1961      	adds	r1, r4, r5
 8004a00:	428b      	cmp	r3, r1
 8004a02:	bf01      	itttt	eq
 8004a04:	6819      	ldreq	r1, [r3, #0]
 8004a06:	685b      	ldreq	r3, [r3, #4]
 8004a08:	1949      	addeq	r1, r1, r5
 8004a0a:	6021      	streq	r1, [r4, #0]
 8004a0c:	e7ed      	b.n	80049ea <_free_r+0x22>
 8004a0e:	461a      	mov	r2, r3
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	b10b      	cbz	r3, 8004a18 <_free_r+0x50>
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	d9fa      	bls.n	8004a0e <_free_r+0x46>
 8004a18:	6811      	ldr	r1, [r2, #0]
 8004a1a:	1855      	adds	r5, r2, r1
 8004a1c:	42a5      	cmp	r5, r4
 8004a1e:	d10b      	bne.n	8004a38 <_free_r+0x70>
 8004a20:	6824      	ldr	r4, [r4, #0]
 8004a22:	4421      	add	r1, r4
 8004a24:	1854      	adds	r4, r2, r1
 8004a26:	42a3      	cmp	r3, r4
 8004a28:	6011      	str	r1, [r2, #0]
 8004a2a:	d1e0      	bne.n	80049ee <_free_r+0x26>
 8004a2c:	681c      	ldr	r4, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	6053      	str	r3, [r2, #4]
 8004a32:	440c      	add	r4, r1
 8004a34:	6014      	str	r4, [r2, #0]
 8004a36:	e7da      	b.n	80049ee <_free_r+0x26>
 8004a38:	d902      	bls.n	8004a40 <_free_r+0x78>
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	6003      	str	r3, [r0, #0]
 8004a3e:	e7d6      	b.n	80049ee <_free_r+0x26>
 8004a40:	6825      	ldr	r5, [r4, #0]
 8004a42:	1961      	adds	r1, r4, r5
 8004a44:	428b      	cmp	r3, r1
 8004a46:	bf04      	itt	eq
 8004a48:	6819      	ldreq	r1, [r3, #0]
 8004a4a:	685b      	ldreq	r3, [r3, #4]
 8004a4c:	6063      	str	r3, [r4, #4]
 8004a4e:	bf04      	itt	eq
 8004a50:	1949      	addeq	r1, r1, r5
 8004a52:	6021      	streq	r1, [r4, #0]
 8004a54:	6054      	str	r4, [r2, #4]
 8004a56:	e7ca      	b.n	80049ee <_free_r+0x26>
 8004a58:	b003      	add	sp, #12
 8004a5a:	bd30      	pop	{r4, r5, pc}
 8004a5c:	2000426c 	.word	0x2000426c

08004a60 <malloc>:
 8004a60:	4b02      	ldr	r3, [pc, #8]	; (8004a6c <malloc+0xc>)
 8004a62:	4601      	mov	r1, r0
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	f000 b823 	b.w	8004ab0 <_malloc_r>
 8004a6a:	bf00      	nop
 8004a6c:	20000068 	.word	0x20000068

08004a70 <sbrk_aligned>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	4e0e      	ldr	r6, [pc, #56]	; (8004aac <sbrk_aligned+0x3c>)
 8004a74:	460c      	mov	r4, r1
 8004a76:	6831      	ldr	r1, [r6, #0]
 8004a78:	4605      	mov	r5, r0
 8004a7a:	b911      	cbnz	r1, 8004a82 <sbrk_aligned+0x12>
 8004a7c:	f000 fe1c 	bl	80056b8 <_sbrk_r>
 8004a80:	6030      	str	r0, [r6, #0]
 8004a82:	4621      	mov	r1, r4
 8004a84:	4628      	mov	r0, r5
 8004a86:	f000 fe17 	bl	80056b8 <_sbrk_r>
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	d00a      	beq.n	8004aa4 <sbrk_aligned+0x34>
 8004a8e:	1cc4      	adds	r4, r0, #3
 8004a90:	f024 0403 	bic.w	r4, r4, #3
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d007      	beq.n	8004aa8 <sbrk_aligned+0x38>
 8004a98:	1a21      	subs	r1, r4, r0
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 fe0c 	bl	80056b8 <_sbrk_r>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d101      	bne.n	8004aa8 <sbrk_aligned+0x38>
 8004aa4:	f04f 34ff 	mov.w	r4, #4294967295
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	20004270 	.word	0x20004270

08004ab0 <_malloc_r>:
 8004ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab4:	1ccd      	adds	r5, r1, #3
 8004ab6:	f025 0503 	bic.w	r5, r5, #3
 8004aba:	3508      	adds	r5, #8
 8004abc:	2d0c      	cmp	r5, #12
 8004abe:	bf38      	it	cc
 8004ac0:	250c      	movcc	r5, #12
 8004ac2:	2d00      	cmp	r5, #0
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	db01      	blt.n	8004acc <_malloc_r+0x1c>
 8004ac8:	42a9      	cmp	r1, r5
 8004aca:	d905      	bls.n	8004ad8 <_malloc_r+0x28>
 8004acc:	230c      	movs	r3, #12
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	2600      	movs	r6, #0
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bac <_malloc_r+0xfc>
 8004adc:	f000 f868 	bl	8004bb0 <__malloc_lock>
 8004ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae4:	461c      	mov	r4, r3
 8004ae6:	bb5c      	cbnz	r4, 8004b40 <_malloc_r+0x90>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4638      	mov	r0, r7
 8004aec:	f7ff ffc0 	bl	8004a70 <sbrk_aligned>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	4604      	mov	r4, r0
 8004af4:	d155      	bne.n	8004ba2 <_malloc_r+0xf2>
 8004af6:	f8d8 4000 	ldr.w	r4, [r8]
 8004afa:	4626      	mov	r6, r4
 8004afc:	2e00      	cmp	r6, #0
 8004afe:	d145      	bne.n	8004b8c <_malloc_r+0xdc>
 8004b00:	2c00      	cmp	r4, #0
 8004b02:	d048      	beq.n	8004b96 <_malloc_r+0xe6>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	4631      	mov	r1, r6
 8004b08:	4638      	mov	r0, r7
 8004b0a:	eb04 0903 	add.w	r9, r4, r3
 8004b0e:	f000 fdd3 	bl	80056b8 <_sbrk_r>
 8004b12:	4581      	cmp	r9, r0
 8004b14:	d13f      	bne.n	8004b96 <_malloc_r+0xe6>
 8004b16:	6821      	ldr	r1, [r4, #0]
 8004b18:	1a6d      	subs	r5, r5, r1
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	f7ff ffa7 	bl	8004a70 <sbrk_aligned>
 8004b22:	3001      	adds	r0, #1
 8004b24:	d037      	beq.n	8004b96 <_malloc_r+0xe6>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	442b      	add	r3, r5
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d038      	beq.n	8004ba6 <_malloc_r+0xf6>
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	42a2      	cmp	r2, r4
 8004b38:	d12b      	bne.n	8004b92 <_malloc_r+0xe2>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	e00f      	b.n	8004b60 <_malloc_r+0xb0>
 8004b40:	6822      	ldr	r2, [r4, #0]
 8004b42:	1b52      	subs	r2, r2, r5
 8004b44:	d41f      	bmi.n	8004b86 <_malloc_r+0xd6>
 8004b46:	2a0b      	cmp	r2, #11
 8004b48:	d917      	bls.n	8004b7a <_malloc_r+0xca>
 8004b4a:	1961      	adds	r1, r4, r5
 8004b4c:	42a3      	cmp	r3, r4
 8004b4e:	6025      	str	r5, [r4, #0]
 8004b50:	bf18      	it	ne
 8004b52:	6059      	strne	r1, [r3, #4]
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	bf08      	it	eq
 8004b58:	f8c8 1000 	streq.w	r1, [r8]
 8004b5c:	5162      	str	r2, [r4, r5]
 8004b5e:	604b      	str	r3, [r1, #4]
 8004b60:	4638      	mov	r0, r7
 8004b62:	f104 060b 	add.w	r6, r4, #11
 8004b66:	f000 f829 	bl	8004bbc <__malloc_unlock>
 8004b6a:	f026 0607 	bic.w	r6, r6, #7
 8004b6e:	1d23      	adds	r3, r4, #4
 8004b70:	1af2      	subs	r2, r6, r3
 8004b72:	d0ae      	beq.n	8004ad2 <_malloc_r+0x22>
 8004b74:	1b9b      	subs	r3, r3, r6
 8004b76:	50a3      	str	r3, [r4, r2]
 8004b78:	e7ab      	b.n	8004ad2 <_malloc_r+0x22>
 8004b7a:	42a3      	cmp	r3, r4
 8004b7c:	6862      	ldr	r2, [r4, #4]
 8004b7e:	d1dd      	bne.n	8004b3c <_malloc_r+0x8c>
 8004b80:	f8c8 2000 	str.w	r2, [r8]
 8004b84:	e7ec      	b.n	8004b60 <_malloc_r+0xb0>
 8004b86:	4623      	mov	r3, r4
 8004b88:	6864      	ldr	r4, [r4, #4]
 8004b8a:	e7ac      	b.n	8004ae6 <_malloc_r+0x36>
 8004b8c:	4634      	mov	r4, r6
 8004b8e:	6876      	ldr	r6, [r6, #4]
 8004b90:	e7b4      	b.n	8004afc <_malloc_r+0x4c>
 8004b92:	4613      	mov	r3, r2
 8004b94:	e7cc      	b.n	8004b30 <_malloc_r+0x80>
 8004b96:	230c      	movs	r3, #12
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	f000 f80e 	bl	8004bbc <__malloc_unlock>
 8004ba0:	e797      	b.n	8004ad2 <_malloc_r+0x22>
 8004ba2:	6025      	str	r5, [r4, #0]
 8004ba4:	e7dc      	b.n	8004b60 <_malloc_r+0xb0>
 8004ba6:	605b      	str	r3, [r3, #4]
 8004ba8:	deff      	udf	#255	; 0xff
 8004baa:	bf00      	nop
 8004bac:	2000426c 	.word	0x2000426c

08004bb0 <__malloc_lock>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__malloc_lock+0x8>)
 8004bb2:	f7ff bef8 	b.w	80049a6 <__retarget_lock_acquire_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	20004268 	.word	0x20004268

08004bbc <__malloc_unlock>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	; (8004bc4 <__malloc_unlock+0x8>)
 8004bbe:	f7ff bef3 	b.w	80049a8 <__retarget_lock_release_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	20004268 	.word	0x20004268

08004bc8 <__ssputs_r>:
 8004bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	688e      	ldr	r6, [r1, #8]
 8004bce:	461f      	mov	r7, r3
 8004bd0:	42be      	cmp	r6, r7
 8004bd2:	680b      	ldr	r3, [r1, #0]
 8004bd4:	4682      	mov	sl, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	4690      	mov	r8, r2
 8004bda:	d82c      	bhi.n	8004c36 <__ssputs_r+0x6e>
 8004bdc:	898a      	ldrh	r2, [r1, #12]
 8004bde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004be2:	d026      	beq.n	8004c32 <__ssputs_r+0x6a>
 8004be4:	6965      	ldr	r5, [r4, #20]
 8004be6:	6909      	ldr	r1, [r1, #16]
 8004be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bec:	eba3 0901 	sub.w	r9, r3, r1
 8004bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf4:	1c7b      	adds	r3, r7, #1
 8004bf6:	444b      	add	r3, r9
 8004bf8:	106d      	asrs	r5, r5, #1
 8004bfa:	429d      	cmp	r5, r3
 8004bfc:	bf38      	it	cc
 8004bfe:	461d      	movcc	r5, r3
 8004c00:	0553      	lsls	r3, r2, #21
 8004c02:	d527      	bpl.n	8004c54 <__ssputs_r+0x8c>
 8004c04:	4629      	mov	r1, r5
 8004c06:	f7ff ff53 	bl	8004ab0 <_malloc_r>
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	b360      	cbz	r0, 8004c68 <__ssputs_r+0xa0>
 8004c0e:	6921      	ldr	r1, [r4, #16]
 8004c10:	464a      	mov	r2, r9
 8004c12:	f7ff feca 	bl	80049aa <memcpy>
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	6126      	str	r6, [r4, #16]
 8004c24:	6165      	str	r5, [r4, #20]
 8004c26:	444e      	add	r6, r9
 8004c28:	eba5 0509 	sub.w	r5, r5, r9
 8004c2c:	6026      	str	r6, [r4, #0]
 8004c2e:	60a5      	str	r5, [r4, #8]
 8004c30:	463e      	mov	r6, r7
 8004c32:	42be      	cmp	r6, r7
 8004c34:	d900      	bls.n	8004c38 <__ssputs_r+0x70>
 8004c36:	463e      	mov	r6, r7
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	4632      	mov	r2, r6
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	f000 fcff 	bl	8005640 <memmove>
 8004c42:	68a3      	ldr	r3, [r4, #8]
 8004c44:	1b9b      	subs	r3, r3, r6
 8004c46:	60a3      	str	r3, [r4, #8]
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	4433      	add	r3, r6
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c54:	462a      	mov	r2, r5
 8004c56:	f000 fd3f 	bl	80056d8 <_realloc_r>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d1e0      	bne.n	8004c22 <__ssputs_r+0x5a>
 8004c60:	6921      	ldr	r1, [r4, #16]
 8004c62:	4650      	mov	r0, sl
 8004c64:	f7ff feb0 	bl	80049c8 <_free_r>
 8004c68:	230c      	movs	r3, #12
 8004c6a:	f8ca 3000 	str.w	r3, [sl]
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7a:	e7e9      	b.n	8004c50 <__ssputs_r+0x88>

08004c7c <_svfiprintf_r>:
 8004c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c80:	4698      	mov	r8, r3
 8004c82:	898b      	ldrh	r3, [r1, #12]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	b09d      	sub	sp, #116	; 0x74
 8004c88:	4607      	mov	r7, r0
 8004c8a:	460d      	mov	r5, r1
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	d50e      	bpl.n	8004cae <_svfiprintf_r+0x32>
 8004c90:	690b      	ldr	r3, [r1, #16]
 8004c92:	b963      	cbnz	r3, 8004cae <_svfiprintf_r+0x32>
 8004c94:	2140      	movs	r1, #64	; 0x40
 8004c96:	f7ff ff0b 	bl	8004ab0 <_malloc_r>
 8004c9a:	6028      	str	r0, [r5, #0]
 8004c9c:	6128      	str	r0, [r5, #16]
 8004c9e:	b920      	cbnz	r0, 8004caa <_svfiprintf_r+0x2e>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	e0d0      	b.n	8004e4c <_svfiprintf_r+0x1d0>
 8004caa:	2340      	movs	r3, #64	; 0x40
 8004cac:	616b      	str	r3, [r5, #20]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cbc:	2330      	movs	r3, #48	; 0x30
 8004cbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e64 <_svfiprintf_r+0x1e8>
 8004cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cc6:	f04f 0901 	mov.w	r9, #1
 8004cca:	4623      	mov	r3, r4
 8004ccc:	469a      	mov	sl, r3
 8004cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd2:	b10a      	cbz	r2, 8004cd8 <_svfiprintf_r+0x5c>
 8004cd4:	2a25      	cmp	r2, #37	; 0x25
 8004cd6:	d1f9      	bne.n	8004ccc <_svfiprintf_r+0x50>
 8004cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8004cdc:	d00b      	beq.n	8004cf6 <_svfiprintf_r+0x7a>
 8004cde:	465b      	mov	r3, fp
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f7ff ff6f 	bl	8004bc8 <__ssputs_r>
 8004cea:	3001      	adds	r0, #1
 8004cec:	f000 80a9 	beq.w	8004e42 <_svfiprintf_r+0x1c6>
 8004cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf2:	445a      	add	r2, fp
 8004cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8004cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80a1 	beq.w	8004e42 <_svfiprintf_r+0x1c6>
 8004d00:	2300      	movs	r3, #0
 8004d02:	f04f 32ff 	mov.w	r2, #4294967295
 8004d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0a:	f10a 0a01 	add.w	sl, sl, #1
 8004d0e:	9304      	str	r3, [sp, #16]
 8004d10:	9307      	str	r3, [sp, #28]
 8004d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d16:	931a      	str	r3, [sp, #104]	; 0x68
 8004d18:	4654      	mov	r4, sl
 8004d1a:	2205      	movs	r2, #5
 8004d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d20:	4850      	ldr	r0, [pc, #320]	; (8004e64 <_svfiprintf_r+0x1e8>)
 8004d22:	f7fb fa5d 	bl	80001e0 <memchr>
 8004d26:	9a04      	ldr	r2, [sp, #16]
 8004d28:	b9d8      	cbnz	r0, 8004d62 <_svfiprintf_r+0xe6>
 8004d2a:	06d0      	lsls	r0, r2, #27
 8004d2c:	bf44      	itt	mi
 8004d2e:	2320      	movmi	r3, #32
 8004d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d34:	0711      	lsls	r1, r2, #28
 8004d36:	bf44      	itt	mi
 8004d38:	232b      	movmi	r3, #43	; 0x2b
 8004d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d42:	2b2a      	cmp	r3, #42	; 0x2a
 8004d44:	d015      	beq.n	8004d72 <_svfiprintf_r+0xf6>
 8004d46:	9a07      	ldr	r2, [sp, #28]
 8004d48:	4654      	mov	r4, sl
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f04f 0c0a 	mov.w	ip, #10
 8004d50:	4621      	mov	r1, r4
 8004d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d56:	3b30      	subs	r3, #48	; 0x30
 8004d58:	2b09      	cmp	r3, #9
 8004d5a:	d94d      	bls.n	8004df8 <_svfiprintf_r+0x17c>
 8004d5c:	b1b0      	cbz	r0, 8004d8c <_svfiprintf_r+0x110>
 8004d5e:	9207      	str	r2, [sp, #28]
 8004d60:	e014      	b.n	8004d8c <_svfiprintf_r+0x110>
 8004d62:	eba0 0308 	sub.w	r3, r0, r8
 8004d66:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	9304      	str	r3, [sp, #16]
 8004d6e:	46a2      	mov	sl, r4
 8004d70:	e7d2      	b.n	8004d18 <_svfiprintf_r+0x9c>
 8004d72:	9b03      	ldr	r3, [sp, #12]
 8004d74:	1d19      	adds	r1, r3, #4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	9103      	str	r1, [sp, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bfbb      	ittet	lt
 8004d7e:	425b      	neglt	r3, r3
 8004d80:	f042 0202 	orrlt.w	r2, r2, #2
 8004d84:	9307      	strge	r3, [sp, #28]
 8004d86:	9307      	strlt	r3, [sp, #28]
 8004d88:	bfb8      	it	lt
 8004d8a:	9204      	strlt	r2, [sp, #16]
 8004d8c:	7823      	ldrb	r3, [r4, #0]
 8004d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d90:	d10c      	bne.n	8004dac <_svfiprintf_r+0x130>
 8004d92:	7863      	ldrb	r3, [r4, #1]
 8004d94:	2b2a      	cmp	r3, #42	; 0x2a
 8004d96:	d134      	bne.n	8004e02 <_svfiprintf_r+0x186>
 8004d98:	9b03      	ldr	r3, [sp, #12]
 8004d9a:	1d1a      	adds	r2, r3, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	9203      	str	r2, [sp, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bfb8      	it	lt
 8004da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004da8:	3402      	adds	r4, #2
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004e74 <_svfiprintf_r+0x1f8>
 8004db0:	7821      	ldrb	r1, [r4, #0]
 8004db2:	2203      	movs	r2, #3
 8004db4:	4650      	mov	r0, sl
 8004db6:	f7fb fa13 	bl	80001e0 <memchr>
 8004dba:	b138      	cbz	r0, 8004dcc <_svfiprintf_r+0x150>
 8004dbc:	9b04      	ldr	r3, [sp, #16]
 8004dbe:	eba0 000a 	sub.w	r0, r0, sl
 8004dc2:	2240      	movs	r2, #64	; 0x40
 8004dc4:	4082      	lsls	r2, r0
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	3401      	adds	r4, #1
 8004dca:	9304      	str	r3, [sp, #16]
 8004dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd0:	4825      	ldr	r0, [pc, #148]	; (8004e68 <_svfiprintf_r+0x1ec>)
 8004dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dd6:	2206      	movs	r2, #6
 8004dd8:	f7fb fa02 	bl	80001e0 <memchr>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d038      	beq.n	8004e52 <_svfiprintf_r+0x1d6>
 8004de0:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <_svfiprintf_r+0x1f0>)
 8004de2:	bb1b      	cbnz	r3, 8004e2c <_svfiprintf_r+0x1b0>
 8004de4:	9b03      	ldr	r3, [sp, #12]
 8004de6:	3307      	adds	r3, #7
 8004de8:	f023 0307 	bic.w	r3, r3, #7
 8004dec:	3308      	adds	r3, #8
 8004dee:	9303      	str	r3, [sp, #12]
 8004df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df2:	4433      	add	r3, r6
 8004df4:	9309      	str	r3, [sp, #36]	; 0x24
 8004df6:	e768      	b.n	8004cca <_svfiprintf_r+0x4e>
 8004df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	2001      	movs	r0, #1
 8004e00:	e7a6      	b.n	8004d50 <_svfiprintf_r+0xd4>
 8004e02:	2300      	movs	r3, #0
 8004e04:	3401      	adds	r4, #1
 8004e06:	9305      	str	r3, [sp, #20]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f04f 0c0a 	mov.w	ip, #10
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e14:	3a30      	subs	r2, #48	; 0x30
 8004e16:	2a09      	cmp	r2, #9
 8004e18:	d903      	bls.n	8004e22 <_svfiprintf_r+0x1a6>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0c6      	beq.n	8004dac <_svfiprintf_r+0x130>
 8004e1e:	9105      	str	r1, [sp, #20]
 8004e20:	e7c4      	b.n	8004dac <_svfiprintf_r+0x130>
 8004e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e26:	4604      	mov	r4, r0
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e7f0      	b.n	8004e0e <_svfiprintf_r+0x192>
 8004e2c:	ab03      	add	r3, sp, #12
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	462a      	mov	r2, r5
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <_svfiprintf_r+0x1f4>)
 8004e34:	a904      	add	r1, sp, #16
 8004e36:	4638      	mov	r0, r7
 8004e38:	f3af 8000 	nop.w
 8004e3c:	1c42      	adds	r2, r0, #1
 8004e3e:	4606      	mov	r6, r0
 8004e40:	d1d6      	bne.n	8004df0 <_svfiprintf_r+0x174>
 8004e42:	89ab      	ldrh	r3, [r5, #12]
 8004e44:	065b      	lsls	r3, r3, #25
 8004e46:	f53f af2d 	bmi.w	8004ca4 <_svfiprintf_r+0x28>
 8004e4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e4c:	b01d      	add	sp, #116	; 0x74
 8004e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e52:	ab03      	add	r3, sp, #12
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	462a      	mov	r2, r5
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <_svfiprintf_r+0x1f4>)
 8004e5a:	a904      	add	r1, sp, #16
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f000 f9bd 	bl	80051dc <_printf_i>
 8004e62:	e7eb      	b.n	8004e3c <_svfiprintf_r+0x1c0>
 8004e64:	08005890 	.word	0x08005890
 8004e68:	0800589a 	.word	0x0800589a
 8004e6c:	00000000 	.word	0x00000000
 8004e70:	08004bc9 	.word	0x08004bc9
 8004e74:	08005896 	.word	0x08005896

08004e78 <__sfputc_r>:
 8004e78:	6893      	ldr	r3, [r2, #8]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	b410      	push	{r4}
 8004e80:	6093      	str	r3, [r2, #8]
 8004e82:	da08      	bge.n	8004e96 <__sfputc_r+0x1e>
 8004e84:	6994      	ldr	r4, [r2, #24]
 8004e86:	42a3      	cmp	r3, r4
 8004e88:	db01      	blt.n	8004e8e <__sfputc_r+0x16>
 8004e8a:	290a      	cmp	r1, #10
 8004e8c:	d103      	bne.n	8004e96 <__sfputc_r+0x1e>
 8004e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e92:	f7ff bc24 	b.w	80046de <__swbuf_r>
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	1c58      	adds	r0, r3, #1
 8004e9a:	6010      	str	r0, [r2, #0]
 8004e9c:	7019      	strb	r1, [r3, #0]
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <__sfputs_r>:
 8004ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460f      	mov	r7, r1
 8004eac:	4614      	mov	r4, r2
 8004eae:	18d5      	adds	r5, r2, r3
 8004eb0:	42ac      	cmp	r4, r5
 8004eb2:	d101      	bne.n	8004eb8 <__sfputs_r+0x12>
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e007      	b.n	8004ec8 <__sfputs_r+0x22>
 8004eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebc:	463a      	mov	r2, r7
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f7ff ffda 	bl	8004e78 <__sfputc_r>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d1f3      	bne.n	8004eb0 <__sfputs_r+0xa>
 8004ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ecc <_vfiprintf_r>:
 8004ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed0:	460d      	mov	r5, r1
 8004ed2:	b09d      	sub	sp, #116	; 0x74
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	4698      	mov	r8, r3
 8004ed8:	4606      	mov	r6, r0
 8004eda:	b118      	cbz	r0, 8004ee4 <_vfiprintf_r+0x18>
 8004edc:	6a03      	ldr	r3, [r0, #32]
 8004ede:	b90b      	cbnz	r3, 8004ee4 <_vfiprintf_r+0x18>
 8004ee0:	f7ff fa48 	bl	8004374 <__sinit>
 8004ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ee6:	07d9      	lsls	r1, r3, #31
 8004ee8:	d405      	bmi.n	8004ef6 <_vfiprintf_r+0x2a>
 8004eea:	89ab      	ldrh	r3, [r5, #12]
 8004eec:	059a      	lsls	r2, r3, #22
 8004eee:	d402      	bmi.n	8004ef6 <_vfiprintf_r+0x2a>
 8004ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ef2:	f7ff fd58 	bl	80049a6 <__retarget_lock_acquire_recursive>
 8004ef6:	89ab      	ldrh	r3, [r5, #12]
 8004ef8:	071b      	lsls	r3, r3, #28
 8004efa:	d501      	bpl.n	8004f00 <_vfiprintf_r+0x34>
 8004efc:	692b      	ldr	r3, [r5, #16]
 8004efe:	b99b      	cbnz	r3, 8004f28 <_vfiprintf_r+0x5c>
 8004f00:	4629      	mov	r1, r5
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff fc28 	bl	8004758 <__swsetup_r>
 8004f08:	b170      	cbz	r0, 8004f28 <_vfiprintf_r+0x5c>
 8004f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f0c:	07dc      	lsls	r4, r3, #31
 8004f0e:	d504      	bpl.n	8004f1a <_vfiprintf_r+0x4e>
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	b01d      	add	sp, #116	; 0x74
 8004f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1a:	89ab      	ldrh	r3, [r5, #12]
 8004f1c:	0598      	lsls	r0, r3, #22
 8004f1e:	d4f7      	bmi.n	8004f10 <_vfiprintf_r+0x44>
 8004f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f22:	f7ff fd41 	bl	80049a8 <__retarget_lock_release_recursive>
 8004f26:	e7f3      	b.n	8004f10 <_vfiprintf_r+0x44>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f36:	2330      	movs	r3, #48	; 0x30
 8004f38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80050ec <_vfiprintf_r+0x220>
 8004f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f40:	f04f 0901 	mov.w	r9, #1
 8004f44:	4623      	mov	r3, r4
 8004f46:	469a      	mov	sl, r3
 8004f48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f4c:	b10a      	cbz	r2, 8004f52 <_vfiprintf_r+0x86>
 8004f4e:	2a25      	cmp	r2, #37	; 0x25
 8004f50:	d1f9      	bne.n	8004f46 <_vfiprintf_r+0x7a>
 8004f52:	ebba 0b04 	subs.w	fp, sl, r4
 8004f56:	d00b      	beq.n	8004f70 <_vfiprintf_r+0xa4>
 8004f58:	465b      	mov	r3, fp
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7ff ffa1 	bl	8004ea6 <__sfputs_r>
 8004f64:	3001      	adds	r0, #1
 8004f66:	f000 80a9 	beq.w	80050bc <_vfiprintf_r+0x1f0>
 8004f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f6c:	445a      	add	r2, fp
 8004f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8004f70:	f89a 3000 	ldrb.w	r3, [sl]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a1 	beq.w	80050bc <_vfiprintf_r+0x1f0>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f84:	f10a 0a01 	add.w	sl, sl, #1
 8004f88:	9304      	str	r3, [sp, #16]
 8004f8a:	9307      	str	r3, [sp, #28]
 8004f8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f90:	931a      	str	r3, [sp, #104]	; 0x68
 8004f92:	4654      	mov	r4, sl
 8004f94:	2205      	movs	r2, #5
 8004f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f9a:	4854      	ldr	r0, [pc, #336]	; (80050ec <_vfiprintf_r+0x220>)
 8004f9c:	f7fb f920 	bl	80001e0 <memchr>
 8004fa0:	9a04      	ldr	r2, [sp, #16]
 8004fa2:	b9d8      	cbnz	r0, 8004fdc <_vfiprintf_r+0x110>
 8004fa4:	06d1      	lsls	r1, r2, #27
 8004fa6:	bf44      	itt	mi
 8004fa8:	2320      	movmi	r3, #32
 8004faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fae:	0713      	lsls	r3, r2, #28
 8004fb0:	bf44      	itt	mi
 8004fb2:	232b      	movmi	r3, #43	; 0x2b
 8004fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fbe:	d015      	beq.n	8004fec <_vfiprintf_r+0x120>
 8004fc0:	9a07      	ldr	r2, [sp, #28]
 8004fc2:	4654      	mov	r4, sl
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f04f 0c0a 	mov.w	ip, #10
 8004fca:	4621      	mov	r1, r4
 8004fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fd0:	3b30      	subs	r3, #48	; 0x30
 8004fd2:	2b09      	cmp	r3, #9
 8004fd4:	d94d      	bls.n	8005072 <_vfiprintf_r+0x1a6>
 8004fd6:	b1b0      	cbz	r0, 8005006 <_vfiprintf_r+0x13a>
 8004fd8:	9207      	str	r2, [sp, #28]
 8004fda:	e014      	b.n	8005006 <_vfiprintf_r+0x13a>
 8004fdc:	eba0 0308 	sub.w	r3, r0, r8
 8004fe0:	fa09 f303 	lsl.w	r3, r9, r3
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	9304      	str	r3, [sp, #16]
 8004fe8:	46a2      	mov	sl, r4
 8004fea:	e7d2      	b.n	8004f92 <_vfiprintf_r+0xc6>
 8004fec:	9b03      	ldr	r3, [sp, #12]
 8004fee:	1d19      	adds	r1, r3, #4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	9103      	str	r1, [sp, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bfbb      	ittet	lt
 8004ff8:	425b      	neglt	r3, r3
 8004ffa:	f042 0202 	orrlt.w	r2, r2, #2
 8004ffe:	9307      	strge	r3, [sp, #28]
 8005000:	9307      	strlt	r3, [sp, #28]
 8005002:	bfb8      	it	lt
 8005004:	9204      	strlt	r2, [sp, #16]
 8005006:	7823      	ldrb	r3, [r4, #0]
 8005008:	2b2e      	cmp	r3, #46	; 0x2e
 800500a:	d10c      	bne.n	8005026 <_vfiprintf_r+0x15a>
 800500c:	7863      	ldrb	r3, [r4, #1]
 800500e:	2b2a      	cmp	r3, #42	; 0x2a
 8005010:	d134      	bne.n	800507c <_vfiprintf_r+0x1b0>
 8005012:	9b03      	ldr	r3, [sp, #12]
 8005014:	1d1a      	adds	r2, r3, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	9203      	str	r2, [sp, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	bfb8      	it	lt
 800501e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005022:	3402      	adds	r4, #2
 8005024:	9305      	str	r3, [sp, #20]
 8005026:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80050fc <_vfiprintf_r+0x230>
 800502a:	7821      	ldrb	r1, [r4, #0]
 800502c:	2203      	movs	r2, #3
 800502e:	4650      	mov	r0, sl
 8005030:	f7fb f8d6 	bl	80001e0 <memchr>
 8005034:	b138      	cbz	r0, 8005046 <_vfiprintf_r+0x17a>
 8005036:	9b04      	ldr	r3, [sp, #16]
 8005038:	eba0 000a 	sub.w	r0, r0, sl
 800503c:	2240      	movs	r2, #64	; 0x40
 800503e:	4082      	lsls	r2, r0
 8005040:	4313      	orrs	r3, r2
 8005042:	3401      	adds	r4, #1
 8005044:	9304      	str	r3, [sp, #16]
 8005046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800504a:	4829      	ldr	r0, [pc, #164]	; (80050f0 <_vfiprintf_r+0x224>)
 800504c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005050:	2206      	movs	r2, #6
 8005052:	f7fb f8c5 	bl	80001e0 <memchr>
 8005056:	2800      	cmp	r0, #0
 8005058:	d03f      	beq.n	80050da <_vfiprintf_r+0x20e>
 800505a:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <_vfiprintf_r+0x228>)
 800505c:	bb1b      	cbnz	r3, 80050a6 <_vfiprintf_r+0x1da>
 800505e:	9b03      	ldr	r3, [sp, #12]
 8005060:	3307      	adds	r3, #7
 8005062:	f023 0307 	bic.w	r3, r3, #7
 8005066:	3308      	adds	r3, #8
 8005068:	9303      	str	r3, [sp, #12]
 800506a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506c:	443b      	add	r3, r7
 800506e:	9309      	str	r3, [sp, #36]	; 0x24
 8005070:	e768      	b.n	8004f44 <_vfiprintf_r+0x78>
 8005072:	fb0c 3202 	mla	r2, ip, r2, r3
 8005076:	460c      	mov	r4, r1
 8005078:	2001      	movs	r0, #1
 800507a:	e7a6      	b.n	8004fca <_vfiprintf_r+0xfe>
 800507c:	2300      	movs	r3, #0
 800507e:	3401      	adds	r4, #1
 8005080:	9305      	str	r3, [sp, #20]
 8005082:	4619      	mov	r1, r3
 8005084:	f04f 0c0a 	mov.w	ip, #10
 8005088:	4620      	mov	r0, r4
 800508a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800508e:	3a30      	subs	r2, #48	; 0x30
 8005090:	2a09      	cmp	r2, #9
 8005092:	d903      	bls.n	800509c <_vfiprintf_r+0x1d0>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0c6      	beq.n	8005026 <_vfiprintf_r+0x15a>
 8005098:	9105      	str	r1, [sp, #20]
 800509a:	e7c4      	b.n	8005026 <_vfiprintf_r+0x15a>
 800509c:	fb0c 2101 	mla	r1, ip, r1, r2
 80050a0:	4604      	mov	r4, r0
 80050a2:	2301      	movs	r3, #1
 80050a4:	e7f0      	b.n	8005088 <_vfiprintf_r+0x1bc>
 80050a6:	ab03      	add	r3, sp, #12
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	462a      	mov	r2, r5
 80050ac:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <_vfiprintf_r+0x22c>)
 80050ae:	a904      	add	r1, sp, #16
 80050b0:	4630      	mov	r0, r6
 80050b2:	f3af 8000 	nop.w
 80050b6:	4607      	mov	r7, r0
 80050b8:	1c78      	adds	r0, r7, #1
 80050ba:	d1d6      	bne.n	800506a <_vfiprintf_r+0x19e>
 80050bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050be:	07d9      	lsls	r1, r3, #31
 80050c0:	d405      	bmi.n	80050ce <_vfiprintf_r+0x202>
 80050c2:	89ab      	ldrh	r3, [r5, #12]
 80050c4:	059a      	lsls	r2, r3, #22
 80050c6:	d402      	bmi.n	80050ce <_vfiprintf_r+0x202>
 80050c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050ca:	f7ff fc6d 	bl	80049a8 <__retarget_lock_release_recursive>
 80050ce:	89ab      	ldrh	r3, [r5, #12]
 80050d0:	065b      	lsls	r3, r3, #25
 80050d2:	f53f af1d 	bmi.w	8004f10 <_vfiprintf_r+0x44>
 80050d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050d8:	e71c      	b.n	8004f14 <_vfiprintf_r+0x48>
 80050da:	ab03      	add	r3, sp, #12
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	462a      	mov	r2, r5
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <_vfiprintf_r+0x22c>)
 80050e2:	a904      	add	r1, sp, #16
 80050e4:	4630      	mov	r0, r6
 80050e6:	f000 f879 	bl	80051dc <_printf_i>
 80050ea:	e7e4      	b.n	80050b6 <_vfiprintf_r+0x1ea>
 80050ec:	08005890 	.word	0x08005890
 80050f0:	0800589a 	.word	0x0800589a
 80050f4:	00000000 	.word	0x00000000
 80050f8:	08004ea7 	.word	0x08004ea7
 80050fc:	08005896 	.word	0x08005896

08005100 <_printf_common>:
 8005100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	4616      	mov	r6, r2
 8005106:	4699      	mov	r9, r3
 8005108:	688a      	ldr	r2, [r1, #8]
 800510a:	690b      	ldr	r3, [r1, #16]
 800510c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005110:	4293      	cmp	r3, r2
 8005112:	bfb8      	it	lt
 8005114:	4613      	movlt	r3, r2
 8005116:	6033      	str	r3, [r6, #0]
 8005118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800511c:	4607      	mov	r7, r0
 800511e:	460c      	mov	r4, r1
 8005120:	b10a      	cbz	r2, 8005126 <_printf_common+0x26>
 8005122:	3301      	adds	r3, #1
 8005124:	6033      	str	r3, [r6, #0]
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	0699      	lsls	r1, r3, #26
 800512a:	bf42      	ittt	mi
 800512c:	6833      	ldrmi	r3, [r6, #0]
 800512e:	3302      	addmi	r3, #2
 8005130:	6033      	strmi	r3, [r6, #0]
 8005132:	6825      	ldr	r5, [r4, #0]
 8005134:	f015 0506 	ands.w	r5, r5, #6
 8005138:	d106      	bne.n	8005148 <_printf_common+0x48>
 800513a:	f104 0a19 	add.w	sl, r4, #25
 800513e:	68e3      	ldr	r3, [r4, #12]
 8005140:	6832      	ldr	r2, [r6, #0]
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	42ab      	cmp	r3, r5
 8005146:	dc26      	bgt.n	8005196 <_printf_common+0x96>
 8005148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800514c:	1e13      	subs	r3, r2, #0
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	bf18      	it	ne
 8005152:	2301      	movne	r3, #1
 8005154:	0692      	lsls	r2, r2, #26
 8005156:	d42b      	bmi.n	80051b0 <_printf_common+0xb0>
 8005158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800515c:	4649      	mov	r1, r9
 800515e:	4638      	mov	r0, r7
 8005160:	47c0      	blx	r8
 8005162:	3001      	adds	r0, #1
 8005164:	d01e      	beq.n	80051a4 <_printf_common+0xa4>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	6922      	ldr	r2, [r4, #16]
 800516a:	f003 0306 	and.w	r3, r3, #6
 800516e:	2b04      	cmp	r3, #4
 8005170:	bf02      	ittt	eq
 8005172:	68e5      	ldreq	r5, [r4, #12]
 8005174:	6833      	ldreq	r3, [r6, #0]
 8005176:	1aed      	subeq	r5, r5, r3
 8005178:	68a3      	ldr	r3, [r4, #8]
 800517a:	bf0c      	ite	eq
 800517c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005180:	2500      	movne	r5, #0
 8005182:	4293      	cmp	r3, r2
 8005184:	bfc4      	itt	gt
 8005186:	1a9b      	subgt	r3, r3, r2
 8005188:	18ed      	addgt	r5, r5, r3
 800518a:	2600      	movs	r6, #0
 800518c:	341a      	adds	r4, #26
 800518e:	42b5      	cmp	r5, r6
 8005190:	d11a      	bne.n	80051c8 <_printf_common+0xc8>
 8005192:	2000      	movs	r0, #0
 8005194:	e008      	b.n	80051a8 <_printf_common+0xa8>
 8005196:	2301      	movs	r3, #1
 8005198:	4652      	mov	r2, sl
 800519a:	4649      	mov	r1, r9
 800519c:	4638      	mov	r0, r7
 800519e:	47c0      	blx	r8
 80051a0:	3001      	adds	r0, #1
 80051a2:	d103      	bne.n	80051ac <_printf_common+0xac>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ac:	3501      	adds	r5, #1
 80051ae:	e7c6      	b.n	800513e <_printf_common+0x3e>
 80051b0:	18e1      	adds	r1, r4, r3
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	2030      	movs	r0, #48	; 0x30
 80051b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ba:	4422      	add	r2, r4
 80051bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051c4:	3302      	adds	r3, #2
 80051c6:	e7c7      	b.n	8005158 <_printf_common+0x58>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4622      	mov	r2, r4
 80051cc:	4649      	mov	r1, r9
 80051ce:	4638      	mov	r0, r7
 80051d0:	47c0      	blx	r8
 80051d2:	3001      	adds	r0, #1
 80051d4:	d0e6      	beq.n	80051a4 <_printf_common+0xa4>
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7d9      	b.n	800518e <_printf_common+0x8e>
	...

080051dc <_printf_i>:
 80051dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e0:	7e0f      	ldrb	r7, [r1, #24]
 80051e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051e4:	2f78      	cmp	r7, #120	; 0x78
 80051e6:	4691      	mov	r9, r2
 80051e8:	4680      	mov	r8, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	469a      	mov	sl, r3
 80051ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051f2:	d807      	bhi.n	8005204 <_printf_i+0x28>
 80051f4:	2f62      	cmp	r7, #98	; 0x62
 80051f6:	d80a      	bhi.n	800520e <_printf_i+0x32>
 80051f8:	2f00      	cmp	r7, #0
 80051fa:	f000 80d4 	beq.w	80053a6 <_printf_i+0x1ca>
 80051fe:	2f58      	cmp	r7, #88	; 0x58
 8005200:	f000 80c0 	beq.w	8005384 <_printf_i+0x1a8>
 8005204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800520c:	e03a      	b.n	8005284 <_printf_i+0xa8>
 800520e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005212:	2b15      	cmp	r3, #21
 8005214:	d8f6      	bhi.n	8005204 <_printf_i+0x28>
 8005216:	a101      	add	r1, pc, #4	; (adr r1, 800521c <_printf_i+0x40>)
 8005218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800521c:	08005275 	.word	0x08005275
 8005220:	08005289 	.word	0x08005289
 8005224:	08005205 	.word	0x08005205
 8005228:	08005205 	.word	0x08005205
 800522c:	08005205 	.word	0x08005205
 8005230:	08005205 	.word	0x08005205
 8005234:	08005289 	.word	0x08005289
 8005238:	08005205 	.word	0x08005205
 800523c:	08005205 	.word	0x08005205
 8005240:	08005205 	.word	0x08005205
 8005244:	08005205 	.word	0x08005205
 8005248:	0800538d 	.word	0x0800538d
 800524c:	080052b5 	.word	0x080052b5
 8005250:	08005347 	.word	0x08005347
 8005254:	08005205 	.word	0x08005205
 8005258:	08005205 	.word	0x08005205
 800525c:	080053af 	.word	0x080053af
 8005260:	08005205 	.word	0x08005205
 8005264:	080052b5 	.word	0x080052b5
 8005268:	08005205 	.word	0x08005205
 800526c:	08005205 	.word	0x08005205
 8005270:	0800534f 	.word	0x0800534f
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	1d1a      	adds	r2, r3, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	602a      	str	r2, [r5, #0]
 800527c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005284:	2301      	movs	r3, #1
 8005286:	e09f      	b.n	80053c8 <_printf_i+0x1ec>
 8005288:	6820      	ldr	r0, [r4, #0]
 800528a:	682b      	ldr	r3, [r5, #0]
 800528c:	0607      	lsls	r7, r0, #24
 800528e:	f103 0104 	add.w	r1, r3, #4
 8005292:	6029      	str	r1, [r5, #0]
 8005294:	d501      	bpl.n	800529a <_printf_i+0xbe>
 8005296:	681e      	ldr	r6, [r3, #0]
 8005298:	e003      	b.n	80052a2 <_printf_i+0xc6>
 800529a:	0646      	lsls	r6, r0, #25
 800529c:	d5fb      	bpl.n	8005296 <_printf_i+0xba>
 800529e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052a2:	2e00      	cmp	r6, #0
 80052a4:	da03      	bge.n	80052ae <_printf_i+0xd2>
 80052a6:	232d      	movs	r3, #45	; 0x2d
 80052a8:	4276      	negs	r6, r6
 80052aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ae:	485a      	ldr	r0, [pc, #360]	; (8005418 <_printf_i+0x23c>)
 80052b0:	230a      	movs	r3, #10
 80052b2:	e012      	b.n	80052da <_printf_i+0xfe>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	6820      	ldr	r0, [r4, #0]
 80052b8:	1d19      	adds	r1, r3, #4
 80052ba:	6029      	str	r1, [r5, #0]
 80052bc:	0605      	lsls	r5, r0, #24
 80052be:	d501      	bpl.n	80052c4 <_printf_i+0xe8>
 80052c0:	681e      	ldr	r6, [r3, #0]
 80052c2:	e002      	b.n	80052ca <_printf_i+0xee>
 80052c4:	0641      	lsls	r1, r0, #25
 80052c6:	d5fb      	bpl.n	80052c0 <_printf_i+0xe4>
 80052c8:	881e      	ldrh	r6, [r3, #0]
 80052ca:	4853      	ldr	r0, [pc, #332]	; (8005418 <_printf_i+0x23c>)
 80052cc:	2f6f      	cmp	r7, #111	; 0x6f
 80052ce:	bf0c      	ite	eq
 80052d0:	2308      	moveq	r3, #8
 80052d2:	230a      	movne	r3, #10
 80052d4:	2100      	movs	r1, #0
 80052d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052da:	6865      	ldr	r5, [r4, #4]
 80052dc:	60a5      	str	r5, [r4, #8]
 80052de:	2d00      	cmp	r5, #0
 80052e0:	bfa2      	ittt	ge
 80052e2:	6821      	ldrge	r1, [r4, #0]
 80052e4:	f021 0104 	bicge.w	r1, r1, #4
 80052e8:	6021      	strge	r1, [r4, #0]
 80052ea:	b90e      	cbnz	r6, 80052f0 <_printf_i+0x114>
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	d04b      	beq.n	8005388 <_printf_i+0x1ac>
 80052f0:	4615      	mov	r5, r2
 80052f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80052f6:	fb03 6711 	mls	r7, r3, r1, r6
 80052fa:	5dc7      	ldrb	r7, [r0, r7]
 80052fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005300:	4637      	mov	r7, r6
 8005302:	42bb      	cmp	r3, r7
 8005304:	460e      	mov	r6, r1
 8005306:	d9f4      	bls.n	80052f2 <_printf_i+0x116>
 8005308:	2b08      	cmp	r3, #8
 800530a:	d10b      	bne.n	8005324 <_printf_i+0x148>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	07de      	lsls	r6, r3, #31
 8005310:	d508      	bpl.n	8005324 <_printf_i+0x148>
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	6861      	ldr	r1, [r4, #4]
 8005316:	4299      	cmp	r1, r3
 8005318:	bfde      	ittt	le
 800531a:	2330      	movle	r3, #48	; 0x30
 800531c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005324:	1b52      	subs	r2, r2, r5
 8005326:	6122      	str	r2, [r4, #16]
 8005328:	f8cd a000 	str.w	sl, [sp]
 800532c:	464b      	mov	r3, r9
 800532e:	aa03      	add	r2, sp, #12
 8005330:	4621      	mov	r1, r4
 8005332:	4640      	mov	r0, r8
 8005334:	f7ff fee4 	bl	8005100 <_printf_common>
 8005338:	3001      	adds	r0, #1
 800533a:	d14a      	bne.n	80053d2 <_printf_i+0x1f6>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	b004      	add	sp, #16
 8005342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	f043 0320 	orr.w	r3, r3, #32
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	4833      	ldr	r0, [pc, #204]	; (800541c <_printf_i+0x240>)
 8005350:	2778      	movs	r7, #120	; 0x78
 8005352:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	6829      	ldr	r1, [r5, #0]
 800535a:	061f      	lsls	r7, r3, #24
 800535c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005360:	d402      	bmi.n	8005368 <_printf_i+0x18c>
 8005362:	065f      	lsls	r7, r3, #25
 8005364:	bf48      	it	mi
 8005366:	b2b6      	uxthmi	r6, r6
 8005368:	07df      	lsls	r7, r3, #31
 800536a:	bf48      	it	mi
 800536c:	f043 0320 	orrmi.w	r3, r3, #32
 8005370:	6029      	str	r1, [r5, #0]
 8005372:	bf48      	it	mi
 8005374:	6023      	strmi	r3, [r4, #0]
 8005376:	b91e      	cbnz	r6, 8005380 <_printf_i+0x1a4>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	f023 0320 	bic.w	r3, r3, #32
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	2310      	movs	r3, #16
 8005382:	e7a7      	b.n	80052d4 <_printf_i+0xf8>
 8005384:	4824      	ldr	r0, [pc, #144]	; (8005418 <_printf_i+0x23c>)
 8005386:	e7e4      	b.n	8005352 <_printf_i+0x176>
 8005388:	4615      	mov	r5, r2
 800538a:	e7bd      	b.n	8005308 <_printf_i+0x12c>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	6826      	ldr	r6, [r4, #0]
 8005390:	6961      	ldr	r1, [r4, #20]
 8005392:	1d18      	adds	r0, r3, #4
 8005394:	6028      	str	r0, [r5, #0]
 8005396:	0635      	lsls	r5, r6, #24
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	d501      	bpl.n	80053a0 <_printf_i+0x1c4>
 800539c:	6019      	str	r1, [r3, #0]
 800539e:	e002      	b.n	80053a6 <_printf_i+0x1ca>
 80053a0:	0670      	lsls	r0, r6, #25
 80053a2:	d5fb      	bpl.n	800539c <_printf_i+0x1c0>
 80053a4:	8019      	strh	r1, [r3, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	4615      	mov	r5, r2
 80053ac:	e7bc      	b.n	8005328 <_printf_i+0x14c>
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	1d1a      	adds	r2, r3, #4
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	2100      	movs	r1, #0
 80053ba:	4628      	mov	r0, r5
 80053bc:	f7fa ff10 	bl	80001e0 <memchr>
 80053c0:	b108      	cbz	r0, 80053c6 <_printf_i+0x1ea>
 80053c2:	1b40      	subs	r0, r0, r5
 80053c4:	6060      	str	r0, [r4, #4]
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	2300      	movs	r3, #0
 80053cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d0:	e7aa      	b.n	8005328 <_printf_i+0x14c>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	462a      	mov	r2, r5
 80053d6:	4649      	mov	r1, r9
 80053d8:	4640      	mov	r0, r8
 80053da:	47d0      	blx	sl
 80053dc:	3001      	adds	r0, #1
 80053de:	d0ad      	beq.n	800533c <_printf_i+0x160>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	079b      	lsls	r3, r3, #30
 80053e4:	d413      	bmi.n	800540e <_printf_i+0x232>
 80053e6:	68e0      	ldr	r0, [r4, #12]
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	4298      	cmp	r0, r3
 80053ec:	bfb8      	it	lt
 80053ee:	4618      	movlt	r0, r3
 80053f0:	e7a6      	b.n	8005340 <_printf_i+0x164>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	47d0      	blx	sl
 80053fc:	3001      	adds	r0, #1
 80053fe:	d09d      	beq.n	800533c <_printf_i+0x160>
 8005400:	3501      	adds	r5, #1
 8005402:	68e3      	ldr	r3, [r4, #12]
 8005404:	9903      	ldr	r1, [sp, #12]
 8005406:	1a5b      	subs	r3, r3, r1
 8005408:	42ab      	cmp	r3, r5
 800540a:	dcf2      	bgt.n	80053f2 <_printf_i+0x216>
 800540c:	e7eb      	b.n	80053e6 <_printf_i+0x20a>
 800540e:	2500      	movs	r5, #0
 8005410:	f104 0619 	add.w	r6, r4, #25
 8005414:	e7f5      	b.n	8005402 <_printf_i+0x226>
 8005416:	bf00      	nop
 8005418:	080058a1 	.word	0x080058a1
 800541c:	080058b2 	.word	0x080058b2

08005420 <__sflush_r>:
 8005420:	898a      	ldrh	r2, [r1, #12]
 8005422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005426:	4605      	mov	r5, r0
 8005428:	0710      	lsls	r0, r2, #28
 800542a:	460c      	mov	r4, r1
 800542c:	d458      	bmi.n	80054e0 <__sflush_r+0xc0>
 800542e:	684b      	ldr	r3, [r1, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	dc05      	bgt.n	8005440 <__sflush_r+0x20>
 8005434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	dc02      	bgt.n	8005440 <__sflush_r+0x20>
 800543a:	2000      	movs	r0, #0
 800543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005442:	2e00      	cmp	r6, #0
 8005444:	d0f9      	beq.n	800543a <__sflush_r+0x1a>
 8005446:	2300      	movs	r3, #0
 8005448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800544c:	682f      	ldr	r7, [r5, #0]
 800544e:	6a21      	ldr	r1, [r4, #32]
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	d032      	beq.n	80054ba <__sflush_r+0x9a>
 8005454:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	075a      	lsls	r2, r3, #29
 800545a:	d505      	bpl.n	8005468 <__sflush_r+0x48>
 800545c:	6863      	ldr	r3, [r4, #4]
 800545e:	1ac0      	subs	r0, r0, r3
 8005460:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005462:	b10b      	cbz	r3, 8005468 <__sflush_r+0x48>
 8005464:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005466:	1ac0      	subs	r0, r0, r3
 8005468:	2300      	movs	r3, #0
 800546a:	4602      	mov	r2, r0
 800546c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800546e:	6a21      	ldr	r1, [r4, #32]
 8005470:	4628      	mov	r0, r5
 8005472:	47b0      	blx	r6
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	d106      	bne.n	8005488 <__sflush_r+0x68>
 800547a:	6829      	ldr	r1, [r5, #0]
 800547c:	291d      	cmp	r1, #29
 800547e:	d82b      	bhi.n	80054d8 <__sflush_r+0xb8>
 8005480:	4a29      	ldr	r2, [pc, #164]	; (8005528 <__sflush_r+0x108>)
 8005482:	410a      	asrs	r2, r1
 8005484:	07d6      	lsls	r6, r2, #31
 8005486:	d427      	bmi.n	80054d8 <__sflush_r+0xb8>
 8005488:	2200      	movs	r2, #0
 800548a:	6062      	str	r2, [r4, #4]
 800548c:	04d9      	lsls	r1, r3, #19
 800548e:	6922      	ldr	r2, [r4, #16]
 8005490:	6022      	str	r2, [r4, #0]
 8005492:	d504      	bpl.n	800549e <__sflush_r+0x7e>
 8005494:	1c42      	adds	r2, r0, #1
 8005496:	d101      	bne.n	800549c <__sflush_r+0x7c>
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	b903      	cbnz	r3, 800549e <__sflush_r+0x7e>
 800549c:	6560      	str	r0, [r4, #84]	; 0x54
 800549e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054a0:	602f      	str	r7, [r5, #0]
 80054a2:	2900      	cmp	r1, #0
 80054a4:	d0c9      	beq.n	800543a <__sflush_r+0x1a>
 80054a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054aa:	4299      	cmp	r1, r3
 80054ac:	d002      	beq.n	80054b4 <__sflush_r+0x94>
 80054ae:	4628      	mov	r0, r5
 80054b0:	f7ff fa8a 	bl	80049c8 <_free_r>
 80054b4:	2000      	movs	r0, #0
 80054b6:	6360      	str	r0, [r4, #52]	; 0x34
 80054b8:	e7c0      	b.n	800543c <__sflush_r+0x1c>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4628      	mov	r0, r5
 80054be:	47b0      	blx	r6
 80054c0:	1c41      	adds	r1, r0, #1
 80054c2:	d1c8      	bne.n	8005456 <__sflush_r+0x36>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0c5      	beq.n	8005456 <__sflush_r+0x36>
 80054ca:	2b1d      	cmp	r3, #29
 80054cc:	d001      	beq.n	80054d2 <__sflush_r+0xb2>
 80054ce:	2b16      	cmp	r3, #22
 80054d0:	d101      	bne.n	80054d6 <__sflush_r+0xb6>
 80054d2:	602f      	str	r7, [r5, #0]
 80054d4:	e7b1      	b.n	800543a <__sflush_r+0x1a>
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	e7ad      	b.n	800543c <__sflush_r+0x1c>
 80054e0:	690f      	ldr	r7, [r1, #16]
 80054e2:	2f00      	cmp	r7, #0
 80054e4:	d0a9      	beq.n	800543a <__sflush_r+0x1a>
 80054e6:	0793      	lsls	r3, r2, #30
 80054e8:	680e      	ldr	r6, [r1, #0]
 80054ea:	bf08      	it	eq
 80054ec:	694b      	ldreq	r3, [r1, #20]
 80054ee:	600f      	str	r7, [r1, #0]
 80054f0:	bf18      	it	ne
 80054f2:	2300      	movne	r3, #0
 80054f4:	eba6 0807 	sub.w	r8, r6, r7
 80054f8:	608b      	str	r3, [r1, #8]
 80054fa:	f1b8 0f00 	cmp.w	r8, #0
 80054fe:	dd9c      	ble.n	800543a <__sflush_r+0x1a>
 8005500:	6a21      	ldr	r1, [r4, #32]
 8005502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005504:	4643      	mov	r3, r8
 8005506:	463a      	mov	r2, r7
 8005508:	4628      	mov	r0, r5
 800550a:	47b0      	blx	r6
 800550c:	2800      	cmp	r0, #0
 800550e:	dc06      	bgt.n	800551e <__sflush_r+0xfe>
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005516:	81a3      	strh	r3, [r4, #12]
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	e78e      	b.n	800543c <__sflush_r+0x1c>
 800551e:	4407      	add	r7, r0
 8005520:	eba8 0800 	sub.w	r8, r8, r0
 8005524:	e7e9      	b.n	80054fa <__sflush_r+0xda>
 8005526:	bf00      	nop
 8005528:	dfbffffe 	.word	0xdfbffffe

0800552c <_fflush_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	690b      	ldr	r3, [r1, #16]
 8005530:	4605      	mov	r5, r0
 8005532:	460c      	mov	r4, r1
 8005534:	b913      	cbnz	r3, 800553c <_fflush_r+0x10>
 8005536:	2500      	movs	r5, #0
 8005538:	4628      	mov	r0, r5
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	b118      	cbz	r0, 8005546 <_fflush_r+0x1a>
 800553e:	6a03      	ldr	r3, [r0, #32]
 8005540:	b90b      	cbnz	r3, 8005546 <_fflush_r+0x1a>
 8005542:	f7fe ff17 	bl	8004374 <__sinit>
 8005546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f3      	beq.n	8005536 <_fflush_r+0xa>
 800554e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005550:	07d0      	lsls	r0, r2, #31
 8005552:	d404      	bmi.n	800555e <_fflush_r+0x32>
 8005554:	0599      	lsls	r1, r3, #22
 8005556:	d402      	bmi.n	800555e <_fflush_r+0x32>
 8005558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800555a:	f7ff fa24 	bl	80049a6 <__retarget_lock_acquire_recursive>
 800555e:	4628      	mov	r0, r5
 8005560:	4621      	mov	r1, r4
 8005562:	f7ff ff5d 	bl	8005420 <__sflush_r>
 8005566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005568:	07da      	lsls	r2, r3, #31
 800556a:	4605      	mov	r5, r0
 800556c:	d4e4      	bmi.n	8005538 <_fflush_r+0xc>
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	059b      	lsls	r3, r3, #22
 8005572:	d4e1      	bmi.n	8005538 <_fflush_r+0xc>
 8005574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005576:	f7ff fa17 	bl	80049a8 <__retarget_lock_release_recursive>
 800557a:	e7dd      	b.n	8005538 <_fflush_r+0xc>

0800557c <__swhatbuf_r>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	460c      	mov	r4, r1
 8005580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005584:	2900      	cmp	r1, #0
 8005586:	b096      	sub	sp, #88	; 0x58
 8005588:	4615      	mov	r5, r2
 800558a:	461e      	mov	r6, r3
 800558c:	da0d      	bge.n	80055aa <__swhatbuf_r+0x2e>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	bf0c      	ite	eq
 800559a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800559e:	2340      	movne	r3, #64	; 0x40
 80055a0:	2000      	movs	r0, #0
 80055a2:	6031      	str	r1, [r6, #0]
 80055a4:	602b      	str	r3, [r5, #0]
 80055a6:	b016      	add	sp, #88	; 0x58
 80055a8:	bd70      	pop	{r4, r5, r6, pc}
 80055aa:	466a      	mov	r2, sp
 80055ac:	f000 f862 	bl	8005674 <_fstat_r>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	dbec      	blt.n	800558e <__swhatbuf_r+0x12>
 80055b4:	9901      	ldr	r1, [sp, #4]
 80055b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80055ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80055be:	4259      	negs	r1, r3
 80055c0:	4159      	adcs	r1, r3
 80055c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c6:	e7eb      	b.n	80055a0 <__swhatbuf_r+0x24>

080055c8 <__smakebuf_r>:
 80055c8:	898b      	ldrh	r3, [r1, #12]
 80055ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055cc:	079d      	lsls	r5, r3, #30
 80055ce:	4606      	mov	r6, r0
 80055d0:	460c      	mov	r4, r1
 80055d2:	d507      	bpl.n	80055e4 <__smakebuf_r+0x1c>
 80055d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	2301      	movs	r3, #1
 80055de:	6163      	str	r3, [r4, #20]
 80055e0:	b002      	add	sp, #8
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	ab01      	add	r3, sp, #4
 80055e6:	466a      	mov	r2, sp
 80055e8:	f7ff ffc8 	bl	800557c <__swhatbuf_r>
 80055ec:	9900      	ldr	r1, [sp, #0]
 80055ee:	4605      	mov	r5, r0
 80055f0:	4630      	mov	r0, r6
 80055f2:	f7ff fa5d 	bl	8004ab0 <_malloc_r>
 80055f6:	b948      	cbnz	r0, 800560c <__smakebuf_r+0x44>
 80055f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055fc:	059a      	lsls	r2, r3, #22
 80055fe:	d4ef      	bmi.n	80055e0 <__smakebuf_r+0x18>
 8005600:	f023 0303 	bic.w	r3, r3, #3
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	81a3      	strh	r3, [r4, #12]
 800560a:	e7e3      	b.n	80055d4 <__smakebuf_r+0xc>
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	6020      	str	r0, [r4, #0]
 8005610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005614:	81a3      	strh	r3, [r4, #12]
 8005616:	9b00      	ldr	r3, [sp, #0]
 8005618:	6163      	str	r3, [r4, #20]
 800561a:	9b01      	ldr	r3, [sp, #4]
 800561c:	6120      	str	r0, [r4, #16]
 800561e:	b15b      	cbz	r3, 8005638 <__smakebuf_r+0x70>
 8005620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005624:	4630      	mov	r0, r6
 8005626:	f000 f837 	bl	8005698 <_isatty_r>
 800562a:	b128      	cbz	r0, 8005638 <__smakebuf_r+0x70>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	431d      	orrs	r5, r3
 800563c:	81a5      	strh	r5, [r4, #12]
 800563e:	e7cf      	b.n	80055e0 <__smakebuf_r+0x18>

08005640 <memmove>:
 8005640:	4288      	cmp	r0, r1
 8005642:	b510      	push	{r4, lr}
 8005644:	eb01 0402 	add.w	r4, r1, r2
 8005648:	d902      	bls.n	8005650 <memmove+0x10>
 800564a:	4284      	cmp	r4, r0
 800564c:	4623      	mov	r3, r4
 800564e:	d807      	bhi.n	8005660 <memmove+0x20>
 8005650:	1e43      	subs	r3, r0, #1
 8005652:	42a1      	cmp	r1, r4
 8005654:	d008      	beq.n	8005668 <memmove+0x28>
 8005656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800565a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800565e:	e7f8      	b.n	8005652 <memmove+0x12>
 8005660:	4402      	add	r2, r0
 8005662:	4601      	mov	r1, r0
 8005664:	428a      	cmp	r2, r1
 8005666:	d100      	bne.n	800566a <memmove+0x2a>
 8005668:	bd10      	pop	{r4, pc}
 800566a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800566e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005672:	e7f7      	b.n	8005664 <memmove+0x24>

08005674 <_fstat_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d07      	ldr	r5, [pc, #28]	; (8005694 <_fstat_r+0x20>)
 8005678:	2300      	movs	r3, #0
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	602b      	str	r3, [r5, #0]
 8005682:	f7fb fbe8 	bl	8000e56 <_fstat>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d102      	bne.n	8005690 <_fstat_r+0x1c>
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	b103      	cbz	r3, 8005690 <_fstat_r+0x1c>
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	bd38      	pop	{r3, r4, r5, pc}
 8005692:	bf00      	nop
 8005694:	20004264 	.word	0x20004264

08005698 <_isatty_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4d06      	ldr	r5, [pc, #24]	; (80056b4 <_isatty_r+0x1c>)
 800569c:	2300      	movs	r3, #0
 800569e:	4604      	mov	r4, r0
 80056a0:	4608      	mov	r0, r1
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	f7fb fbe7 	bl	8000e76 <_isatty>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_isatty_r+0x1a>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_isatty_r+0x1a>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	20004264 	.word	0x20004264

080056b8 <_sbrk_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d06      	ldr	r5, [pc, #24]	; (80056d4 <_sbrk_r+0x1c>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fb fbf0 	bl	8000ea8 <_sbrk>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_sbrk_r+0x1a>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_sbrk_r+0x1a>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	20004264 	.word	0x20004264

080056d8 <_realloc_r>:
 80056d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056dc:	4680      	mov	r8, r0
 80056de:	4614      	mov	r4, r2
 80056e0:	460e      	mov	r6, r1
 80056e2:	b921      	cbnz	r1, 80056ee <_realloc_r+0x16>
 80056e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056e8:	4611      	mov	r1, r2
 80056ea:	f7ff b9e1 	b.w	8004ab0 <_malloc_r>
 80056ee:	b92a      	cbnz	r2, 80056fc <_realloc_r+0x24>
 80056f0:	f7ff f96a 	bl	80049c8 <_free_r>
 80056f4:	4625      	mov	r5, r4
 80056f6:	4628      	mov	r0, r5
 80056f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fc:	f000 f81b 	bl	8005736 <_malloc_usable_size_r>
 8005700:	4284      	cmp	r4, r0
 8005702:	4607      	mov	r7, r0
 8005704:	d802      	bhi.n	800570c <_realloc_r+0x34>
 8005706:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800570a:	d812      	bhi.n	8005732 <_realloc_r+0x5a>
 800570c:	4621      	mov	r1, r4
 800570e:	4640      	mov	r0, r8
 8005710:	f7ff f9ce 	bl	8004ab0 <_malloc_r>
 8005714:	4605      	mov	r5, r0
 8005716:	2800      	cmp	r0, #0
 8005718:	d0ed      	beq.n	80056f6 <_realloc_r+0x1e>
 800571a:	42bc      	cmp	r4, r7
 800571c:	4622      	mov	r2, r4
 800571e:	4631      	mov	r1, r6
 8005720:	bf28      	it	cs
 8005722:	463a      	movcs	r2, r7
 8005724:	f7ff f941 	bl	80049aa <memcpy>
 8005728:	4631      	mov	r1, r6
 800572a:	4640      	mov	r0, r8
 800572c:	f7ff f94c 	bl	80049c8 <_free_r>
 8005730:	e7e1      	b.n	80056f6 <_realloc_r+0x1e>
 8005732:	4635      	mov	r5, r6
 8005734:	e7df      	b.n	80056f6 <_realloc_r+0x1e>

08005736 <_malloc_usable_size_r>:
 8005736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800573a:	1f18      	subs	r0, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	bfbc      	itt	lt
 8005740:	580b      	ldrlt	r3, [r1, r0]
 8005742:	18c0      	addlt	r0, r0, r3
 8005744:	4770      	bx	lr
	...

08005748 <_init>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr

08005754 <_fini>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr
