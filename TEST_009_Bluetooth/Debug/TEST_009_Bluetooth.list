
TEST_009_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004dcc  08004dcc  00014dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e88  08004e88  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e90  08004e90  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000068  08004f00  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08004f00  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009db9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3a  00000000  00000000  00029e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0002bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000644  00000000  00000000  0002c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001661c  00000000  00000000  0002c93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2c9  00000000  00000000  00042f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087cb6  00000000  00000000  0004d221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029f8  00000000  00000000  000d4ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d78d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004db4 	.word	0x08004db4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004db4 	.word	0x08004db4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_UART_RxCpltCallback>:
char dum1, dum2;
char buf1[BUF_SIZE], buf2[BUF_SIZE]; //DMA BUF FOR UART1, UART2
int  h1 =0 , h2 = 0, t1 = 0, t2 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
   if(huart == &huart1) // from BlueTooth
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a2d      	ldr	r2, [pc, #180]	; (800064c <HAL_UART_RxCpltCallback+0xc0>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d11e      	bne.n	80005da <HAL_UART_RxCpltCallback+0x4e>
   {
      buf1[t1++] = dum1;
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <HAL_UART_RxCpltCallback+0xc4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	492b      	ldr	r1, [pc, #172]	; (8000650 <HAL_UART_RxCpltCallback+0xc4>)
 80005a4:	600a      	str	r2, [r1, #0]
 80005a6:	4a2b      	ldr	r2, [pc, #172]	; (8000654 <HAL_UART_RxCpltCallback+0xc8>)
 80005a8:	7811      	ldrb	r1, [r2, #0]
 80005aa:	4a2b      	ldr	r2, [pc, #172]	; (8000658 <HAL_UART_RxCpltCallback+0xcc>)
 80005ac:	54d1      	strb	r1, [r2, r3]
      HAL_UART_Transmit(&huart2, &dum1, 1, 10); // huart, data, size, Timeout
 80005ae:	230a      	movs	r3, #10
 80005b0:	2201      	movs	r2, #1
 80005b2:	4928      	ldr	r1, [pc, #160]	; (8000654 <HAL_UART_RxCpltCallback+0xc8>)
 80005b4:	4829      	ldr	r0, [pc, #164]	; (800065c <HAL_UART_RxCpltCallback+0xd0>)
 80005b6:	f002 f919 	bl	80027ec <HAL_UART_Transmit>
      if(dum1 == '\n')
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <HAL_UART_RxCpltCallback+0xc8>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b0a      	cmp	r3, #10
 80005c0:	d105      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x42>
      {
    	  CheckCMD(buf1);
 80005c2:	4825      	ldr	r0, [pc, #148]	; (8000658 <HAL_UART_RxCpltCallback+0xcc>)
 80005c4:	f000 f8d4 	bl	8000770 <CheckCMD>
    	  t1 = 0;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <HAL_UART_RxCpltCallback+0xc4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart1, &dum1, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	4920      	ldr	r1, [pc, #128]	; (8000654 <HAL_UART_RxCpltCallback+0xc8>)
 80005d2:	481e      	ldr	r0, [pc, #120]	; (800064c <HAL_UART_RxCpltCallback+0xc0>)
 80005d4:	f002 fa2c 	bl	8002a30 <HAL_UART_Receive_IT>
         HAL_UART_Transmit(&huart1, buf2, t2, 10); // huart, data, size, Timeout... AT Command
         t2 = 0;
      }
      HAL_UART_Receive_IT(&huart2, &dum2, 1);
   }
}
 80005d8:	e034      	b.n	8000644 <HAL_UART_RxCpltCallback+0xb8>
   else if(huart == &huart2) // from Putty
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a1f      	ldr	r2, [pc, #124]	; (800065c <HAL_UART_RxCpltCallback+0xd0>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d130      	bne.n	8000644 <HAL_UART_RxCpltCallback+0xb8>
      buf2[t2++] = dum2;
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <HAL_UART_RxCpltCallback+0xd4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	491d      	ldr	r1, [pc, #116]	; (8000660 <HAL_UART_RxCpltCallback+0xd4>)
 80005ea:	600a      	str	r2, [r1, #0]
 80005ec:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <HAL_UART_RxCpltCallback+0xd8>)
 80005ee:	7811      	ldrb	r1, [r2, #0]
 80005f0:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <HAL_UART_RxCpltCallback+0xdc>)
 80005f2:	54d1      	strb	r1, [r2, r3]
      HAL_UART_Transmit(&huart2, &dum2, 1, 10); // huart, data, size, Timeout... Terminal Echo
 80005f4:	230a      	movs	r3, #10
 80005f6:	2201      	movs	r2, #1
 80005f8:	491a      	ldr	r1, [pc, #104]	; (8000664 <HAL_UART_RxCpltCallback+0xd8>)
 80005fa:	4818      	ldr	r0, [pc, #96]	; (800065c <HAL_UART_RxCpltCallback+0xd0>)
 80005fc:	f002 f8f6 	bl	80027ec <HAL_UART_Transmit>
      if(dum2 == '\r') // CR : 0x0d(Enter)
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <HAL_UART_RxCpltCallback+0xd8>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b0d      	cmp	r3, #13
 8000606:	d118      	bne.n	800063a <HAL_UART_RxCpltCallback+0xae>
         HAL_UART_Transmit(&huart2, "\n", 1, 10); // huart, data, size, Timeout... Terminal Echo
 8000608:	230a      	movs	r3, #10
 800060a:	2201      	movs	r2, #1
 800060c:	4917      	ldr	r1, [pc, #92]	; (800066c <HAL_UART_RxCpltCallback+0xe0>)
 800060e:	4813      	ldr	r0, [pc, #76]	; (800065c <HAL_UART_RxCpltCallback+0xd0>)
 8000610:	f002 f8ec 	bl	80027ec <HAL_UART_Transmit>
         buf2[t2++] = '\n'; // append LF for EOL
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_UART_RxCpltCallback+0xd4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	4911      	ldr	r1, [pc, #68]	; (8000660 <HAL_UART_RxCpltCallback+0xd4>)
 800061c:	600a      	str	r2, [r1, #0]
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <HAL_UART_RxCpltCallback+0xdc>)
 8000620:	210a      	movs	r1, #10
 8000622:	54d1      	strb	r1, [r2, r3]
         HAL_UART_Transmit(&huart1, buf2, t2, 10); // huart, data, size, Timeout... AT Command
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_UART_RxCpltCallback+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	b29a      	uxth	r2, r3
 800062a:	230a      	movs	r3, #10
 800062c:	490e      	ldr	r1, [pc, #56]	; (8000668 <HAL_UART_RxCpltCallback+0xdc>)
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_UART_RxCpltCallback+0xc0>)
 8000630:	f002 f8dc 	bl	80027ec <HAL_UART_Transmit>
         t2 = 0;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_UART_RxCpltCallback+0xd4>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart2, &dum2, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	4909      	ldr	r1, [pc, #36]	; (8000664 <HAL_UART_RxCpltCallback+0xd8>)
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <HAL_UART_RxCpltCallback+0xd0>)
 8000640:	f002 f9f6 	bl	8002a30 <HAL_UART_Receive_IT>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000084 	.word	0x20000084
 8000650:	200002a0 	.word	0x200002a0
 8000654:	200001d4 	.word	0x200001d4
 8000658:	200001d8 	.word	0x200001d8
 800065c:	200000cc 	.word	0x200000cc
 8000660:	200002a4 	.word	0x200002a4
 8000664:	200001d5 	.word	0x200001d5
 8000668:	2000023c 	.word	0x2000023c
 800066c:	08004dcc 	.word	0x08004dcc

08000670 <ToUpper>:
void ToUpper(char *s)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	while(*s)
 8000678:	e011      	b.n	800069e <ToUpper+0x2e>
	{
		if(*s >= 'a' && *s <= 'z') *s &= ~0xDF; s++;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b60      	cmp	r3, #96	; 0x60
 8000680:	d90a      	bls.n	8000698 <ToUpper+0x28>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b7a      	cmp	r3, #122	; 0x7a
 8000688:	d806      	bhi.n	8000698 <ToUpper+0x28>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	f003 0320 	and.w	r3, r3, #32
 8000692:	b2da      	uxtb	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
	while(*s)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1e9      	bne.n	800067a <ToUpper+0xa>
	}
}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <Trim>:
		else break;
	}
	strncpy(dest, s+h, t - h + 1);
}
char * Trim(char *s) // s = "___x x x__\t_\r\n" ==> "x x x" // remove white space
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
   int head = 0, tail = strlen(s)-1; // -1(remove null)
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fd8d 	bl	80001e0 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	3b01      	subs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
   while((*(s + head)==' ') || (*(s + head)=='\t') || (*(s + head)=='\r') || (*(s + head)=='\n')) head++; // if white space -> head++
 80006cc:	e002      	b.n	80006d4 <Trim+0x20>
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d0f6      	beq.n	80006ce <Trim+0x1a>
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d0f0      	beq.n	80006ce <Trim+0x1a>
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b0d      	cmp	r3, #13
 80006f6:	d0ea      	beq.n	80006ce <Trim+0x1a>
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b0a      	cmp	r3, #10
 8000702:	d0e4      	beq.n	80006ce <Trim+0x1a>
   while((*(s + tail)==' ') || (*(s + tail)=='\t') || (*(s + tail)=='\r') || (*(s + tail)=='\n')) tail--; // if white space -> tail--
 8000704:	e002      	b.n	800070c <Trim+0x58>
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	3b01      	subs	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b20      	cmp	r3, #32
 8000716:	d0f6      	beq.n	8000706 <Trim+0x52>
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b09      	cmp	r3, #9
 8000722:	d0f0      	beq.n	8000706 <Trim+0x52>
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b0d      	cmp	r3, #13
 800072e:	d0ea      	beq.n	8000706 <Trim+0x52>
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b0a      	cmp	r3, #10
 800073a:	d0e4      	beq.n	8000706 <Trim+0x52>
   char *dest = (char *)malloc(tail - head + 1);
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	3301      	adds	r3, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f003 f8ef 	bl	8003928 <malloc>
 800074a:	4603      	mov	r3, r0
 800074c:	60fb      	str	r3, [r7, #12]
   strncpy(dest, s+head, tail-head+1); // copy s+head to dest,, length = tail-head+1
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	18d1      	adds	r1, r2, r3
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	3301      	adds	r3, #1
 800075c:	461a      	mov	r2, r3
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f003 fc86 	bl	8004070 <strncpy>
   return dest;
 8000764:	68fb      	ldr	r3, [r7, #12]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <CheckCMD>:
void CheckCMD(char *bb) // ex) str = "  LED  1  " // need to remove white space -> str = "LED 1"
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
   //char str[100];
   //char arg[50];
   char *str = Trim(bb); // string remove / str : dest / bb : src
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff9b 	bl	80006b4 <Trim>
 800077e:	60f8      	str	r0, [r7, #12]
   ToUpper(str);
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f7ff ff75 	bl	8000670 <ToUpper>
   if(strncmp(str,"LED", 3) == 0)
 8000786:	2203      	movs	r2, #3
 8000788:	4911      	ldr	r1, [pc, #68]	; (80007d0 <CheckCMD+0x60>)
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f003 fc5e 	bl	800404c <strncmp>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d118      	bne.n	80007c8 <CheckCMD+0x58>
   {
      //Trim(arg, str+3);
      char *arg = Trim(str + 3);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3303      	adds	r3, #3
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff8a 	bl	80006b4 <Trim>
 80007a0:	60b8      	str	r0, [r7, #8]
      if(arg[0] == '1')
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b31      	cmp	r3, #49	; 0x31
 80007a8:	d105      	bne.n	80007b6 <CheckCMD+0x46>
      {
         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2120      	movs	r1, #32
 80007ae:	4809      	ldr	r0, [pc, #36]	; (80007d4 <CheckCMD+0x64>)
 80007b0:	f001 fb1a 	bl	8001de8 <HAL_GPIO_WritePin>
      {
         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
      }
   }

}
 80007b4:	e008      	b.n	80007c8 <CheckCMD+0x58>
      else if(arg[0] == '0')
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b30      	cmp	r3, #48	; 0x30
 80007bc:	d104      	bne.n	80007c8 <CheckCMD+0x58>
         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <CheckCMD+0x64>)
 80007c4:	f001 fb10 	bl	8001de8 <HAL_GPIO_WritePin>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08004dd0 	.word	0x08004dd0
 80007d4:	40020000 	.word	0x40020000

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f000 fc68 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f820 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 f912 	bl	8000a0c <MX_GPIO_Init>
  MX_DMA_Init();
 80007e8:	f000 f8da 	bl	80009a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 f8ae 	bl	800094c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80007f0:	f000 f882 	bl	80008f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("Bluetooth");
 80007f4:	4806      	ldr	r0, [pc, #24]	; (8000810 <main+0x38>)
 80007f6:	f000 f9cf 	bl	8000b98 <ProgramStart>
  //HAL_UART_Receive_DMA(&huart1, buf1, 100);
  //HAL_UART_Receive_DMA(&huart2, buf2, 100);
  HAL_UART_Receive_IT(&huart1, &dum1, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	4905      	ldr	r1, [pc, #20]	; (8000814 <main+0x3c>)
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <main+0x40>)
 8000800:	f002 f916 	bl	8002a30 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &dum2, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	4905      	ldr	r1, [pc, #20]	; (800081c <main+0x44>)
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <main+0x48>)
 800080a:	f002 f911 	bl	8002a30 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //char dd[]
  while (1)
 800080e:	e7fe      	b.n	800080e <main+0x36>
 8000810:	08004dd4 	.word	0x08004dd4
 8000814:	200001d4 	.word	0x200001d4
 8000818:	20000084 	.word	0x20000084
 800081c:	200001d5 	.word	0x200001d5
 8000820:	200000cc 	.word	0x200000cc

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2230      	movs	r2, #48	; 0x30
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fc02 	bl	800403c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a27      	ldr	r2, [pc, #156]	; (80008f0 <SystemClock_Config+0xcc>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <SystemClock_Config+0xd0>)
 800086e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000894:	2310      	movs	r3, #16
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000898:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800089e:	2304      	movs	r3, #4
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a2:	2304      	movs	r3, #4
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fab6 	bl	8001e1c <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008b6:	f000 f917 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fd18 	bl	800230c <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e2:	f000 f901 	bl	8000ae8 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART1_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000904:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000930:	f001 ff0c 	bl	800274c <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f8d5 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000084 	.word	0x20000084
 8000948:	40011000 	.word	0x40011000

0800094c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_USART2_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000984:	f001 fee2 	bl	800274c <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f8ab 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000cc 	.word	0x200000cc
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_DMA_Init+0x68>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <MX_DMA_Init+0x68>)
 80009b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_DMA_Init+0x68>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_DMA_Init+0x68>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <MX_DMA_Init+0x68>)
 80009cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_DMA_Init+0x68>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2010      	movs	r0, #16
 80009e4:	f000 fcb1 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009e8:	2010      	movs	r0, #16
 80009ea:	f000 fcca 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	203a      	movs	r0, #58	; 0x3a
 80009f4:	f000 fca9 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009f8:	203a      	movs	r0, #58	; 0x3a
 80009fa:	f000 fcc2 	bl	8001382 <HAL_NVIC_EnableIRQ>

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a25      	ldr	r2, [pc, #148]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_GPIO_Init+0xd0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2120      	movs	r1, #32
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a98:	f001 f9a6 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000ab4:	f000 fffc 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_GPIO_Init+0xd4>)
 8000ad0:	f000 ffee 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020800 	.word	0x40020800

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <__io_getchar>:
//include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c.h"

extern UART_HandleTypeDef huart2;	// 외부

int __io_getchar(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
   char ch;
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000afa:	bf00      	nop
 8000afc:	1df9      	adds	r1, r7, #7
 8000afe:	230a      	movs	r3, #10
 8000b00:	2201      	movs	r2, #1
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <__io_getchar+0x44>)
 8000b04:	f001 fefd 	bl	8002902 <HAL_UART_Receive>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f6      	bne.n	8000afc <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000b0e:	1df9      	adds	r1, r7, #7
 8000b10:	230a      	movs	r3, #10
 8000b12:	2201      	movs	r2, #1
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <__io_getchar+0x44>)
 8000b16:	f001 fe69 	bl	80027ec <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b0d      	cmp	r3, #13
 8000b1e:	d105      	bne.n	8000b2c <__io_getchar+0x38>
 8000b20:	230a      	movs	r3, #10
 8000b22:	2201      	movs	r2, #1
 8000b24:	4905      	ldr	r1, [pc, #20]	; (8000b3c <__io_getchar+0x48>)
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <__io_getchar+0x44>)
 8000b28:	f001 fe60 	bl	80027ec <HAL_UART_Transmit>
   return ch;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000cc 	.word	0x200000cc
 8000b3c:	08004de0 	.word	0x08004de0

08000b40 <__io_putchar>:

int __io_putchar(int ch)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // size(byte), timeout(ms)
 8000b48:	1d39      	adds	r1, r7, #4
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <__io_putchar+0x20>)
 8000b50:	f001 fe4c 	bl	80027ec <HAL_UART_Transmit>
   return ch;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000cc 	.word	0x200000cc

08000b64 <StandBy>:

void StandBy()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {}
 8000b68:	bf00      	nop
 8000b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <StandBy+0x1c>)
 8000b70:	f001 f922 	bl	8001db8 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f7      	bne.n	8000b6a <StandBy+0x6>
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40020800 	.word	0x40020800

08000b84 <cls>:

void cls()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <cls+0x10>)
 8000b8a:	f003 f843 	bl	8003c14 <iprintf>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08004de4 	.word	0x08004de4

08000b98 <ProgramStart>:

void ProgramStart(char* str)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H");
   cls();
 8000ba0:	f7ff fff0 	bl	8000b84 <cls>
   Cursor(0,0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f81c 	bl	8000be4 <Cursor>
   printf("Program Name - %s\r\n", str);
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <ProgramStart+0x40>)
 8000bb0:	f003 f830 	bl	8003c14 <iprintf>
   printf("Press Blue-button(B1) to Start...\r\n");
 8000bb4:	4809      	ldr	r0, [pc, #36]	; (8000bdc <ProgramStart+0x44>)
 8000bb6:	f003 f893 	bl	8003ce0 <puts>
   StandBy();
 8000bba:	f7ff ffd3 	bl	8000b64 <StandBy>
   setvbuf(stdin, NULL, _IONBF, 0);
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <ProgramStart+0x48>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6858      	ldr	r0, [r3, #4]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f003 f891 	bl	8003cf0 <setvbuf>

}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08004dec 	.word	0x08004dec
 8000bdc:	08004e00 	.word	0x08004e00
 8000be0:	20000064 	.word	0x20000064

08000be4 <Cursor>:

void Cursor(int x, int y)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf , "\033[%d;%dH", y, x);	//sprintf( buffer, "%d",a,b) console이 아니라 문자열 buf로 출력
 8000bee:	f107 000c 	add.w	r0, r7, #12
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4906      	ldr	r1, [pc, #24]	; (8000c10 <Cursor+0x2c>)
 8000bf8:	f003 f928 	bl	8003e4c <siprintf>
	printf("%s",buf);					//방법 2 puts(buf) puts문자열 출력 함수
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <Cursor+0x30>)
 8000c04:	f003 f806 	bl	8003c14 <iprintf>
}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	08004e24 	.word	0x08004e24
 8000c14:	08004e30 	.word	0x08004e30

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c56:	2007      	movs	r0, #7
 8000c58:	f000 fb6c 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a69      	ldr	r2, [pc, #420]	; (8000e2c <HAL_UART_MspInit+0x1c4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d164      	bne.n	8000d54 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a67      	ldr	r2, [pc, #412]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b65      	ldr	r3, [pc, #404]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	4b61      	ldr	r3, [pc, #388]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a60      	ldr	r2, [pc, #384]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4855      	ldr	r0, [pc, #340]	; (8000e34 <HAL_UART_MspInit+0x1cc>)
 8000ce0:	f000 fee6 	bl	8001ab0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ce4:	4b54      	ldr	r3, [pc, #336]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000ce6:	4a55      	ldr	r2, [pc, #340]	; (8000e3c <HAL_UART_MspInit+0x1d4>)
 8000ce8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000cea:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf2:	4b51      	ldr	r3, [pc, #324]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf8:	4b4f      	ldr	r3, [pc, #316]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfe:	4b4e      	ldr	r3, [pc, #312]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d04:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d06:	4b4c      	ldr	r3, [pc, #304]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0c:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d12:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d18:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d20:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d26:	4844      	ldr	r0, [pc, #272]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000d28:	f000 fb46 	bl	80013b8 <HAL_DMA_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d32:	f7ff fed9 	bl	8000ae8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a3f      	ldr	r2, [pc, #252]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000d3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d3c:	4a3e      	ldr	r2, [pc, #248]	; (8000e38 <HAL_UART_MspInit+0x1d0>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2025      	movs	r0, #37	; 0x25
 8000d48:	f000 faff 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d4c:	2025      	movs	r0, #37	; 0x25
 8000d4e:	f000 fb18 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d52:	e067      	b.n	8000e24 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a39      	ldr	r2, [pc, #228]	; (8000e40 <HAL_UART_MspInit+0x1d8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d162      	bne.n	8000e24 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a32      	ldr	r2, [pc, #200]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a2b      	ldr	r2, [pc, #172]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <HAL_UART_MspInit+0x1c8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d96:	230c      	movs	r3, #12
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da6:	2307      	movs	r3, #7
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4820      	ldr	r0, [pc, #128]	; (8000e34 <HAL_UART_MspInit+0x1cc>)
 8000db2:	f000 fe7d 	bl	8001ab0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <HAL_UART_MspInit+0x1e0>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000df8:	4812      	ldr	r0, [pc, #72]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000dfa:	f000 fadd 	bl	80013b8 <HAL_DMA_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8000e04:	f7ff fe70 	bl	8000ae8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000e0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e0e:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_UART_MspInit+0x1dc>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2026      	movs	r0, #38	; 0x26
 8000e1a:	f000 fa96 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e1e:	2026      	movs	r0, #38	; 0x26
 8000e20:	f000 faaf 	bl	8001382 <HAL_NVIC_EnableIRQ>
}
 8000e24:	bf00      	nop
 8000e26:	3730      	adds	r7, #48	; 0x30
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	20000114 	.word	0x20000114
 8000e3c:	40026440 	.word	0x40026440
 8000e40:	40004400 	.word	0x40004400
 8000e44:	20000174 	.word	0x20000174
 8000e48:	40026088 	.word	0x40026088

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f95c 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <DMA1_Stream5_IRQHandler+0x10>)
 8000ea6:	f000 fbc7 	bl	8001638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000174 	.word	0x20000174

08000eb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <USART1_IRQHandler+0x10>)
 8000eba:	f001 fddf 	bl	8002a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000084 	.word	0x20000084

08000ec8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <USART2_IRQHandler+0x10>)
 8000ece:	f001 fdd5 	bl	8002a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000cc 	.word	0x200000cc

08000edc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <DMA2_Stream2_IRQHandler+0x10>)
 8000ee2:	f000 fba9 	bl	8001638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000114 	.word	0x20000114

08000ef0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f02:	f7ff fdf7 	bl	8000af4 <__io_getchar>
 8000f06:	4601      	mov	r1, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf0      	blt.n	8000f02 <_read+0x12>
  }

  return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	e009      	b.n	8000f50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fdfb 	bl	8000b40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf1      	blt.n	8000f3c <_write+0x12>
  }
  return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_close>:

int _close(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_isatty>:

int _isatty(int file)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd4:	4a14      	ldr	r2, [pc, #80]	; (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ffc:	f003 f8a2 	bl	8004144 <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	220c      	movs	r2, #12
 8001004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20020000 	.word	0x20020000
 800102c:	00000400 	.word	0x00000400
 8001030:	200002a8 	.word	0x200002a8
 8001034:	20000400 	.word	0x20000400

08001038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <SystemInit+0x20>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <SystemInit+0x20>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001060:	f7ff ffea 	bl	8001038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	; (800109c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	; (80010a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f003 f861 	bl	8004150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff fba3 	bl	80007d8 <main>
  bx  lr    
 8001092:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010a0:	08004e98 	.word	0x08004e98
  ldr r2, =_sbss
 80010a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010a8:	200003fc 	.word	0x200003fc

080010ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <HAL_Init+0x40>)
 80010ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_Init+0x40>)
 80010c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_Init+0x40>)
 80010d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f92b 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f808 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fd98 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023c00 	.word	0x40023c00

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x54>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f943 	bl	800139e <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f000 f90b 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_InitTick+0x5c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	20000008 	.word	0x20000008
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x20>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x24>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_IncTick+0x24>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008
 8001178:	200002ac 	.word	0x200002ac

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_GetTick+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200002ac 	.word	0x200002ac

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff3e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff31 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff feda 	bl	800117c <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e099      	b.n	8001508 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2202      	movs	r2, #2
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f4:	e00f      	b.n	8001416 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013f6:	f7ff fec1 	bl	800117c <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b05      	cmp	r3, #5
 8001402:	d908      	bls.n	8001416 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2220      	movs	r2, #32
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2203      	movs	r2, #3
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e078      	b.n	8001508 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1e8      	bne.n	80013f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <HAL_DMA_Init+0x158>)
 8001430:	4013      	ands	r3, r2
 8001432:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001442:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4313      	orrs	r3, r2
 8001466:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	2b04      	cmp	r3, #4
 800146e:	d107      	bne.n	8001480 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	4313      	orrs	r3, r2
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4313      	orrs	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f023 0307 	bic.w	r3, r3, #7
 8001496:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	4313      	orrs	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d117      	bne.n	80014da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00e      	beq.n	80014da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fa7b 	bl	80019b8 <DMA_CheckFifoParam>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014d6:	2301      	movs	r3, #1
 80014d8:	e016      	b.n	8001508 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fa32 	bl	800194c <DMA_CalcBaseAndBitshift>
 80014e8:	4603      	mov	r3, r0
 80014ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	223f      	movs	r2, #63	; 0x3f
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	f010803f 	.word	0xf010803f

08001514 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001522:	f7ff fe2b 	bl	800117c <HAL_GetTick>
 8001526:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d008      	beq.n	8001546 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e052      	b.n	80015ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0216 	bic.w	r2, r2, #22
 8001554:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001564:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <HAL_DMA_Abort+0x62>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0208 	bic.w	r2, r2, #8
 8001584:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001596:	e013      	b.n	80015c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001598:	f7ff fdf0 	bl	800117c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d90c      	bls.n	80015c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2220      	movs	r2, #32
 80015aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2203      	movs	r2, #3
 80015b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e015      	b.n	80015ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1e4      	bne.n	8001598 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	223f      	movs	r2, #63	; 0x3f
 80015d4:	409a      	lsls	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d004      	beq.n	8001612 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00c      	b.n	800162c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2205      	movs	r2, #5
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001644:	4b8e      	ldr	r3, [pc, #568]	; (8001880 <HAL_DMA_IRQHandler+0x248>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a8e      	ldr	r2, [pc, #568]	; (8001884 <HAL_DMA_IRQHandler+0x24c>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0a9b      	lsrs	r3, r3, #10
 8001650:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	2208      	movs	r2, #8
 8001664:	409a      	lsls	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01a      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0204 	bic.w	r2, r2, #4
 800168a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001690:	2208      	movs	r2, #8
 8001692:	409a      	lsls	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	f043 0201 	orr.w	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2201      	movs	r2, #1
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d012      	beq.n	80016da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	2201      	movs	r2, #1
 80016c8:	409a      	lsls	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f043 0202 	orr.w	r2, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	2204      	movs	r2, #4
 80016e0:	409a      	lsls	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d012      	beq.n	8001710 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00b      	beq.n	8001710 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	2204      	movs	r2, #4
 80016fe:	409a      	lsls	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	f043 0204 	orr.w	r2, r3, #4
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001714:	2210      	movs	r2, #16
 8001716:	409a      	lsls	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d043      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d03c      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001732:	2210      	movs	r2, #16
 8001734:	409a      	lsls	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d018      	beq.n	800177a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d108      	bne.n	8001768 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d024      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
 8001766:	e01f      	b.n	80017a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01b      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	4798      	blx	r3
 8001778:	e016      	b.n	80017a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d107      	bne.n	8001798 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0208 	bic.w	r2, r2, #8
 8001796:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	2220      	movs	r2, #32
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 808f 	beq.w	80018d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8087 	beq.w	80018d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ce:	2220      	movs	r2, #32
 80017d0:	409a      	lsls	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d136      	bne.n	8001850 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0216 	bic.w	r2, r2, #22
 80017f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001800:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d103      	bne.n	8001812 <HAL_DMA_IRQHandler+0x1da>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0208 	bic.w	r2, r2, #8
 8001820:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	223f      	movs	r2, #63	; 0x3f
 8001828:	409a      	lsls	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001842:	2b00      	cmp	r3, #0
 8001844:	d07e      	beq.n	8001944 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
        }
        return;
 800184e:	e079      	b.n	8001944 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d01d      	beq.n	800189a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10d      	bne.n	8001888 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	2b00      	cmp	r3, #0
 8001872:	d031      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
 800187c:	e02c      	b.n	80018d8 <HAL_DMA_IRQHandler+0x2a0>
 800187e:	bf00      	nop
 8001880:	20000000 	.word	0x20000000
 8001884:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188c:	2b00      	cmp	r3, #0
 800188e:	d023      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
 8001898:	e01e      	b.n	80018d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10f      	bne.n	80018c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0210 	bic.w	r2, r2, #16
 80018b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d032      	beq.n	8001946 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d022      	beq.n	8001932 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2205      	movs	r2, #5
 80018f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3301      	adds	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	429a      	cmp	r2, r3
 800190e:	d307      	bcc.n	8001920 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f2      	bne.n	8001904 <HAL_DMA_IRQHandler+0x2cc>
 800191e:	e000      	b.n	8001922 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001920:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4798      	blx	r3
 8001942:	e000      	b.n	8001946 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001944:	bf00      	nop
    }
  }
}
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3b10      	subs	r3, #16
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <DMA_CalcBaseAndBitshift+0x64>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d909      	bls.n	800198e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001982:	f023 0303 	bic.w	r3, r3, #3
 8001986:	1d1a      	adds	r2, r3, #4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	659a      	str	r2, [r3, #88]	; 0x58
 800198c:	e007      	b.n	800199e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	aaaaaaab 	.word	0xaaaaaaab
 80019b4:	08004e4c 	.word	0x08004e4c

080019b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d11f      	bne.n	8001a12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d856      	bhi.n	8001a86 <DMA_CheckFifoParam+0xce>
 80019d8:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <DMA_CheckFifoParam+0x28>)
 80019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019de:	bf00      	nop
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	08001a03 	.word	0x08001a03
 80019e8:	080019f1 	.word	0x080019f1
 80019ec:	08001a87 	.word	0x08001a87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d046      	beq.n	8001a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a00:	e043      	b.n	8001a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a0a:	d140      	bne.n	8001a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a10:	e03d      	b.n	8001a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a1a:	d121      	bne.n	8001a60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d837      	bhi.n	8001a92 <DMA_CheckFifoParam+0xda>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <DMA_CheckFifoParam+0x70>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a3f 	.word	0x08001a3f
 8001a30:	08001a39 	.word	0x08001a39
 8001a34:	08001a51 	.word	0x08001a51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3c:	e030      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d025      	beq.n	8001a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a4e:	e022      	b.n	8001a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a58:	d11f      	bne.n	8001a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a5e:	e01c      	b.n	8001a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d903      	bls.n	8001a6e <DMA_CheckFifoParam+0xb6>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d003      	beq.n	8001a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a6c:	e018      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
      break;
 8001a72:	e015      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
      break;
 8001a84:	e00b      	b.n	8001a9e <DMA_CheckFifoParam+0xe6>
      break;
 8001a86:	bf00      	nop
 8001a88:	e00a      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e008      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e006      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
 8001a94:	e004      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a96:	bf00      	nop
 8001a98:	e002      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a9a:	bf00      	nop
 8001a9c:	e000      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e159      	b.n	8001d80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 8148 	bne.w	8001d7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d005      	beq.n	8001b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d130      	bne.n	8001b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 0201 	and.w	r2, r3, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d017      	beq.n	8001ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d123      	bne.n	8001bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	08da      	lsrs	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3208      	adds	r2, #8
 8001bee:	69b9      	ldr	r1, [r7, #24]
 8001bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a2 	beq.w	8001d7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b57      	ldr	r3, [pc, #348]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c52:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a49      	ldr	r2, [pc, #292]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x202>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_Init+0x2f4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x1fe>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <HAL_GPIO_Init+0x2f8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x1fa>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a46      	ldr	r2, [pc, #280]	; (8001dac <HAL_GPIO_Init+0x2fc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x1f6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a45      	ldr	r2, [pc, #276]	; (8001db0 <HAL_GPIO_Init+0x300>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x1f2>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a24      	ldr	r2, [pc, #144]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f aea2 	bls.w	8001acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e267      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d075      	beq.n	8001f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e3a:	4b88      	ldr	r3, [pc, #544]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d00c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d112      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e52:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e5e:	d10b      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	4b7e      	ldr	r3, [pc, #504]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d05b      	beq.n	8001f24 <HAL_RCC_OscConfig+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d157      	bne.n	8001f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e242      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d106      	bne.n	8001e90 <HAL_RCC_OscConfig+0x74>
 8001e82:	4b76      	ldr	r3, [pc, #472]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a75      	ldr	r2, [pc, #468]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x98>
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6f      	ldr	r2, [pc, #444]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6c      	ldr	r2, [pc, #432]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001eb4:	4b69      	ldr	r3, [pc, #420]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a68      	ldr	r2, [pc, #416]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f952 	bl	800117c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff f94e 	bl	800117c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e207      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xc0>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff f93e 	bl	800117c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f93a 	bl	800117c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1f3      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b51      	ldr	r3, [pc, #324]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0xe8>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f32:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b44      	ldr	r3, [pc, #272]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x152>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1c7      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4937      	ldr	r1, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_OscConfig+0x244>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7ff f8f3 	bl	800117c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff f8ef 	bl	800117c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1a8      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4925      	ldr	r1, [pc, #148]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x244>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7ff f8d2 	bl	800117c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f8ce 	bl	800117c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e187      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d036      	beq.n	8002074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d016      	beq.n	800203c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_RCC_OscConfig+0x248>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7ff f8b2 	bl	800117c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff f8ae 	bl	800117c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e167      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x200>
 800203a:	e01b      	b.n	8002074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_OscConfig+0x248>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7ff f89b 	bl	800117c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	e00e      	b.n	8002068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204a:	f7ff f897 	bl	800117c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d907      	bls.n	8002068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e150      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
 800205c:	40023800 	.word	0x40023800
 8002060:	42470000 	.word	0x42470000
 8002064:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ea      	bne.n	800204a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8097 	beq.w	80021b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10f      	bne.n	80020b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b7d      	ldr	r3, [pc, #500]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a7c      	ldr	r2, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b7a      	ldr	r3, [pc, #488]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b77      	ldr	r3, [pc, #476]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d118      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020be:	4b74      	ldr	r3, [pc, #464]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a73      	ldr	r2, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7ff f857 	bl	800117c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7ff f853 	bl	800117c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e10c      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x2ea>
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a63      	ldr	r2, [pc, #396]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	e01c      	b.n	8002140 <HAL_RCC_OscConfig+0x324>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b05      	cmp	r3, #5
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x30c>
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a5e      	ldr	r2, [pc, #376]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a5b      	ldr	r2, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0x324>
 8002128:	4b58      	ldr	r3, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a54      	ldr	r2, [pc, #336]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800213a:	f023 0304 	bic.w	r3, r3, #4
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d015      	beq.n	8002174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7ff f818 	bl	800117c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7ff f814 	bl	800117c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0cb      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ee      	beq.n	8002150 <HAL_RCC_OscConfig+0x334>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7ff f802 	bl	800117c <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7fe fffe 	bl	800117c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e0b5      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1ee      	bne.n	800217c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4a38      	ldr	r2, [pc, #224]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a1 	beq.w	80022fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d05c      	beq.n	8002280 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d141      	bne.n	8002252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe ffd2 	bl	800117c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe ffce 	bl	800117c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e087      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	3b01      	subs	r3, #1
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	491b      	ldr	r1, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe ffa7 	bl	800117c <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe ffa3 	bl	800117c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e05c      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x416>
 8002250:	e054      	b.n	80022fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe ff90 	bl	800117c <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe ff8c 	bl	800117c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e045      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x444>
 800227e:	e03d      	b.n	80022fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e038      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000
 8002294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x4ec>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d028      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d121      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d11a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d111      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	3b01      	subs	r3, #1
 80022e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0cc      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d90c      	bls.n	8002348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800236a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d044      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d119      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e067      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4934      	ldr	r1, [pc, #208]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7fe febe 	bl	800117c <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7fe feba 	bl	800117c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d20c      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f821 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	490a      	ldr	r1, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fe1e 	bl	80010f4 <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08004e34 	.word	0x08004e34
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024dc:	b094      	sub	sp, #80	; 0x50
 80024de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f0:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d00d      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x40>
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	f200 80e1 	bhi.w	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x34>
 8002506:	2b04      	cmp	r3, #4
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x3a>
 800250a:	e0db      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b73      	ldr	r3, [pc, #460]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002510:	e0db      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002516:	e0d8      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002522:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	2200      	movs	r2, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
 8002538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
 8002546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4621      	mov	r1, r4
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	6139      	str	r1, [r7, #16]
 8002568:	4629      	mov	r1, r5
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800257c:	4659      	mov	r1, fp
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4651      	mov	r1, sl
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4651      	mov	r1, sl
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4651      	mov	r1, sl
 800258c:	ebb2 0801 	subs.w	r8, r2, r1
 8002590:	4659      	mov	r1, fp
 8002592:	eb63 0901 	sbc.w	r9, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025aa:	4690      	mov	r8, r2
 80025ac:	4699      	mov	r9, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	eb18 0303 	adds.w	r3, r8, r3
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	462b      	mov	r3, r5
 80025b8:	eb49 0303 	adc.w	r3, r9, r3
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ca:	4629      	mov	r1, r5
 80025cc:	024b      	lsls	r3, r1, #9
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025d4:	4621      	mov	r1, r4
 80025d6:	024a      	lsls	r2, r1, #9
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025de:	2200      	movs	r2, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e8:	f7fd fe52 	bl	8000290 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f4:	e058      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	4611      	mov	r1, r2
 8002602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	f04f 0000 	mov.w	r0, #0
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	0159      	lsls	r1, r3, #5
 800261e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002622:	0150      	lsls	r0, r2, #5
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4641      	mov	r1, r8
 800262a:	ebb2 0a01 	subs.w	sl, r2, r1
 800262e:	4649      	mov	r1, r9
 8002630:	eb63 0b01 	sbc.w	fp, r3, r1
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002648:	ebb2 040a 	subs.w	r4, r2, sl
 800264c:	eb63 050b 	sbc.w	r5, r3, fp
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	00eb      	lsls	r3, r5, #3
 800265a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4643      	mov	r3, r8
 8002666:	18e3      	adds	r3, r4, r3
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	464b      	mov	r3, r9
 800266c:	eb45 0303 	adc.w	r3, r5, r3
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267e:	4629      	mov	r1, r5
 8002680:	028b      	lsls	r3, r1, #10
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002688:	4621      	mov	r1, r4
 800268a:	028a      	lsls	r2, r1, #10
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002692:	2200      	movs	r2, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	61fa      	str	r2, [r7, #28]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	f7fd fdf8 	bl	8000290 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4613      	mov	r3, r2
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80026b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3750      	adds	r7, #80	; 0x50
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	007a1200 	.word	0x007a1200

080026e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002700:	f7ff fff0 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	08004e44 	.word	0x08004e44

08002724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002728:	f7ff ffdc 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0b5b      	lsrs	r3, r3, #13
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	08004e44 	.word	0x08004e44

0800274c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e042      	b.n	80027e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fa78 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800278e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fe55 	bl	8003440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	d175      	bne.n	80028f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_UART_Transmit+0x2c>
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e06e      	b.n	80028fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282a:	f7fe fca7 	bl	800117c <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x6c>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002860:	e02e      	b.n	80028c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fbb7 	bl	8002fe0 <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e03a      	b.n	80028fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	3302      	adds	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e007      	b.n	80028b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1cb      	bne.n	8002862 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fb83 	bl	8002fe0 <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e006      	b.n	80028fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b08a      	sub	sp, #40	; 0x28
 8002906:	af02      	add	r7, sp, #8
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b20      	cmp	r3, #32
 8002920:	f040 8081 	bne.w	8002a26 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_UART_Receive+0x2e>
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e079      	b.n	8002a28 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2222      	movs	r2, #34	; 0x22
 800293e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002948:	f7fe fc18 	bl	800117c <HAL_GetTick>
 800294c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	88fa      	ldrh	r2, [r7, #6]
 8002952:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	88fa      	ldrh	r2, [r7, #6]
 8002958:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002962:	d108      	bne.n	8002976 <HAL_UART_Receive+0x74>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	e003      	b.n	800297e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800297e:	e047      	b.n	8002a10 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2200      	movs	r2, #0
 8002988:	2120      	movs	r1, #32
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fb28 	bl	8002fe0 <UART_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e042      	b.n	8002a28 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10c      	bne.n	80029c2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	3302      	adds	r3, #2
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	e01f      	b.n	8002a02 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ca:	d007      	beq.n	80029dc <HAL_UART_Receive+0xda>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <HAL_UART_Receive+0xe8>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e008      	b.n	80029fc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	3301      	adds	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1b2      	bne.n	8002980 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d112      	bne.n	8002a70 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_UART_Receive_IT+0x26>
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00b      	b.n	8002a72 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fb13 	bl	8003092 <UART_Start_Receive_IT>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b0ba      	sub	sp, #232	; 0xe8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x66>
 8002ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fbf2 	bl	80032c4 <UART_Receive_IT>
      return;
 8002ae0:	e25b      	b.n	8002f9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80de 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x22c>
 8002aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002afc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80d1 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_UART_IRQHandler+0xae>
 8002b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_UART_IRQHandler+0xd2>
 8002b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f043 0202 	orr.w	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_UART_IRQHandler+0xf6>
 8002b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d011      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x126>
 8002b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d105      	bne.n	8002b96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f043 0208 	orr.w	r2, r3, #8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 81f2 	beq.w	8002f90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_UART_IRQHandler+0x14e>
 8002bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fb7d 	bl	80032c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x17a>
 8002bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d04f      	beq.n	8002c96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa85 	bl	8003106 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b40      	cmp	r3, #64	; 0x40
 8002c08:	d141      	bne.n	8002c8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3314      	adds	r3, #20
 8002c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3314      	adds	r3, #20
 8002c32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1d9      	bne.n	8002c0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d013      	beq.n	8002c86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	4a7e      	ldr	r2, [pc, #504]	; (8002e5c <HAL_UART_IRQHandler+0x3e0>)
 8002c64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fcc2 	bl	80015f4 <HAL_DMA_Abort_IT>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c80:	4610      	mov	r0, r2
 8002c82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	e00e      	b.n	8002ca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f994 	bl	8002fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	e00a      	b.n	8002ca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f990 	bl	8002fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c94:	e006      	b.n	8002ca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f98c 	bl	8002fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002ca2:	e175      	b.n	8002f90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca4:	bf00      	nop
    return;
 8002ca6:	e173      	b.n	8002f90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	f040 814f 	bne.w	8002f50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8148 	beq.w	8002f50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8141 	beq.w	8002f50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	f040 80b6 	bne.w	8002e60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8145 	beq.w	8002f94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d12:	429a      	cmp	r2, r3
 8002d14:	f080 813e 	bcs.w	8002f94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2a:	f000 8088 	beq.w	8002e3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d6a:	e841 2300 	strex	r3, r2, [r1]
 8002d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1d9      	bne.n	8002d2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3314      	adds	r3, #20
 8002d9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002da2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002da6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e1      	bne.n	8002d7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3314      	adds	r3, #20
 8002dd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ddc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002de0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e3      	bne.n	8002db6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0e:	f023 0310 	bic.w	r3, r3, #16
 8002e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e20:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e3      	bne.n	8002dfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe fb6b 	bl	8001514 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f8b7 	bl	8002fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e5a:	e09b      	b.n	8002f94 <HAL_UART_IRQHandler+0x518>
 8002e5c:	080031cd 	.word	0x080031cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 808e 	beq.w	8002f98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8089 	beq.w	8002f98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002eaa:	647a      	str	r2, [r7, #68]	; 0x44
 8002eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eb2:	e841 2300 	strex	r3, r2, [r1]
 8002eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e3      	bne.n	8002e86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ee2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eea:	e841 2300 	strex	r3, r2, [r1]
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e3      	bne.n	8002ebe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0310 	bic.w	r3, r3, #16
 8002f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f28:	61fa      	str	r2, [r7, #28]
 8002f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	69b9      	ldr	r1, [r7, #24]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	e841 2300 	strex	r3, r2, [r1]
 8002f34:	617b      	str	r3, [r7, #20]
   return(result);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e3      	bne.n	8002f04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f83d 	bl	8002fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f4e:	e023      	b.n	8002f98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_UART_IRQHandler+0x4f4>
 8002f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f943 	bl	80031f4 <UART_Transmit_IT>
    return;
 8002f6e:	e014      	b.n	8002f9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00e      	beq.n	8002f9a <HAL_UART_IRQHandler+0x51e>
 8002f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f983 	bl	8003294 <UART_EndTransmit_IT>
    return;
 8002f8e:	e004      	b.n	8002f9a <HAL_UART_IRQHandler+0x51e>
    return;
 8002f90:	bf00      	nop
 8002f92:	e002      	b.n	8002f9a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f94:	bf00      	nop
 8002f96:	e000      	b.n	8002f9a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f98:	bf00      	nop
  }
}
 8002f9a:	37e8      	adds	r7, #232	; 0xe8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff0:	e03b      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d037      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffa:	f7fe f8bf 	bl	800117c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	6a3a      	ldr	r2, [r7, #32]
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <UART_WaitOnFlagUntilTimeout+0x30>
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e03a      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d023      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b80      	cmp	r3, #128	; 0x80
 8003026:	d020      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d01d      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d116      	bne.n	800306a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f857 	bl	8003106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2208      	movs	r2, #8
 800305c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e00f      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	429a      	cmp	r2, r3
 8003086:	d0b4      	beq.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	4613      	mov	r3, r2
 800309e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	88fa      	ldrh	r2, [r7, #6]
 80030aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2222      	movs	r2, #34	; 0x22
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0220 	orr.w	r2, r2, #32
 80030f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003106:	b480      	push	{r7}
 8003108:	b095      	sub	sp, #84	; 0x54
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800312e:	643a      	str	r2, [r7, #64]	; 0x40
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e5      	bne.n	800310e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3314      	adds	r3, #20
 8003148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	61fb      	str	r3, [r7, #28]
   return(result);
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	64bb      	str	r3, [r7, #72]	; 0x48
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e5      	bne.n	8003142 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	2b01      	cmp	r3, #1
 800317c:	d119      	bne.n	80031b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	330c      	adds	r3, #12
 8003184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	60bb      	str	r3, [r7, #8]
   return(result);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f023 0310 	bic.w	r3, r3, #16
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800319e:	61ba      	str	r2, [r7, #24]
 80031a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	e841 2300 	strex	r3, r2, [r1]
 80031aa:	613b      	str	r3, [r7, #16]
   return(result);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e5      	bne.n	800317e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031c0:	bf00      	nop
 80031c2:	3754      	adds	r7, #84	; 0x54
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff fee4 	bl	8002fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b21      	cmp	r3, #33	; 0x21
 8003206:	d13e      	bne.n	8003286 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003210:	d114      	bne.n	800323c <UART_Transmit_IT+0x48>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d110      	bne.n	800323c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	621a      	str	r2, [r3, #32]
 800323a:	e008      	b.n	800324e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	1c59      	adds	r1, r3, #1
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6211      	str	r1, [r2, #32]
 8003246:	781a      	ldrb	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29b      	uxth	r3, r3
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4619      	mov	r1, r3
 800325c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003270:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003280:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
  }
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fe73 	bl	8002fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08c      	sub	sp, #48	; 0x30
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b22      	cmp	r3, #34	; 0x22
 80032d6:	f040 80ae 	bne.w	8003436 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d117      	bne.n	8003314 <UART_Receive_IT+0x50>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d113      	bne.n	8003314 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003302:	b29a      	uxth	r2, r3
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	629a      	str	r2, [r3, #40]	; 0x28
 8003312:	e026      	b.n	8003362 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003326:	d007      	beq.n	8003338 <UART_Receive_IT+0x74>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <UART_Receive_IT+0x82>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d106      	bne.n	8003346 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e008      	b.n	8003358 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003352:	b2da      	uxtb	r2, r3
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29b      	uxth	r3, r3
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4619      	mov	r1, r3
 8003370:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003372:	2b00      	cmp	r3, #0
 8003374:	d15d      	bne.n	8003432 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0220 	bic.w	r2, r2, #32
 8003384:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003394:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d135      	bne.n	8003428 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	613b      	str	r3, [r7, #16]
   return(result);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f023 0310 	bic.w	r3, r3, #16
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	623a      	str	r2, [r7, #32]
 80033e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	69f9      	ldr	r1, [r7, #28]
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e5      	bne.n	80033c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b10      	cmp	r3, #16
 8003402:	d10a      	bne.n	800341a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fdd1 	bl	8002fc8 <HAL_UARTEx_RxEventCallback>
 8003426:	e002      	b.n	800342e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd f8af 	bl	800058c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e002      	b.n	8003438 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e000      	b.n	8003438 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003436:	2302      	movs	r3, #2
  }
}
 8003438:	4618      	mov	r0, r3
 800343a:	3730      	adds	r7, #48	; 0x30
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b0c0      	sub	sp, #256	; 0x100
 8003446:	af00      	add	r7, sp, #0
 8003448:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	68d9      	ldr	r1, [r3, #12]
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	ea40 0301 	orr.w	r3, r0, r1
 8003468:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	431a      	orrs	r2, r3
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	431a      	orrs	r2, r3
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003498:	f021 010c 	bic.w	r1, r1, #12
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034a6:	430b      	orrs	r3, r1
 80034a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	6999      	ldr	r1, [r3, #24]
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	ea40 0301 	orr.w	r3, r0, r1
 80034c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b8f      	ldr	r3, [pc, #572]	; (800370c <UART_SetConfig+0x2cc>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d005      	beq.n	80034e0 <UART_SetConfig+0xa0>
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b8d      	ldr	r3, [pc, #564]	; (8003710 <UART_SetConfig+0x2d0>)
 80034dc:	429a      	cmp	r2, r3
 80034de:	d104      	bne.n	80034ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034e0:	f7ff f920 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 80034e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034e8:	e003      	b.n	80034f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ea:	f7ff f907 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 80034ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fc:	f040 810c 	bne.w	8003718 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800350a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800350e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003512:	4622      	mov	r2, r4
 8003514:	462b      	mov	r3, r5
 8003516:	1891      	adds	r1, r2, r2
 8003518:	65b9      	str	r1, [r7, #88]	; 0x58
 800351a:	415b      	adcs	r3, r3
 800351c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800351e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003522:	4621      	mov	r1, r4
 8003524:	eb12 0801 	adds.w	r8, r2, r1
 8003528:	4629      	mov	r1, r5
 800352a:	eb43 0901 	adc.w	r9, r3, r1
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800353a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800353e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003542:	4690      	mov	r8, r2
 8003544:	4699      	mov	r9, r3
 8003546:	4623      	mov	r3, r4
 8003548:	eb18 0303 	adds.w	r3, r8, r3
 800354c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003550:	462b      	mov	r3, r5
 8003552:	eb49 0303 	adc.w	r3, r9, r3
 8003556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003566:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800356a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800356e:	460b      	mov	r3, r1
 8003570:	18db      	adds	r3, r3, r3
 8003572:	653b      	str	r3, [r7, #80]	; 0x50
 8003574:	4613      	mov	r3, r2
 8003576:	eb42 0303 	adc.w	r3, r2, r3
 800357a:	657b      	str	r3, [r7, #84]	; 0x54
 800357c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003580:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003584:	f7fc fe84 	bl	8000290 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4b61      	ldr	r3, [pc, #388]	; (8003714 <UART_SetConfig+0x2d4>)
 800358e:	fba3 2302 	umull	r2, r3, r3, r2
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	011c      	lsls	r4, r3, #4
 8003596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80035b0:	415b      	adcs	r3, r3
 80035b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035b8:	4641      	mov	r1, r8
 80035ba:	eb12 0a01 	adds.w	sl, r2, r1
 80035be:	4649      	mov	r1, r9
 80035c0:	eb43 0b01 	adc.w	fp, r3, r1
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d8:	4692      	mov	sl, r2
 80035da:	469b      	mov	fp, r3
 80035dc:	4643      	mov	r3, r8
 80035de:	eb1a 0303 	adds.w	r3, sl, r3
 80035e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035e6:	464b      	mov	r3, r9
 80035e8:	eb4b 0303 	adc.w	r3, fp, r3
 80035ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003600:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003604:	460b      	mov	r3, r1
 8003606:	18db      	adds	r3, r3, r3
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
 800360a:	4613      	mov	r3, r2
 800360c:	eb42 0303 	adc.w	r3, r2, r3
 8003610:	647b      	str	r3, [r7, #68]	; 0x44
 8003612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003616:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800361a:	f7fc fe39 	bl	8000290 <__aeabi_uldivmod>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4611      	mov	r1, r2
 8003624:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <UART_SetConfig+0x2d4>)
 8003626:	fba3 2301 	umull	r2, r3, r3, r1
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2264      	movs	r2, #100	; 0x64
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	1acb      	subs	r3, r1, r3
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <UART_SetConfig+0x2d4>)
 800363c:	fba3 2302 	umull	r2, r3, r3, r2
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003648:	441c      	add	r4, r3
 800364a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003654:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003658:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800365c:	4642      	mov	r2, r8
 800365e:	464b      	mov	r3, r9
 8003660:	1891      	adds	r1, r2, r2
 8003662:	63b9      	str	r1, [r7, #56]	; 0x38
 8003664:	415b      	adcs	r3, r3
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800366c:	4641      	mov	r1, r8
 800366e:	1851      	adds	r1, r2, r1
 8003670:	6339      	str	r1, [r7, #48]	; 0x30
 8003672:	4649      	mov	r1, r9
 8003674:	414b      	adcs	r3, r1
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003684:	4659      	mov	r1, fp
 8003686:	00cb      	lsls	r3, r1, #3
 8003688:	4651      	mov	r1, sl
 800368a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800368e:	4651      	mov	r1, sl
 8003690:	00ca      	lsls	r2, r1, #3
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	4603      	mov	r3, r0
 8003698:	4642      	mov	r2, r8
 800369a:	189b      	adds	r3, r3, r2
 800369c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036a0:	464b      	mov	r3, r9
 80036a2:	460a      	mov	r2, r1
 80036a4:	eb42 0303 	adc.w	r3, r2, r3
 80036a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036c0:	460b      	mov	r3, r1
 80036c2:	18db      	adds	r3, r3, r3
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c6:	4613      	mov	r3, r2
 80036c8:	eb42 0303 	adc.w	r3, r2, r3
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036d6:	f7fc fddb 	bl	8000290 <__aeabi_uldivmod>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <UART_SetConfig+0x2d4>)
 80036e0:	fba3 1302 	umull	r1, r3, r3, r2
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	2164      	movs	r1, #100	; 0x64
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	3332      	adds	r3, #50	; 0x32
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <UART_SetConfig+0x2d4>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	f003 0207 	and.w	r2, r3, #7
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4422      	add	r2, r4
 8003706:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003708:	e106      	b.n	8003918 <UART_SetConfig+0x4d8>
 800370a:	bf00      	nop
 800370c:	40011000 	.word	0x40011000
 8003710:	40011400 	.word	0x40011400
 8003714:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800371c:	2200      	movs	r2, #0
 800371e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003726:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800372a:	4642      	mov	r2, r8
 800372c:	464b      	mov	r3, r9
 800372e:	1891      	adds	r1, r2, r2
 8003730:	6239      	str	r1, [r7, #32]
 8003732:	415b      	adcs	r3, r3
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800373a:	4641      	mov	r1, r8
 800373c:	1854      	adds	r4, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb43 0501 	adc.w	r5, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	00eb      	lsls	r3, r5, #3
 800374e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003752:	00e2      	lsls	r2, r4, #3
 8003754:	4614      	mov	r4, r2
 8003756:	461d      	mov	r5, r3
 8003758:	4643      	mov	r3, r8
 800375a:	18e3      	adds	r3, r4, r3
 800375c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003760:	464b      	mov	r3, r9
 8003762:	eb45 0303 	adc.w	r3, r5, r3
 8003766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003776:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003786:	4629      	mov	r1, r5
 8003788:	008b      	lsls	r3, r1, #2
 800378a:	4621      	mov	r1, r4
 800378c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003790:	4621      	mov	r1, r4
 8003792:	008a      	lsls	r2, r1, #2
 8003794:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003798:	f7fc fd7a 	bl	8000290 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4b60      	ldr	r3, [pc, #384]	; (8003924 <UART_SetConfig+0x4e4>)
 80037a2:	fba3 2302 	umull	r2, r3, r3, r2
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	011c      	lsls	r4, r3, #4
 80037aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	1891      	adds	r1, r2, r2
 80037c2:	61b9      	str	r1, [r7, #24]
 80037c4:	415b      	adcs	r3, r3
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037cc:	4641      	mov	r1, r8
 80037ce:	1851      	adds	r1, r2, r1
 80037d0:	6139      	str	r1, [r7, #16]
 80037d2:	4649      	mov	r1, r9
 80037d4:	414b      	adcs	r3, r1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e4:	4659      	mov	r1, fp
 80037e6:	00cb      	lsls	r3, r1, #3
 80037e8:	4651      	mov	r1, sl
 80037ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ee:	4651      	mov	r1, sl
 80037f0:	00ca      	lsls	r2, r1, #3
 80037f2:	4610      	mov	r0, r2
 80037f4:	4619      	mov	r1, r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	4642      	mov	r2, r8
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003800:	464b      	mov	r3, r9
 8003802:	460a      	mov	r2, r1
 8003804:	eb42 0303 	adc.w	r3, r2, r3
 8003808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	67bb      	str	r3, [r7, #120]	; 0x78
 8003816:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003824:	4649      	mov	r1, r9
 8003826:	008b      	lsls	r3, r1, #2
 8003828:	4641      	mov	r1, r8
 800382a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800382e:	4641      	mov	r1, r8
 8003830:	008a      	lsls	r2, r1, #2
 8003832:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003836:	f7fc fd2b 	bl	8000290 <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4611      	mov	r1, r2
 8003840:	4b38      	ldr	r3, [pc, #224]	; (8003924 <UART_SetConfig+0x4e4>)
 8003842:	fba3 2301 	umull	r2, r3, r3, r1
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2264      	movs	r2, #100	; 0x64
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	1acb      	subs	r3, r1, r3
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	3332      	adds	r3, #50	; 0x32
 8003854:	4a33      	ldr	r2, [pc, #204]	; (8003924 <UART_SetConfig+0x4e4>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003860:	441c      	add	r4, r3
 8003862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003866:	2200      	movs	r2, #0
 8003868:	673b      	str	r3, [r7, #112]	; 0x70
 800386a:	677a      	str	r2, [r7, #116]	; 0x74
 800386c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003870:	4642      	mov	r2, r8
 8003872:	464b      	mov	r3, r9
 8003874:	1891      	adds	r1, r2, r2
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	415b      	adcs	r3, r3
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003880:	4641      	mov	r1, r8
 8003882:	1851      	adds	r1, r2, r1
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	4649      	mov	r1, r9
 8003888:	414b      	adcs	r3, r1
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003898:	4659      	mov	r1, fp
 800389a:	00cb      	lsls	r3, r1, #3
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a2:	4651      	mov	r1, sl
 80038a4:	00ca      	lsls	r2, r1, #3
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	4642      	mov	r2, r8
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b2:	464b      	mov	r3, r9
 80038b4:	460a      	mov	r2, r1
 80038b6:	eb42 0303 	adc.w	r3, r2, r3
 80038ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	663b      	str	r3, [r7, #96]	; 0x60
 80038c6:	667a      	str	r2, [r7, #100]	; 0x64
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038d4:	4649      	mov	r1, r9
 80038d6:	008b      	lsls	r3, r1, #2
 80038d8:	4641      	mov	r1, r8
 80038da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038de:	4641      	mov	r1, r8
 80038e0:	008a      	lsls	r2, r1, #2
 80038e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038e6:	f7fc fcd3 	bl	8000290 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <UART_SetConfig+0x4e4>)
 80038f0:	fba3 1302 	umull	r1, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2164      	movs	r1, #100	; 0x64
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	3332      	adds	r3, #50	; 0x32
 8003902:	4a08      	ldr	r2, [pc, #32]	; (8003924 <UART_SetConfig+0x4e4>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4422      	add	r2, r4
 8003916:	609a      	str	r2, [r3, #8]
}
 8003918:	bf00      	nop
 800391a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800391e:	46bd      	mov	sp, r7
 8003920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003924:	51eb851f 	.word	0x51eb851f

08003928 <malloc>:
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <malloc+0xc>)
 800392a:	4601      	mov	r1, r0
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	f000 b823 	b.w	8003978 <_malloc_r>
 8003932:	bf00      	nop
 8003934:	20000064 	.word	0x20000064

08003938 <sbrk_aligned>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4e0e      	ldr	r6, [pc, #56]	; (8003974 <sbrk_aligned+0x3c>)
 800393c:	460c      	mov	r4, r1
 800393e:	6831      	ldr	r1, [r6, #0]
 8003940:	4605      	mov	r5, r0
 8003942:	b911      	cbnz	r1, 800394a <sbrk_aligned+0x12>
 8003944:	f000 fbdc 	bl	8004100 <_sbrk_r>
 8003948:	6030      	str	r0, [r6, #0]
 800394a:	4621      	mov	r1, r4
 800394c:	4628      	mov	r0, r5
 800394e:	f000 fbd7 	bl	8004100 <_sbrk_r>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	d00a      	beq.n	800396c <sbrk_aligned+0x34>
 8003956:	1cc4      	adds	r4, r0, #3
 8003958:	f024 0403 	bic.w	r4, r4, #3
 800395c:	42a0      	cmp	r0, r4
 800395e:	d007      	beq.n	8003970 <sbrk_aligned+0x38>
 8003960:	1a21      	subs	r1, r4, r0
 8003962:	4628      	mov	r0, r5
 8003964:	f000 fbcc 	bl	8004100 <_sbrk_r>
 8003968:	3001      	adds	r0, #1
 800396a:	d101      	bne.n	8003970 <sbrk_aligned+0x38>
 800396c:	f04f 34ff 	mov.w	r4, #4294967295
 8003970:	4620      	mov	r0, r4
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	200002b4 	.word	0x200002b4

08003978 <_malloc_r>:
 8003978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800397c:	1ccd      	adds	r5, r1, #3
 800397e:	f025 0503 	bic.w	r5, r5, #3
 8003982:	3508      	adds	r5, #8
 8003984:	2d0c      	cmp	r5, #12
 8003986:	bf38      	it	cc
 8003988:	250c      	movcc	r5, #12
 800398a:	2d00      	cmp	r5, #0
 800398c:	4607      	mov	r7, r0
 800398e:	db01      	blt.n	8003994 <_malloc_r+0x1c>
 8003990:	42a9      	cmp	r1, r5
 8003992:	d905      	bls.n	80039a0 <_malloc_r+0x28>
 8003994:	230c      	movs	r3, #12
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	2600      	movs	r6, #0
 800399a:	4630      	mov	r0, r6
 800399c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a74 <_malloc_r+0xfc>
 80039a4:	f000 f868 	bl	8003a78 <__malloc_lock>
 80039a8:	f8d8 3000 	ldr.w	r3, [r8]
 80039ac:	461c      	mov	r4, r3
 80039ae:	bb5c      	cbnz	r4, 8003a08 <_malloc_r+0x90>
 80039b0:	4629      	mov	r1, r5
 80039b2:	4638      	mov	r0, r7
 80039b4:	f7ff ffc0 	bl	8003938 <sbrk_aligned>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	4604      	mov	r4, r0
 80039bc:	d155      	bne.n	8003a6a <_malloc_r+0xf2>
 80039be:	f8d8 4000 	ldr.w	r4, [r8]
 80039c2:	4626      	mov	r6, r4
 80039c4:	2e00      	cmp	r6, #0
 80039c6:	d145      	bne.n	8003a54 <_malloc_r+0xdc>
 80039c8:	2c00      	cmp	r4, #0
 80039ca:	d048      	beq.n	8003a5e <_malloc_r+0xe6>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	4631      	mov	r1, r6
 80039d0:	4638      	mov	r0, r7
 80039d2:	eb04 0903 	add.w	r9, r4, r3
 80039d6:	f000 fb93 	bl	8004100 <_sbrk_r>
 80039da:	4581      	cmp	r9, r0
 80039dc:	d13f      	bne.n	8003a5e <_malloc_r+0xe6>
 80039de:	6821      	ldr	r1, [r4, #0]
 80039e0:	1a6d      	subs	r5, r5, r1
 80039e2:	4629      	mov	r1, r5
 80039e4:	4638      	mov	r0, r7
 80039e6:	f7ff ffa7 	bl	8003938 <sbrk_aligned>
 80039ea:	3001      	adds	r0, #1
 80039ec:	d037      	beq.n	8003a5e <_malloc_r+0xe6>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	442b      	add	r3, r5
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	f8d8 3000 	ldr.w	r3, [r8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d038      	beq.n	8003a6e <_malloc_r+0xf6>
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	42a2      	cmp	r2, r4
 8003a00:	d12b      	bne.n	8003a5a <_malloc_r+0xe2>
 8003a02:	2200      	movs	r2, #0
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	e00f      	b.n	8003a28 <_malloc_r+0xb0>
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	1b52      	subs	r2, r2, r5
 8003a0c:	d41f      	bmi.n	8003a4e <_malloc_r+0xd6>
 8003a0e:	2a0b      	cmp	r2, #11
 8003a10:	d917      	bls.n	8003a42 <_malloc_r+0xca>
 8003a12:	1961      	adds	r1, r4, r5
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	6025      	str	r5, [r4, #0]
 8003a18:	bf18      	it	ne
 8003a1a:	6059      	strne	r1, [r3, #4]
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	bf08      	it	eq
 8003a20:	f8c8 1000 	streq.w	r1, [r8]
 8003a24:	5162      	str	r2, [r4, r5]
 8003a26:	604b      	str	r3, [r1, #4]
 8003a28:	4638      	mov	r0, r7
 8003a2a:	f104 060b 	add.w	r6, r4, #11
 8003a2e:	f000 f829 	bl	8003a84 <__malloc_unlock>
 8003a32:	f026 0607 	bic.w	r6, r6, #7
 8003a36:	1d23      	adds	r3, r4, #4
 8003a38:	1af2      	subs	r2, r6, r3
 8003a3a:	d0ae      	beq.n	800399a <_malloc_r+0x22>
 8003a3c:	1b9b      	subs	r3, r3, r6
 8003a3e:	50a3      	str	r3, [r4, r2]
 8003a40:	e7ab      	b.n	800399a <_malloc_r+0x22>
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	6862      	ldr	r2, [r4, #4]
 8003a46:	d1dd      	bne.n	8003a04 <_malloc_r+0x8c>
 8003a48:	f8c8 2000 	str.w	r2, [r8]
 8003a4c:	e7ec      	b.n	8003a28 <_malloc_r+0xb0>
 8003a4e:	4623      	mov	r3, r4
 8003a50:	6864      	ldr	r4, [r4, #4]
 8003a52:	e7ac      	b.n	80039ae <_malloc_r+0x36>
 8003a54:	4634      	mov	r4, r6
 8003a56:	6876      	ldr	r6, [r6, #4]
 8003a58:	e7b4      	b.n	80039c4 <_malloc_r+0x4c>
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	e7cc      	b.n	80039f8 <_malloc_r+0x80>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4638      	mov	r0, r7
 8003a64:	f000 f80e 	bl	8003a84 <__malloc_unlock>
 8003a68:	e797      	b.n	800399a <_malloc_r+0x22>
 8003a6a:	6025      	str	r5, [r4, #0]
 8003a6c:	e7dc      	b.n	8003a28 <_malloc_r+0xb0>
 8003a6e:	605b      	str	r3, [r3, #4]
 8003a70:	deff      	udf	#255	; 0xff
 8003a72:	bf00      	nop
 8003a74:	200002b0 	.word	0x200002b0

08003a78 <__malloc_lock>:
 8003a78:	4801      	ldr	r0, [pc, #4]	; (8003a80 <__malloc_lock+0x8>)
 8003a7a:	f000 bb8e 	b.w	800419a <__retarget_lock_acquire_recursive>
 8003a7e:	bf00      	nop
 8003a80:	200003f8 	.word	0x200003f8

08003a84 <__malloc_unlock>:
 8003a84:	4801      	ldr	r0, [pc, #4]	; (8003a8c <__malloc_unlock+0x8>)
 8003a86:	f000 bb89 	b.w	800419c <__retarget_lock_release_recursive>
 8003a8a:	bf00      	nop
 8003a8c:	200003f8 	.word	0x200003f8

08003a90 <std>:
 8003a90:	2300      	movs	r3, #0
 8003a92:	b510      	push	{r4, lr}
 8003a94:	4604      	mov	r4, r0
 8003a96:	e9c0 3300 	strd	r3, r3, [r0]
 8003a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a9e:	6083      	str	r3, [r0, #8]
 8003aa0:	8181      	strh	r1, [r0, #12]
 8003aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8003aa4:	81c2      	strh	r2, [r0, #14]
 8003aa6:	6183      	str	r3, [r0, #24]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	2208      	movs	r2, #8
 8003aac:	305c      	adds	r0, #92	; 0x5c
 8003aae:	f000 fac5 	bl	800403c <memset>
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <std+0x58>)
 8003ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <std+0x5c>)
 8003ab8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aba:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <std+0x60>)
 8003abc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <std+0x64>)
 8003ac0:	6323      	str	r3, [r4, #48]	; 0x30
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <std+0x68>)
 8003ac4:	6224      	str	r4, [r4, #32]
 8003ac6:	429c      	cmp	r4, r3
 8003ac8:	d006      	beq.n	8003ad8 <std+0x48>
 8003aca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003ace:	4294      	cmp	r4, r2
 8003ad0:	d002      	beq.n	8003ad8 <std+0x48>
 8003ad2:	33d0      	adds	r3, #208	; 0xd0
 8003ad4:	429c      	cmp	r4, r3
 8003ad6:	d105      	bne.n	8003ae4 <std+0x54>
 8003ad8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ae0:	f000 bb5a 	b.w	8004198 <__retarget_lock_init_recursive>
 8003ae4:	bd10      	pop	{r4, pc}
 8003ae6:	bf00      	nop
 8003ae8:	08003e8d 	.word	0x08003e8d
 8003aec:	08003eaf 	.word	0x08003eaf
 8003af0:	08003ee7 	.word	0x08003ee7
 8003af4:	08003f0b 	.word	0x08003f0b
 8003af8:	200002b8 	.word	0x200002b8

08003afc <stdio_exit_handler>:
 8003afc:	4a02      	ldr	r2, [pc, #8]	; (8003b08 <stdio_exit_handler+0xc>)
 8003afe:	4903      	ldr	r1, [pc, #12]	; (8003b0c <stdio_exit_handler+0x10>)
 8003b00:	4803      	ldr	r0, [pc, #12]	; (8003b10 <stdio_exit_handler+0x14>)
 8003b02:	f000 b869 	b.w	8003bd8 <_fwalk_sglue>
 8003b06:	bf00      	nop
 8003b08:	2000000c 	.word	0x2000000c
 8003b0c:	08004b9d 	.word	0x08004b9d
 8003b10:	20000018 	.word	0x20000018

08003b14 <cleanup_stdio>:
 8003b14:	6841      	ldr	r1, [r0, #4]
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <cleanup_stdio+0x34>)
 8003b18:	4299      	cmp	r1, r3
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	d001      	beq.n	8003b24 <cleanup_stdio+0x10>
 8003b20:	f001 f83c 	bl	8004b9c <_fflush_r>
 8003b24:	68a1      	ldr	r1, [r4, #8]
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <cleanup_stdio+0x38>)
 8003b28:	4299      	cmp	r1, r3
 8003b2a:	d002      	beq.n	8003b32 <cleanup_stdio+0x1e>
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f001 f835 	bl	8004b9c <_fflush_r>
 8003b32:	68e1      	ldr	r1, [r4, #12]
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <cleanup_stdio+0x3c>)
 8003b36:	4299      	cmp	r1, r3
 8003b38:	d004      	beq.n	8003b44 <cleanup_stdio+0x30>
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b40:	f001 b82c 	b.w	8004b9c <_fflush_r>
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	bf00      	nop
 8003b48:	200002b8 	.word	0x200002b8
 8003b4c:	20000320 	.word	0x20000320
 8003b50:	20000388 	.word	0x20000388

08003b54 <global_stdio_init.part.0>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <global_stdio_init.part.0+0x30>)
 8003b58:	4c0b      	ldr	r4, [pc, #44]	; (8003b88 <global_stdio_init.part.0+0x34>)
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <global_stdio_init.part.0+0x38>)
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	4620      	mov	r0, r4
 8003b60:	2200      	movs	r2, #0
 8003b62:	2104      	movs	r1, #4
 8003b64:	f7ff ff94 	bl	8003a90 <std>
 8003b68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	2109      	movs	r1, #9
 8003b70:	f7ff ff8e 	bl	8003a90 <std>
 8003b74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b78:	2202      	movs	r2, #2
 8003b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b7e:	2112      	movs	r1, #18
 8003b80:	f7ff bf86 	b.w	8003a90 <std>
 8003b84:	200003f0 	.word	0x200003f0
 8003b88:	200002b8 	.word	0x200002b8
 8003b8c:	08003afd 	.word	0x08003afd

08003b90 <__sfp_lock_acquire>:
 8003b90:	4801      	ldr	r0, [pc, #4]	; (8003b98 <__sfp_lock_acquire+0x8>)
 8003b92:	f000 bb02 	b.w	800419a <__retarget_lock_acquire_recursive>
 8003b96:	bf00      	nop
 8003b98:	200003f9 	.word	0x200003f9

08003b9c <__sfp_lock_release>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <__sfp_lock_release+0x8>)
 8003b9e:	f000 bafd 	b.w	800419c <__retarget_lock_release_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	200003f9 	.word	0x200003f9

08003ba8 <__sinit>:
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	4604      	mov	r4, r0
 8003bac:	f7ff fff0 	bl	8003b90 <__sfp_lock_acquire>
 8003bb0:	6a23      	ldr	r3, [r4, #32]
 8003bb2:	b11b      	cbz	r3, 8003bbc <__sinit+0x14>
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb8:	f7ff bff0 	b.w	8003b9c <__sfp_lock_release>
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <__sinit+0x28>)
 8003bbe:	6223      	str	r3, [r4, #32]
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <__sinit+0x2c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f5      	bne.n	8003bb4 <__sinit+0xc>
 8003bc8:	f7ff ffc4 	bl	8003b54 <global_stdio_init.part.0>
 8003bcc:	e7f2      	b.n	8003bb4 <__sinit+0xc>
 8003bce:	bf00      	nop
 8003bd0:	08003b15 	.word	0x08003b15
 8003bd4:	200003f0 	.word	0x200003f0

08003bd8 <_fwalk_sglue>:
 8003bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bdc:	4607      	mov	r7, r0
 8003bde:	4688      	mov	r8, r1
 8003be0:	4614      	mov	r4, r2
 8003be2:	2600      	movs	r6, #0
 8003be4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003be8:	f1b9 0901 	subs.w	r9, r9, #1
 8003bec:	d505      	bpl.n	8003bfa <_fwalk_sglue+0x22>
 8003bee:	6824      	ldr	r4, [r4, #0]
 8003bf0:	2c00      	cmp	r4, #0
 8003bf2:	d1f7      	bne.n	8003be4 <_fwalk_sglue+0xc>
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bfa:	89ab      	ldrh	r3, [r5, #12]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d907      	bls.n	8003c10 <_fwalk_sglue+0x38>
 8003c00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c04:	3301      	adds	r3, #1
 8003c06:	d003      	beq.n	8003c10 <_fwalk_sglue+0x38>
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	47c0      	blx	r8
 8003c0e:	4306      	orrs	r6, r0
 8003c10:	3568      	adds	r5, #104	; 0x68
 8003c12:	e7e9      	b.n	8003be8 <_fwalk_sglue+0x10>

08003c14 <iprintf>:
 8003c14:	b40f      	push	{r0, r1, r2, r3}
 8003c16:	b507      	push	{r0, r1, r2, lr}
 8003c18:	4906      	ldr	r1, [pc, #24]	; (8003c34 <iprintf+0x20>)
 8003c1a:	ab04      	add	r3, sp, #16
 8003c1c:	6808      	ldr	r0, [r1, #0]
 8003c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c22:	6881      	ldr	r1, [r0, #8]
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	f000 fc89 	bl	800453c <_vfiprintf_r>
 8003c2a:	b003      	add	sp, #12
 8003c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c30:	b004      	add	sp, #16
 8003c32:	4770      	bx	lr
 8003c34:	20000064 	.word	0x20000064

08003c38 <_puts_r>:
 8003c38:	6a03      	ldr	r3, [r0, #32]
 8003c3a:	b570      	push	{r4, r5, r6, lr}
 8003c3c:	6884      	ldr	r4, [r0, #8]
 8003c3e:	4605      	mov	r5, r0
 8003c40:	460e      	mov	r6, r1
 8003c42:	b90b      	cbnz	r3, 8003c48 <_puts_r+0x10>
 8003c44:	f7ff ffb0 	bl	8003ba8 <__sinit>
 8003c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c4a:	07db      	lsls	r3, r3, #31
 8003c4c:	d405      	bmi.n	8003c5a <_puts_r+0x22>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	0598      	lsls	r0, r3, #22
 8003c52:	d402      	bmi.n	8003c5a <_puts_r+0x22>
 8003c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c56:	f000 faa0 	bl	800419a <__retarget_lock_acquire_recursive>
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	0719      	lsls	r1, r3, #28
 8003c5e:	d513      	bpl.n	8003c88 <_puts_r+0x50>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	b18b      	cbz	r3, 8003c88 <_puts_r+0x50>
 8003c64:	3e01      	subs	r6, #1
 8003c66:	68a3      	ldr	r3, [r4, #8]
 8003c68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	60a3      	str	r3, [r4, #8]
 8003c70:	b9e9      	cbnz	r1, 8003cae <_puts_r+0x76>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da2e      	bge.n	8003cd4 <_puts_r+0x9c>
 8003c76:	4622      	mov	r2, r4
 8003c78:	210a      	movs	r1, #10
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f000 f949 	bl	8003f12 <__swbuf_r>
 8003c80:	3001      	adds	r0, #1
 8003c82:	d007      	beq.n	8003c94 <_puts_r+0x5c>
 8003c84:	250a      	movs	r5, #10
 8003c86:	e007      	b.n	8003c98 <_puts_r+0x60>
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f000 f97e 	bl	8003f8c <__swsetup_r>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d0e7      	beq.n	8003c64 <_puts_r+0x2c>
 8003c94:	f04f 35ff 	mov.w	r5, #4294967295
 8003c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c9a:	07da      	lsls	r2, r3, #31
 8003c9c:	d405      	bmi.n	8003caa <_puts_r+0x72>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	059b      	lsls	r3, r3, #22
 8003ca2:	d402      	bmi.n	8003caa <_puts_r+0x72>
 8003ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ca6:	f000 fa79 	bl	800419c <__retarget_lock_release_recursive>
 8003caa:	4628      	mov	r0, r5
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	da04      	bge.n	8003cbc <_puts_r+0x84>
 8003cb2:	69a2      	ldr	r2, [r4, #24]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	dc06      	bgt.n	8003cc6 <_puts_r+0x8e>
 8003cb8:	290a      	cmp	r1, #10
 8003cba:	d004      	beq.n	8003cc6 <_puts_r+0x8e>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	6022      	str	r2, [r4, #0]
 8003cc2:	7019      	strb	r1, [r3, #0]
 8003cc4:	e7cf      	b.n	8003c66 <_puts_r+0x2e>
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 f922 	bl	8003f12 <__swbuf_r>
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d1c9      	bne.n	8003c66 <_puts_r+0x2e>
 8003cd2:	e7df      	b.n	8003c94 <_puts_r+0x5c>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	250a      	movs	r5, #10
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	6022      	str	r2, [r4, #0]
 8003cdc:	701d      	strb	r5, [r3, #0]
 8003cde:	e7db      	b.n	8003c98 <_puts_r+0x60>

08003ce0 <puts>:
 8003ce0:	4b02      	ldr	r3, [pc, #8]	; (8003cec <puts+0xc>)
 8003ce2:	4601      	mov	r1, r0
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	f7ff bfa7 	b.w	8003c38 <_puts_r>
 8003cea:	bf00      	nop
 8003cec:	20000064 	.word	0x20000064

08003cf0 <setvbuf>:
 8003cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003cf4:	461d      	mov	r5, r3
 8003cf6:	4b54      	ldr	r3, [pc, #336]	; (8003e48 <setvbuf+0x158>)
 8003cf8:	681f      	ldr	r7, [r3, #0]
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	460e      	mov	r6, r1
 8003cfe:	4690      	mov	r8, r2
 8003d00:	b127      	cbz	r7, 8003d0c <setvbuf+0x1c>
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	b913      	cbnz	r3, 8003d0c <setvbuf+0x1c>
 8003d06:	4638      	mov	r0, r7
 8003d08:	f7ff ff4e 	bl	8003ba8 <__sinit>
 8003d0c:	f1b8 0f02 	cmp.w	r8, #2
 8003d10:	d006      	beq.n	8003d20 <setvbuf+0x30>
 8003d12:	f1b8 0f01 	cmp.w	r8, #1
 8003d16:	f200 8094 	bhi.w	8003e42 <setvbuf+0x152>
 8003d1a:	2d00      	cmp	r5, #0
 8003d1c:	f2c0 8091 	blt.w	8003e42 <setvbuf+0x152>
 8003d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d22:	07da      	lsls	r2, r3, #31
 8003d24:	d405      	bmi.n	8003d32 <setvbuf+0x42>
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	059b      	lsls	r3, r3, #22
 8003d2a:	d402      	bmi.n	8003d32 <setvbuf+0x42>
 8003d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d2e:	f000 fa34 	bl	800419a <__retarget_lock_acquire_recursive>
 8003d32:	4621      	mov	r1, r4
 8003d34:	4638      	mov	r0, r7
 8003d36:	f000 ff31 	bl	8004b9c <_fflush_r>
 8003d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d3c:	b141      	cbz	r1, 8003d50 <setvbuf+0x60>
 8003d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d42:	4299      	cmp	r1, r3
 8003d44:	d002      	beq.n	8003d4c <setvbuf+0x5c>
 8003d46:	4638      	mov	r0, r7
 8003d48:	f000 fa2a 	bl	80041a0 <_free_r>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8003d50:	2300      	movs	r3, #0
 8003d52:	61a3      	str	r3, [r4, #24]
 8003d54:	6063      	str	r3, [r4, #4]
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	0618      	lsls	r0, r3, #24
 8003d5a:	d503      	bpl.n	8003d64 <setvbuf+0x74>
 8003d5c:	6921      	ldr	r1, [r4, #16]
 8003d5e:	4638      	mov	r0, r7
 8003d60:	f000 fa1e 	bl	80041a0 <_free_r>
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	f1b8 0f02 	cmp.w	r8, #2
 8003d72:	81a3      	strh	r3, [r4, #12]
 8003d74:	d05f      	beq.n	8003e36 <setvbuf+0x146>
 8003d76:	ab01      	add	r3, sp, #4
 8003d78:	466a      	mov	r2, sp
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	f000 ff35 	bl	8004bec <__swhatbuf_r>
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	4318      	orrs	r0, r3
 8003d86:	81a0      	strh	r0, [r4, #12]
 8003d88:	bb2d      	cbnz	r5, 8003dd6 <setvbuf+0xe6>
 8003d8a:	9d00      	ldr	r5, [sp, #0]
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f7ff fdcb 	bl	8003928 <malloc>
 8003d92:	4606      	mov	r6, r0
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d150      	bne.n	8003e3a <setvbuf+0x14a>
 8003d98:	f8dd 9000 	ldr.w	r9, [sp]
 8003d9c:	45a9      	cmp	r9, r5
 8003d9e:	d13e      	bne.n	8003e1e <setvbuf+0x12e>
 8003da0:	f04f 35ff 	mov.w	r5, #4294967295
 8003da4:	2200      	movs	r2, #0
 8003da6:	60a2      	str	r2, [r4, #8]
 8003da8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003dac:	6022      	str	r2, [r4, #0]
 8003dae:	6122      	str	r2, [r4, #16]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003db6:	6162      	str	r2, [r4, #20]
 8003db8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	07d1      	lsls	r1, r2, #31
 8003dc0:	81a3      	strh	r3, [r4, #12]
 8003dc2:	d404      	bmi.n	8003dce <setvbuf+0xde>
 8003dc4:	059b      	lsls	r3, r3, #22
 8003dc6:	d402      	bmi.n	8003dce <setvbuf+0xde>
 8003dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dca:	f000 f9e7 	bl	800419c <__retarget_lock_release_recursive>
 8003dce:	4628      	mov	r0, r5
 8003dd0:	b003      	add	sp, #12
 8003dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dd6:	2e00      	cmp	r6, #0
 8003dd8:	d0d8      	beq.n	8003d8c <setvbuf+0x9c>
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	b913      	cbnz	r3, 8003de4 <setvbuf+0xf4>
 8003dde:	4638      	mov	r0, r7
 8003de0:	f7ff fee2 	bl	8003ba8 <__sinit>
 8003de4:	f1b8 0f01 	cmp.w	r8, #1
 8003de8:	bf08      	it	eq
 8003dea:	89a3      	ldrheq	r3, [r4, #12]
 8003dec:	6026      	str	r6, [r4, #0]
 8003dee:	bf04      	itt	eq
 8003df0:	f043 0301 	orreq.w	r3, r3, #1
 8003df4:	81a3      	strheq	r3, [r4, #12]
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	f013 0208 	ands.w	r2, r3, #8
 8003dfc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003e00:	d01d      	beq.n	8003e3e <setvbuf+0x14e>
 8003e02:	07da      	lsls	r2, r3, #31
 8003e04:	bf41      	itttt	mi
 8003e06:	2200      	movmi	r2, #0
 8003e08:	426d      	negmi	r5, r5
 8003e0a:	60a2      	strmi	r2, [r4, #8]
 8003e0c:	61a5      	strmi	r5, [r4, #24]
 8003e0e:	bf58      	it	pl
 8003e10:	60a5      	strpl	r5, [r4, #8]
 8003e12:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003e14:	f015 0501 	ands.w	r5, r5, #1
 8003e18:	d0d4      	beq.n	8003dc4 <setvbuf+0xd4>
 8003e1a:	2500      	movs	r5, #0
 8003e1c:	e7d7      	b.n	8003dce <setvbuf+0xde>
 8003e1e:	4648      	mov	r0, r9
 8003e20:	f7ff fd82 	bl	8003928 <malloc>
 8003e24:	4606      	mov	r6, r0
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d0ba      	beq.n	8003da0 <setvbuf+0xb0>
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e30:	81a3      	strh	r3, [r4, #12]
 8003e32:	464d      	mov	r5, r9
 8003e34:	e7d1      	b.n	8003dda <setvbuf+0xea>
 8003e36:	2500      	movs	r5, #0
 8003e38:	e7b4      	b.n	8003da4 <setvbuf+0xb4>
 8003e3a:	46a9      	mov	r9, r5
 8003e3c:	e7f5      	b.n	8003e2a <setvbuf+0x13a>
 8003e3e:	60a2      	str	r2, [r4, #8]
 8003e40:	e7e7      	b.n	8003e12 <setvbuf+0x122>
 8003e42:	f04f 35ff 	mov.w	r5, #4294967295
 8003e46:	e7c2      	b.n	8003dce <setvbuf+0xde>
 8003e48:	20000064 	.word	0x20000064

08003e4c <siprintf>:
 8003e4c:	b40e      	push	{r1, r2, r3}
 8003e4e:	b500      	push	{lr}
 8003e50:	b09c      	sub	sp, #112	; 0x70
 8003e52:	ab1d      	add	r3, sp, #116	; 0x74
 8003e54:	9002      	str	r0, [sp, #8]
 8003e56:	9006      	str	r0, [sp, #24]
 8003e58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e5c:	4809      	ldr	r0, [pc, #36]	; (8003e84 <siprintf+0x38>)
 8003e5e:	9107      	str	r1, [sp, #28]
 8003e60:	9104      	str	r1, [sp, #16]
 8003e62:	4909      	ldr	r1, [pc, #36]	; (8003e88 <siprintf+0x3c>)
 8003e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e68:	9105      	str	r1, [sp, #20]
 8003e6a:	6800      	ldr	r0, [r0, #0]
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	a902      	add	r1, sp, #8
 8003e70:	f000 fa3c 	bl	80042ec <_svfiprintf_r>
 8003e74:	9b02      	ldr	r3, [sp, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	b01c      	add	sp, #112	; 0x70
 8003e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e80:	b003      	add	sp, #12
 8003e82:	4770      	bx	lr
 8003e84:	20000064 	.word	0x20000064
 8003e88:	ffff0208 	.word	0xffff0208

08003e8c <__sread>:
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	460c      	mov	r4, r1
 8003e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e94:	f000 f922 	bl	80040dc <_read_r>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	bfab      	itete	ge
 8003e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003ea0:	181b      	addge	r3, r3, r0
 8003ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ea6:	bfac      	ite	ge
 8003ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eaa:	81a3      	strhlt	r3, [r4, #12]
 8003eac:	bd10      	pop	{r4, pc}

08003eae <__swrite>:
 8003eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb2:	461f      	mov	r7, r3
 8003eb4:	898b      	ldrh	r3, [r1, #12]
 8003eb6:	05db      	lsls	r3, r3, #23
 8003eb8:	4605      	mov	r5, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4616      	mov	r6, r2
 8003ebe:	d505      	bpl.n	8003ecc <__swrite+0x1e>
 8003ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f000 f8f6 	bl	80040b8 <_lseek_r>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	4632      	mov	r2, r6
 8003eda:	463b      	mov	r3, r7
 8003edc:	4628      	mov	r0, r5
 8003ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee2:	f000 b91d 	b.w	8004120 <_write_r>

08003ee6 <__sseek>:
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	460c      	mov	r4, r1
 8003eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eee:	f000 f8e3 	bl	80040b8 <_lseek_r>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	bf15      	itete	ne
 8003ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f02:	81a3      	strheq	r3, [r4, #12]
 8003f04:	bf18      	it	ne
 8003f06:	81a3      	strhne	r3, [r4, #12]
 8003f08:	bd10      	pop	{r4, pc}

08003f0a <__sclose>:
 8003f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0e:	f000 b8c3 	b.w	8004098 <_close_r>

08003f12 <__swbuf_r>:
 8003f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f14:	460e      	mov	r6, r1
 8003f16:	4614      	mov	r4, r2
 8003f18:	4605      	mov	r5, r0
 8003f1a:	b118      	cbz	r0, 8003f24 <__swbuf_r+0x12>
 8003f1c:	6a03      	ldr	r3, [r0, #32]
 8003f1e:	b90b      	cbnz	r3, 8003f24 <__swbuf_r+0x12>
 8003f20:	f7ff fe42 	bl	8003ba8 <__sinit>
 8003f24:	69a3      	ldr	r3, [r4, #24]
 8003f26:	60a3      	str	r3, [r4, #8]
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	071a      	lsls	r2, r3, #28
 8003f2c:	d525      	bpl.n	8003f7a <__swbuf_r+0x68>
 8003f2e:	6923      	ldr	r3, [r4, #16]
 8003f30:	b31b      	cbz	r3, 8003f7a <__swbuf_r+0x68>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	6922      	ldr	r2, [r4, #16]
 8003f36:	1a98      	subs	r0, r3, r2
 8003f38:	6963      	ldr	r3, [r4, #20]
 8003f3a:	b2f6      	uxtb	r6, r6
 8003f3c:	4283      	cmp	r3, r0
 8003f3e:	4637      	mov	r7, r6
 8003f40:	dc04      	bgt.n	8003f4c <__swbuf_r+0x3a>
 8003f42:	4621      	mov	r1, r4
 8003f44:	4628      	mov	r0, r5
 8003f46:	f000 fe29 	bl	8004b9c <_fflush_r>
 8003f4a:	b9e0      	cbnz	r0, 8003f86 <__swbuf_r+0x74>
 8003f4c:	68a3      	ldr	r3, [r4, #8]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	60a3      	str	r3, [r4, #8]
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	6022      	str	r2, [r4, #0]
 8003f58:	701e      	strb	r6, [r3, #0]
 8003f5a:	6962      	ldr	r2, [r4, #20]
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d004      	beq.n	8003f6c <__swbuf_r+0x5a>
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	07db      	lsls	r3, r3, #31
 8003f66:	d506      	bpl.n	8003f76 <__swbuf_r+0x64>
 8003f68:	2e0a      	cmp	r6, #10
 8003f6a:	d104      	bne.n	8003f76 <__swbuf_r+0x64>
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f000 fe14 	bl	8004b9c <_fflush_r>
 8003f74:	b938      	cbnz	r0, 8003f86 <__swbuf_r+0x74>
 8003f76:	4638      	mov	r0, r7
 8003f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f000 f805 	bl	8003f8c <__swsetup_r>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d0d5      	beq.n	8003f32 <__swbuf_r+0x20>
 8003f86:	f04f 37ff 	mov.w	r7, #4294967295
 8003f8a:	e7f4      	b.n	8003f76 <__swbuf_r+0x64>

08003f8c <__swsetup_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <__swsetup_r+0xac>)
 8003f90:	4605      	mov	r5, r0
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	460c      	mov	r4, r1
 8003f96:	b118      	cbz	r0, 8003fa0 <__swsetup_r+0x14>
 8003f98:	6a03      	ldr	r3, [r0, #32]
 8003f9a:	b90b      	cbnz	r3, 8003fa0 <__swsetup_r+0x14>
 8003f9c:	f7ff fe04 	bl	8003ba8 <__sinit>
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fa6:	0718      	lsls	r0, r3, #28
 8003fa8:	d422      	bmi.n	8003ff0 <__swsetup_r+0x64>
 8003faa:	06d9      	lsls	r1, r3, #27
 8003fac:	d407      	bmi.n	8003fbe <__swsetup_r+0x32>
 8003fae:	2309      	movs	r3, #9
 8003fb0:	602b      	str	r3, [r5, #0]
 8003fb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fb6:	81a3      	strh	r3, [r4, #12]
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	e034      	b.n	8004028 <__swsetup_r+0x9c>
 8003fbe:	0758      	lsls	r0, r3, #29
 8003fc0:	d512      	bpl.n	8003fe8 <__swsetup_r+0x5c>
 8003fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fc4:	b141      	cbz	r1, 8003fd8 <__swsetup_r+0x4c>
 8003fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fca:	4299      	cmp	r1, r3
 8003fcc:	d002      	beq.n	8003fd4 <__swsetup_r+0x48>
 8003fce:	4628      	mov	r0, r5
 8003fd0:	f000 f8e6 	bl	80041a0 <_free_r>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	6363      	str	r3, [r4, #52]	; 0x34
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fde:	81a3      	strh	r3, [r4, #12]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6063      	str	r3, [r4, #4]
 8003fe4:	6923      	ldr	r3, [r4, #16]
 8003fe6:	6023      	str	r3, [r4, #0]
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	f043 0308 	orr.w	r3, r3, #8
 8003fee:	81a3      	strh	r3, [r4, #12]
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	b94b      	cbnz	r3, 8004008 <__swsetup_r+0x7c>
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffe:	d003      	beq.n	8004008 <__swsetup_r+0x7c>
 8004000:	4621      	mov	r1, r4
 8004002:	4628      	mov	r0, r5
 8004004:	f000 fe18 	bl	8004c38 <__smakebuf_r>
 8004008:	89a0      	ldrh	r0, [r4, #12]
 800400a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800400e:	f010 0301 	ands.w	r3, r0, #1
 8004012:	d00a      	beq.n	800402a <__swsetup_r+0x9e>
 8004014:	2300      	movs	r3, #0
 8004016:	60a3      	str	r3, [r4, #8]
 8004018:	6963      	ldr	r3, [r4, #20]
 800401a:	425b      	negs	r3, r3
 800401c:	61a3      	str	r3, [r4, #24]
 800401e:	6923      	ldr	r3, [r4, #16]
 8004020:	b943      	cbnz	r3, 8004034 <__swsetup_r+0xa8>
 8004022:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004026:	d1c4      	bne.n	8003fb2 <__swsetup_r+0x26>
 8004028:	bd38      	pop	{r3, r4, r5, pc}
 800402a:	0781      	lsls	r1, r0, #30
 800402c:	bf58      	it	pl
 800402e:	6963      	ldrpl	r3, [r4, #20]
 8004030:	60a3      	str	r3, [r4, #8]
 8004032:	e7f4      	b.n	800401e <__swsetup_r+0x92>
 8004034:	2000      	movs	r0, #0
 8004036:	e7f7      	b.n	8004028 <__swsetup_r+0x9c>
 8004038:	20000064 	.word	0x20000064

0800403c <memset>:
 800403c:	4402      	add	r2, r0
 800403e:	4603      	mov	r3, r0
 8004040:	4293      	cmp	r3, r2
 8004042:	d100      	bne.n	8004046 <memset+0xa>
 8004044:	4770      	bx	lr
 8004046:	f803 1b01 	strb.w	r1, [r3], #1
 800404a:	e7f9      	b.n	8004040 <memset+0x4>

0800404c <strncmp>:
 800404c:	b510      	push	{r4, lr}
 800404e:	b16a      	cbz	r2, 800406c <strncmp+0x20>
 8004050:	3901      	subs	r1, #1
 8004052:	1884      	adds	r4, r0, r2
 8004054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004058:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800405c:	429a      	cmp	r2, r3
 800405e:	d103      	bne.n	8004068 <strncmp+0x1c>
 8004060:	42a0      	cmp	r0, r4
 8004062:	d001      	beq.n	8004068 <strncmp+0x1c>
 8004064:	2a00      	cmp	r2, #0
 8004066:	d1f5      	bne.n	8004054 <strncmp+0x8>
 8004068:	1ad0      	subs	r0, r2, r3
 800406a:	bd10      	pop	{r4, pc}
 800406c:	4610      	mov	r0, r2
 800406e:	e7fc      	b.n	800406a <strncmp+0x1e>

08004070 <strncpy>:
 8004070:	b510      	push	{r4, lr}
 8004072:	3901      	subs	r1, #1
 8004074:	4603      	mov	r3, r0
 8004076:	b132      	cbz	r2, 8004086 <strncpy+0x16>
 8004078:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800407c:	f803 4b01 	strb.w	r4, [r3], #1
 8004080:	3a01      	subs	r2, #1
 8004082:	2c00      	cmp	r4, #0
 8004084:	d1f7      	bne.n	8004076 <strncpy+0x6>
 8004086:	441a      	add	r2, r3
 8004088:	2100      	movs	r1, #0
 800408a:	4293      	cmp	r3, r2
 800408c:	d100      	bne.n	8004090 <strncpy+0x20>
 800408e:	bd10      	pop	{r4, pc}
 8004090:	f803 1b01 	strb.w	r1, [r3], #1
 8004094:	e7f9      	b.n	800408a <strncpy+0x1a>
	...

08004098 <_close_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4d06      	ldr	r5, [pc, #24]	; (80040b4 <_close_r+0x1c>)
 800409c:	2300      	movs	r3, #0
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	f7fc ff5d 	bl	8000f62 <_close>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_close_r+0x1a>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_close_r+0x1a>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	200003f4 	.word	0x200003f4

080040b8 <_lseek_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4d07      	ldr	r5, [pc, #28]	; (80040d8 <_lseek_r+0x20>)
 80040bc:	4604      	mov	r4, r0
 80040be:	4608      	mov	r0, r1
 80040c0:	4611      	mov	r1, r2
 80040c2:	2200      	movs	r2, #0
 80040c4:	602a      	str	r2, [r5, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f7fc ff72 	bl	8000fb0 <_lseek>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_lseek_r+0x1e>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_lseek_r+0x1e>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	200003f4 	.word	0x200003f4

080040dc <_read_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4d07      	ldr	r5, [pc, #28]	; (80040fc <_read_r+0x20>)
 80040e0:	4604      	mov	r4, r0
 80040e2:	4608      	mov	r0, r1
 80040e4:	4611      	mov	r1, r2
 80040e6:	2200      	movs	r2, #0
 80040e8:	602a      	str	r2, [r5, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f7fc ff00 	bl	8000ef0 <_read>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_read_r+0x1e>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_read_r+0x1e>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	200003f4 	.word	0x200003f4

08004100 <_sbrk_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d06      	ldr	r5, [pc, #24]	; (800411c <_sbrk_r+0x1c>)
 8004104:	2300      	movs	r3, #0
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	602b      	str	r3, [r5, #0]
 800410c:	f7fc ff5e 	bl	8000fcc <_sbrk>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_sbrk_r+0x1a>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_sbrk_r+0x1a>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	200003f4 	.word	0x200003f4

08004120 <_write_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4d07      	ldr	r5, [pc, #28]	; (8004140 <_write_r+0x20>)
 8004124:	4604      	mov	r4, r0
 8004126:	4608      	mov	r0, r1
 8004128:	4611      	mov	r1, r2
 800412a:	2200      	movs	r2, #0
 800412c:	602a      	str	r2, [r5, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	f7fc fefb 	bl	8000f2a <_write>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_write_r+0x1e>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_write_r+0x1e>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	200003f4 	.word	0x200003f4

08004144 <__errno>:
 8004144:	4b01      	ldr	r3, [pc, #4]	; (800414c <__errno+0x8>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000064 	.word	0x20000064

08004150 <__libc_init_array>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	4d0d      	ldr	r5, [pc, #52]	; (8004188 <__libc_init_array+0x38>)
 8004154:	4c0d      	ldr	r4, [pc, #52]	; (800418c <__libc_init_array+0x3c>)
 8004156:	1b64      	subs	r4, r4, r5
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	2600      	movs	r6, #0
 800415c:	42a6      	cmp	r6, r4
 800415e:	d109      	bne.n	8004174 <__libc_init_array+0x24>
 8004160:	4d0b      	ldr	r5, [pc, #44]	; (8004190 <__libc_init_array+0x40>)
 8004162:	4c0c      	ldr	r4, [pc, #48]	; (8004194 <__libc_init_array+0x44>)
 8004164:	f000 fe26 	bl	8004db4 <_init>
 8004168:	1b64      	subs	r4, r4, r5
 800416a:	10a4      	asrs	r4, r4, #2
 800416c:	2600      	movs	r6, #0
 800416e:	42a6      	cmp	r6, r4
 8004170:	d105      	bne.n	800417e <__libc_init_array+0x2e>
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	f855 3b04 	ldr.w	r3, [r5], #4
 8004178:	4798      	blx	r3
 800417a:	3601      	adds	r6, #1
 800417c:	e7ee      	b.n	800415c <__libc_init_array+0xc>
 800417e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004182:	4798      	blx	r3
 8004184:	3601      	adds	r6, #1
 8004186:	e7f2      	b.n	800416e <__libc_init_array+0x1e>
 8004188:	08004e90 	.word	0x08004e90
 800418c:	08004e90 	.word	0x08004e90
 8004190:	08004e90 	.word	0x08004e90
 8004194:	08004e94 	.word	0x08004e94

08004198 <__retarget_lock_init_recursive>:
 8004198:	4770      	bx	lr

0800419a <__retarget_lock_acquire_recursive>:
 800419a:	4770      	bx	lr

0800419c <__retarget_lock_release_recursive>:
 800419c:	4770      	bx	lr
	...

080041a0 <_free_r>:
 80041a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041a2:	2900      	cmp	r1, #0
 80041a4:	d044      	beq.n	8004230 <_free_r+0x90>
 80041a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041aa:	9001      	str	r0, [sp, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f1a1 0404 	sub.w	r4, r1, #4
 80041b2:	bfb8      	it	lt
 80041b4:	18e4      	addlt	r4, r4, r3
 80041b6:	f7ff fc5f 	bl	8003a78 <__malloc_lock>
 80041ba:	4a1e      	ldr	r2, [pc, #120]	; (8004234 <_free_r+0x94>)
 80041bc:	9801      	ldr	r0, [sp, #4]
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	b933      	cbnz	r3, 80041d0 <_free_r+0x30>
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	6014      	str	r4, [r2, #0]
 80041c6:	b003      	add	sp, #12
 80041c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041cc:	f7ff bc5a 	b.w	8003a84 <__malloc_unlock>
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d908      	bls.n	80041e6 <_free_r+0x46>
 80041d4:	6825      	ldr	r5, [r4, #0]
 80041d6:	1961      	adds	r1, r4, r5
 80041d8:	428b      	cmp	r3, r1
 80041da:	bf01      	itttt	eq
 80041dc:	6819      	ldreq	r1, [r3, #0]
 80041de:	685b      	ldreq	r3, [r3, #4]
 80041e0:	1949      	addeq	r1, r1, r5
 80041e2:	6021      	streq	r1, [r4, #0]
 80041e4:	e7ed      	b.n	80041c2 <_free_r+0x22>
 80041e6:	461a      	mov	r2, r3
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b10b      	cbz	r3, 80041f0 <_free_r+0x50>
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	d9fa      	bls.n	80041e6 <_free_r+0x46>
 80041f0:	6811      	ldr	r1, [r2, #0]
 80041f2:	1855      	adds	r5, r2, r1
 80041f4:	42a5      	cmp	r5, r4
 80041f6:	d10b      	bne.n	8004210 <_free_r+0x70>
 80041f8:	6824      	ldr	r4, [r4, #0]
 80041fa:	4421      	add	r1, r4
 80041fc:	1854      	adds	r4, r2, r1
 80041fe:	42a3      	cmp	r3, r4
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	d1e0      	bne.n	80041c6 <_free_r+0x26>
 8004204:	681c      	ldr	r4, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6053      	str	r3, [r2, #4]
 800420a:	440c      	add	r4, r1
 800420c:	6014      	str	r4, [r2, #0]
 800420e:	e7da      	b.n	80041c6 <_free_r+0x26>
 8004210:	d902      	bls.n	8004218 <_free_r+0x78>
 8004212:	230c      	movs	r3, #12
 8004214:	6003      	str	r3, [r0, #0]
 8004216:	e7d6      	b.n	80041c6 <_free_r+0x26>
 8004218:	6825      	ldr	r5, [r4, #0]
 800421a:	1961      	adds	r1, r4, r5
 800421c:	428b      	cmp	r3, r1
 800421e:	bf04      	itt	eq
 8004220:	6819      	ldreq	r1, [r3, #0]
 8004222:	685b      	ldreq	r3, [r3, #4]
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	bf04      	itt	eq
 8004228:	1949      	addeq	r1, r1, r5
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	6054      	str	r4, [r2, #4]
 800422e:	e7ca      	b.n	80041c6 <_free_r+0x26>
 8004230:	b003      	add	sp, #12
 8004232:	bd30      	pop	{r4, r5, pc}
 8004234:	200002b0 	.word	0x200002b0

08004238 <__ssputs_r>:
 8004238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800423c:	688e      	ldr	r6, [r1, #8]
 800423e:	461f      	mov	r7, r3
 8004240:	42be      	cmp	r6, r7
 8004242:	680b      	ldr	r3, [r1, #0]
 8004244:	4682      	mov	sl, r0
 8004246:	460c      	mov	r4, r1
 8004248:	4690      	mov	r8, r2
 800424a:	d82c      	bhi.n	80042a6 <__ssputs_r+0x6e>
 800424c:	898a      	ldrh	r2, [r1, #12]
 800424e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004252:	d026      	beq.n	80042a2 <__ssputs_r+0x6a>
 8004254:	6965      	ldr	r5, [r4, #20]
 8004256:	6909      	ldr	r1, [r1, #16]
 8004258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800425c:	eba3 0901 	sub.w	r9, r3, r1
 8004260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004264:	1c7b      	adds	r3, r7, #1
 8004266:	444b      	add	r3, r9
 8004268:	106d      	asrs	r5, r5, #1
 800426a:	429d      	cmp	r5, r3
 800426c:	bf38      	it	cc
 800426e:	461d      	movcc	r5, r3
 8004270:	0553      	lsls	r3, r2, #21
 8004272:	d527      	bpl.n	80042c4 <__ssputs_r+0x8c>
 8004274:	4629      	mov	r1, r5
 8004276:	f7ff fb7f 	bl	8003978 <_malloc_r>
 800427a:	4606      	mov	r6, r0
 800427c:	b360      	cbz	r0, 80042d8 <__ssputs_r+0xa0>
 800427e:	6921      	ldr	r1, [r4, #16]
 8004280:	464a      	mov	r2, r9
 8004282:	f000 fd51 	bl	8004d28 <memcpy>
 8004286:	89a3      	ldrh	r3, [r4, #12]
 8004288:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800428c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004290:	81a3      	strh	r3, [r4, #12]
 8004292:	6126      	str	r6, [r4, #16]
 8004294:	6165      	str	r5, [r4, #20]
 8004296:	444e      	add	r6, r9
 8004298:	eba5 0509 	sub.w	r5, r5, r9
 800429c:	6026      	str	r6, [r4, #0]
 800429e:	60a5      	str	r5, [r4, #8]
 80042a0:	463e      	mov	r6, r7
 80042a2:	42be      	cmp	r6, r7
 80042a4:	d900      	bls.n	80042a8 <__ssputs_r+0x70>
 80042a6:	463e      	mov	r6, r7
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	4632      	mov	r2, r6
 80042ac:	4641      	mov	r1, r8
 80042ae:	f000 fcff 	bl	8004cb0 <memmove>
 80042b2:	68a3      	ldr	r3, [r4, #8]
 80042b4:	1b9b      	subs	r3, r3, r6
 80042b6:	60a3      	str	r3, [r4, #8]
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	4433      	add	r3, r6
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	2000      	movs	r0, #0
 80042c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c4:	462a      	mov	r2, r5
 80042c6:	f000 fd3d 	bl	8004d44 <_realloc_r>
 80042ca:	4606      	mov	r6, r0
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d1e0      	bne.n	8004292 <__ssputs_r+0x5a>
 80042d0:	6921      	ldr	r1, [r4, #16]
 80042d2:	4650      	mov	r0, sl
 80042d4:	f7ff ff64 	bl	80041a0 <_free_r>
 80042d8:	230c      	movs	r3, #12
 80042da:	f8ca 3000 	str.w	r3, [sl]
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ea:	e7e9      	b.n	80042c0 <__ssputs_r+0x88>

080042ec <_svfiprintf_r>:
 80042ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f0:	4698      	mov	r8, r3
 80042f2:	898b      	ldrh	r3, [r1, #12]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	b09d      	sub	sp, #116	; 0x74
 80042f8:	4607      	mov	r7, r0
 80042fa:	460d      	mov	r5, r1
 80042fc:	4614      	mov	r4, r2
 80042fe:	d50e      	bpl.n	800431e <_svfiprintf_r+0x32>
 8004300:	690b      	ldr	r3, [r1, #16]
 8004302:	b963      	cbnz	r3, 800431e <_svfiprintf_r+0x32>
 8004304:	2140      	movs	r1, #64	; 0x40
 8004306:	f7ff fb37 	bl	8003978 <_malloc_r>
 800430a:	6028      	str	r0, [r5, #0]
 800430c:	6128      	str	r0, [r5, #16]
 800430e:	b920      	cbnz	r0, 800431a <_svfiprintf_r+0x2e>
 8004310:	230c      	movs	r3, #12
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	f04f 30ff 	mov.w	r0, #4294967295
 8004318:	e0d0      	b.n	80044bc <_svfiprintf_r+0x1d0>
 800431a:	2340      	movs	r3, #64	; 0x40
 800431c:	616b      	str	r3, [r5, #20]
 800431e:	2300      	movs	r3, #0
 8004320:	9309      	str	r3, [sp, #36]	; 0x24
 8004322:	2320      	movs	r3, #32
 8004324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004328:	f8cd 800c 	str.w	r8, [sp, #12]
 800432c:	2330      	movs	r3, #48	; 0x30
 800432e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044d4 <_svfiprintf_r+0x1e8>
 8004332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004336:	f04f 0901 	mov.w	r9, #1
 800433a:	4623      	mov	r3, r4
 800433c:	469a      	mov	sl, r3
 800433e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004342:	b10a      	cbz	r2, 8004348 <_svfiprintf_r+0x5c>
 8004344:	2a25      	cmp	r2, #37	; 0x25
 8004346:	d1f9      	bne.n	800433c <_svfiprintf_r+0x50>
 8004348:	ebba 0b04 	subs.w	fp, sl, r4
 800434c:	d00b      	beq.n	8004366 <_svfiprintf_r+0x7a>
 800434e:	465b      	mov	r3, fp
 8004350:	4622      	mov	r2, r4
 8004352:	4629      	mov	r1, r5
 8004354:	4638      	mov	r0, r7
 8004356:	f7ff ff6f 	bl	8004238 <__ssputs_r>
 800435a:	3001      	adds	r0, #1
 800435c:	f000 80a9 	beq.w	80044b2 <_svfiprintf_r+0x1c6>
 8004360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004362:	445a      	add	r2, fp
 8004364:	9209      	str	r2, [sp, #36]	; 0x24
 8004366:	f89a 3000 	ldrb.w	r3, [sl]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 80a1 	beq.w	80044b2 <_svfiprintf_r+0x1c6>
 8004370:	2300      	movs	r3, #0
 8004372:	f04f 32ff 	mov.w	r2, #4294967295
 8004376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800437a:	f10a 0a01 	add.w	sl, sl, #1
 800437e:	9304      	str	r3, [sp, #16]
 8004380:	9307      	str	r3, [sp, #28]
 8004382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004386:	931a      	str	r3, [sp, #104]	; 0x68
 8004388:	4654      	mov	r4, sl
 800438a:	2205      	movs	r2, #5
 800438c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004390:	4850      	ldr	r0, [pc, #320]	; (80044d4 <_svfiprintf_r+0x1e8>)
 8004392:	f7fb ff2d 	bl	80001f0 <memchr>
 8004396:	9a04      	ldr	r2, [sp, #16]
 8004398:	b9d8      	cbnz	r0, 80043d2 <_svfiprintf_r+0xe6>
 800439a:	06d0      	lsls	r0, r2, #27
 800439c:	bf44      	itt	mi
 800439e:	2320      	movmi	r3, #32
 80043a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043a4:	0711      	lsls	r1, r2, #28
 80043a6:	bf44      	itt	mi
 80043a8:	232b      	movmi	r3, #43	; 0x2b
 80043aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ae:	f89a 3000 	ldrb.w	r3, [sl]
 80043b2:	2b2a      	cmp	r3, #42	; 0x2a
 80043b4:	d015      	beq.n	80043e2 <_svfiprintf_r+0xf6>
 80043b6:	9a07      	ldr	r2, [sp, #28]
 80043b8:	4654      	mov	r4, sl
 80043ba:	2000      	movs	r0, #0
 80043bc:	f04f 0c0a 	mov.w	ip, #10
 80043c0:	4621      	mov	r1, r4
 80043c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043c6:	3b30      	subs	r3, #48	; 0x30
 80043c8:	2b09      	cmp	r3, #9
 80043ca:	d94d      	bls.n	8004468 <_svfiprintf_r+0x17c>
 80043cc:	b1b0      	cbz	r0, 80043fc <_svfiprintf_r+0x110>
 80043ce:	9207      	str	r2, [sp, #28]
 80043d0:	e014      	b.n	80043fc <_svfiprintf_r+0x110>
 80043d2:	eba0 0308 	sub.w	r3, r0, r8
 80043d6:	fa09 f303 	lsl.w	r3, r9, r3
 80043da:	4313      	orrs	r3, r2
 80043dc:	9304      	str	r3, [sp, #16]
 80043de:	46a2      	mov	sl, r4
 80043e0:	e7d2      	b.n	8004388 <_svfiprintf_r+0x9c>
 80043e2:	9b03      	ldr	r3, [sp, #12]
 80043e4:	1d19      	adds	r1, r3, #4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	9103      	str	r1, [sp, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bfbb      	ittet	lt
 80043ee:	425b      	neglt	r3, r3
 80043f0:	f042 0202 	orrlt.w	r2, r2, #2
 80043f4:	9307      	strge	r3, [sp, #28]
 80043f6:	9307      	strlt	r3, [sp, #28]
 80043f8:	bfb8      	it	lt
 80043fa:	9204      	strlt	r2, [sp, #16]
 80043fc:	7823      	ldrb	r3, [r4, #0]
 80043fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004400:	d10c      	bne.n	800441c <_svfiprintf_r+0x130>
 8004402:	7863      	ldrb	r3, [r4, #1]
 8004404:	2b2a      	cmp	r3, #42	; 0x2a
 8004406:	d134      	bne.n	8004472 <_svfiprintf_r+0x186>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	9203      	str	r2, [sp, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	bfb8      	it	lt
 8004414:	f04f 33ff 	movlt.w	r3, #4294967295
 8004418:	3402      	adds	r4, #2
 800441a:	9305      	str	r3, [sp, #20]
 800441c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80044e4 <_svfiprintf_r+0x1f8>
 8004420:	7821      	ldrb	r1, [r4, #0]
 8004422:	2203      	movs	r2, #3
 8004424:	4650      	mov	r0, sl
 8004426:	f7fb fee3 	bl	80001f0 <memchr>
 800442a:	b138      	cbz	r0, 800443c <_svfiprintf_r+0x150>
 800442c:	9b04      	ldr	r3, [sp, #16]
 800442e:	eba0 000a 	sub.w	r0, r0, sl
 8004432:	2240      	movs	r2, #64	; 0x40
 8004434:	4082      	lsls	r2, r0
 8004436:	4313      	orrs	r3, r2
 8004438:	3401      	adds	r4, #1
 800443a:	9304      	str	r3, [sp, #16]
 800443c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004440:	4825      	ldr	r0, [pc, #148]	; (80044d8 <_svfiprintf_r+0x1ec>)
 8004442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004446:	2206      	movs	r2, #6
 8004448:	f7fb fed2 	bl	80001f0 <memchr>
 800444c:	2800      	cmp	r0, #0
 800444e:	d038      	beq.n	80044c2 <_svfiprintf_r+0x1d6>
 8004450:	4b22      	ldr	r3, [pc, #136]	; (80044dc <_svfiprintf_r+0x1f0>)
 8004452:	bb1b      	cbnz	r3, 800449c <_svfiprintf_r+0x1b0>
 8004454:	9b03      	ldr	r3, [sp, #12]
 8004456:	3307      	adds	r3, #7
 8004458:	f023 0307 	bic.w	r3, r3, #7
 800445c:	3308      	adds	r3, #8
 800445e:	9303      	str	r3, [sp, #12]
 8004460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004462:	4433      	add	r3, r6
 8004464:	9309      	str	r3, [sp, #36]	; 0x24
 8004466:	e768      	b.n	800433a <_svfiprintf_r+0x4e>
 8004468:	fb0c 3202 	mla	r2, ip, r2, r3
 800446c:	460c      	mov	r4, r1
 800446e:	2001      	movs	r0, #1
 8004470:	e7a6      	b.n	80043c0 <_svfiprintf_r+0xd4>
 8004472:	2300      	movs	r3, #0
 8004474:	3401      	adds	r4, #1
 8004476:	9305      	str	r3, [sp, #20]
 8004478:	4619      	mov	r1, r3
 800447a:	f04f 0c0a 	mov.w	ip, #10
 800447e:	4620      	mov	r0, r4
 8004480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004484:	3a30      	subs	r2, #48	; 0x30
 8004486:	2a09      	cmp	r2, #9
 8004488:	d903      	bls.n	8004492 <_svfiprintf_r+0x1a6>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0c6      	beq.n	800441c <_svfiprintf_r+0x130>
 800448e:	9105      	str	r1, [sp, #20]
 8004490:	e7c4      	b.n	800441c <_svfiprintf_r+0x130>
 8004492:	fb0c 2101 	mla	r1, ip, r1, r2
 8004496:	4604      	mov	r4, r0
 8004498:	2301      	movs	r3, #1
 800449a:	e7f0      	b.n	800447e <_svfiprintf_r+0x192>
 800449c:	ab03      	add	r3, sp, #12
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	462a      	mov	r2, r5
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <_svfiprintf_r+0x1f4>)
 80044a4:	a904      	add	r1, sp, #16
 80044a6:	4638      	mov	r0, r7
 80044a8:	f3af 8000 	nop.w
 80044ac:	1c42      	adds	r2, r0, #1
 80044ae:	4606      	mov	r6, r0
 80044b0:	d1d6      	bne.n	8004460 <_svfiprintf_r+0x174>
 80044b2:	89ab      	ldrh	r3, [r5, #12]
 80044b4:	065b      	lsls	r3, r3, #25
 80044b6:	f53f af2d 	bmi.w	8004314 <_svfiprintf_r+0x28>
 80044ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044bc:	b01d      	add	sp, #116	; 0x74
 80044be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c2:	ab03      	add	r3, sp, #12
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	462a      	mov	r2, r5
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <_svfiprintf_r+0x1f4>)
 80044ca:	a904      	add	r1, sp, #16
 80044cc:	4638      	mov	r0, r7
 80044ce:	f000 f9bd 	bl	800484c <_printf_i>
 80044d2:	e7eb      	b.n	80044ac <_svfiprintf_r+0x1c0>
 80044d4:	08004e54 	.word	0x08004e54
 80044d8:	08004e5e 	.word	0x08004e5e
 80044dc:	00000000 	.word	0x00000000
 80044e0:	08004239 	.word	0x08004239
 80044e4:	08004e5a 	.word	0x08004e5a

080044e8 <__sfputc_r>:
 80044e8:	6893      	ldr	r3, [r2, #8]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	b410      	push	{r4}
 80044f0:	6093      	str	r3, [r2, #8]
 80044f2:	da08      	bge.n	8004506 <__sfputc_r+0x1e>
 80044f4:	6994      	ldr	r4, [r2, #24]
 80044f6:	42a3      	cmp	r3, r4
 80044f8:	db01      	blt.n	80044fe <__sfputc_r+0x16>
 80044fa:	290a      	cmp	r1, #10
 80044fc:	d103      	bne.n	8004506 <__sfputc_r+0x1e>
 80044fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004502:	f7ff bd06 	b.w	8003f12 <__swbuf_r>
 8004506:	6813      	ldr	r3, [r2, #0]
 8004508:	1c58      	adds	r0, r3, #1
 800450a:	6010      	str	r0, [r2, #0]
 800450c:	7019      	strb	r1, [r3, #0]
 800450e:	4608      	mov	r0, r1
 8004510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004514:	4770      	bx	lr

08004516 <__sfputs_r>:
 8004516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004518:	4606      	mov	r6, r0
 800451a:	460f      	mov	r7, r1
 800451c:	4614      	mov	r4, r2
 800451e:	18d5      	adds	r5, r2, r3
 8004520:	42ac      	cmp	r4, r5
 8004522:	d101      	bne.n	8004528 <__sfputs_r+0x12>
 8004524:	2000      	movs	r0, #0
 8004526:	e007      	b.n	8004538 <__sfputs_r+0x22>
 8004528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800452c:	463a      	mov	r2, r7
 800452e:	4630      	mov	r0, r6
 8004530:	f7ff ffda 	bl	80044e8 <__sfputc_r>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d1f3      	bne.n	8004520 <__sfputs_r+0xa>
 8004538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800453c <_vfiprintf_r>:
 800453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	460d      	mov	r5, r1
 8004542:	b09d      	sub	sp, #116	; 0x74
 8004544:	4614      	mov	r4, r2
 8004546:	4698      	mov	r8, r3
 8004548:	4606      	mov	r6, r0
 800454a:	b118      	cbz	r0, 8004554 <_vfiprintf_r+0x18>
 800454c:	6a03      	ldr	r3, [r0, #32]
 800454e:	b90b      	cbnz	r3, 8004554 <_vfiprintf_r+0x18>
 8004550:	f7ff fb2a 	bl	8003ba8 <__sinit>
 8004554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004556:	07d9      	lsls	r1, r3, #31
 8004558:	d405      	bmi.n	8004566 <_vfiprintf_r+0x2a>
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	059a      	lsls	r2, r3, #22
 800455e:	d402      	bmi.n	8004566 <_vfiprintf_r+0x2a>
 8004560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004562:	f7ff fe1a 	bl	800419a <__retarget_lock_acquire_recursive>
 8004566:	89ab      	ldrh	r3, [r5, #12]
 8004568:	071b      	lsls	r3, r3, #28
 800456a:	d501      	bpl.n	8004570 <_vfiprintf_r+0x34>
 800456c:	692b      	ldr	r3, [r5, #16]
 800456e:	b99b      	cbnz	r3, 8004598 <_vfiprintf_r+0x5c>
 8004570:	4629      	mov	r1, r5
 8004572:	4630      	mov	r0, r6
 8004574:	f7ff fd0a 	bl	8003f8c <__swsetup_r>
 8004578:	b170      	cbz	r0, 8004598 <_vfiprintf_r+0x5c>
 800457a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800457c:	07dc      	lsls	r4, r3, #31
 800457e:	d504      	bpl.n	800458a <_vfiprintf_r+0x4e>
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	b01d      	add	sp, #116	; 0x74
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458a:	89ab      	ldrh	r3, [r5, #12]
 800458c:	0598      	lsls	r0, r3, #22
 800458e:	d4f7      	bmi.n	8004580 <_vfiprintf_r+0x44>
 8004590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004592:	f7ff fe03 	bl	800419c <__retarget_lock_release_recursive>
 8004596:	e7f3      	b.n	8004580 <_vfiprintf_r+0x44>
 8004598:	2300      	movs	r3, #0
 800459a:	9309      	str	r3, [sp, #36]	; 0x24
 800459c:	2320      	movs	r3, #32
 800459e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80045a6:	2330      	movs	r3, #48	; 0x30
 80045a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800475c <_vfiprintf_r+0x220>
 80045ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045b0:	f04f 0901 	mov.w	r9, #1
 80045b4:	4623      	mov	r3, r4
 80045b6:	469a      	mov	sl, r3
 80045b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045bc:	b10a      	cbz	r2, 80045c2 <_vfiprintf_r+0x86>
 80045be:	2a25      	cmp	r2, #37	; 0x25
 80045c0:	d1f9      	bne.n	80045b6 <_vfiprintf_r+0x7a>
 80045c2:	ebba 0b04 	subs.w	fp, sl, r4
 80045c6:	d00b      	beq.n	80045e0 <_vfiprintf_r+0xa4>
 80045c8:	465b      	mov	r3, fp
 80045ca:	4622      	mov	r2, r4
 80045cc:	4629      	mov	r1, r5
 80045ce:	4630      	mov	r0, r6
 80045d0:	f7ff ffa1 	bl	8004516 <__sfputs_r>
 80045d4:	3001      	adds	r0, #1
 80045d6:	f000 80a9 	beq.w	800472c <_vfiprintf_r+0x1f0>
 80045da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045dc:	445a      	add	r2, fp
 80045de:	9209      	str	r2, [sp, #36]	; 0x24
 80045e0:	f89a 3000 	ldrb.w	r3, [sl]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80a1 	beq.w	800472c <_vfiprintf_r+0x1f0>
 80045ea:	2300      	movs	r3, #0
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295
 80045f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045f4:	f10a 0a01 	add.w	sl, sl, #1
 80045f8:	9304      	str	r3, [sp, #16]
 80045fa:	9307      	str	r3, [sp, #28]
 80045fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004600:	931a      	str	r3, [sp, #104]	; 0x68
 8004602:	4654      	mov	r4, sl
 8004604:	2205      	movs	r2, #5
 8004606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800460a:	4854      	ldr	r0, [pc, #336]	; (800475c <_vfiprintf_r+0x220>)
 800460c:	f7fb fdf0 	bl	80001f0 <memchr>
 8004610:	9a04      	ldr	r2, [sp, #16]
 8004612:	b9d8      	cbnz	r0, 800464c <_vfiprintf_r+0x110>
 8004614:	06d1      	lsls	r1, r2, #27
 8004616:	bf44      	itt	mi
 8004618:	2320      	movmi	r3, #32
 800461a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800461e:	0713      	lsls	r3, r2, #28
 8004620:	bf44      	itt	mi
 8004622:	232b      	movmi	r3, #43	; 0x2b
 8004624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004628:	f89a 3000 	ldrb.w	r3, [sl]
 800462c:	2b2a      	cmp	r3, #42	; 0x2a
 800462e:	d015      	beq.n	800465c <_vfiprintf_r+0x120>
 8004630:	9a07      	ldr	r2, [sp, #28]
 8004632:	4654      	mov	r4, sl
 8004634:	2000      	movs	r0, #0
 8004636:	f04f 0c0a 	mov.w	ip, #10
 800463a:	4621      	mov	r1, r4
 800463c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004640:	3b30      	subs	r3, #48	; 0x30
 8004642:	2b09      	cmp	r3, #9
 8004644:	d94d      	bls.n	80046e2 <_vfiprintf_r+0x1a6>
 8004646:	b1b0      	cbz	r0, 8004676 <_vfiprintf_r+0x13a>
 8004648:	9207      	str	r2, [sp, #28]
 800464a:	e014      	b.n	8004676 <_vfiprintf_r+0x13a>
 800464c:	eba0 0308 	sub.w	r3, r0, r8
 8004650:	fa09 f303 	lsl.w	r3, r9, r3
 8004654:	4313      	orrs	r3, r2
 8004656:	9304      	str	r3, [sp, #16]
 8004658:	46a2      	mov	sl, r4
 800465a:	e7d2      	b.n	8004602 <_vfiprintf_r+0xc6>
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	1d19      	adds	r1, r3, #4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	9103      	str	r1, [sp, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	bfbb      	ittet	lt
 8004668:	425b      	neglt	r3, r3
 800466a:	f042 0202 	orrlt.w	r2, r2, #2
 800466e:	9307      	strge	r3, [sp, #28]
 8004670:	9307      	strlt	r3, [sp, #28]
 8004672:	bfb8      	it	lt
 8004674:	9204      	strlt	r2, [sp, #16]
 8004676:	7823      	ldrb	r3, [r4, #0]
 8004678:	2b2e      	cmp	r3, #46	; 0x2e
 800467a:	d10c      	bne.n	8004696 <_vfiprintf_r+0x15a>
 800467c:	7863      	ldrb	r3, [r4, #1]
 800467e:	2b2a      	cmp	r3, #42	; 0x2a
 8004680:	d134      	bne.n	80046ec <_vfiprintf_r+0x1b0>
 8004682:	9b03      	ldr	r3, [sp, #12]
 8004684:	1d1a      	adds	r2, r3, #4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	9203      	str	r2, [sp, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	bfb8      	it	lt
 800468e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004692:	3402      	adds	r4, #2
 8004694:	9305      	str	r3, [sp, #20]
 8004696:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800476c <_vfiprintf_r+0x230>
 800469a:	7821      	ldrb	r1, [r4, #0]
 800469c:	2203      	movs	r2, #3
 800469e:	4650      	mov	r0, sl
 80046a0:	f7fb fda6 	bl	80001f0 <memchr>
 80046a4:	b138      	cbz	r0, 80046b6 <_vfiprintf_r+0x17a>
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	eba0 000a 	sub.w	r0, r0, sl
 80046ac:	2240      	movs	r2, #64	; 0x40
 80046ae:	4082      	lsls	r2, r0
 80046b0:	4313      	orrs	r3, r2
 80046b2:	3401      	adds	r4, #1
 80046b4:	9304      	str	r3, [sp, #16]
 80046b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ba:	4829      	ldr	r0, [pc, #164]	; (8004760 <_vfiprintf_r+0x224>)
 80046bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046c0:	2206      	movs	r2, #6
 80046c2:	f7fb fd95 	bl	80001f0 <memchr>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d03f      	beq.n	800474a <_vfiprintf_r+0x20e>
 80046ca:	4b26      	ldr	r3, [pc, #152]	; (8004764 <_vfiprintf_r+0x228>)
 80046cc:	bb1b      	cbnz	r3, 8004716 <_vfiprintf_r+0x1da>
 80046ce:	9b03      	ldr	r3, [sp, #12]
 80046d0:	3307      	adds	r3, #7
 80046d2:	f023 0307 	bic.w	r3, r3, #7
 80046d6:	3308      	adds	r3, #8
 80046d8:	9303      	str	r3, [sp, #12]
 80046da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046dc:	443b      	add	r3, r7
 80046de:	9309      	str	r3, [sp, #36]	; 0x24
 80046e0:	e768      	b.n	80045b4 <_vfiprintf_r+0x78>
 80046e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80046e6:	460c      	mov	r4, r1
 80046e8:	2001      	movs	r0, #1
 80046ea:	e7a6      	b.n	800463a <_vfiprintf_r+0xfe>
 80046ec:	2300      	movs	r3, #0
 80046ee:	3401      	adds	r4, #1
 80046f0:	9305      	str	r3, [sp, #20]
 80046f2:	4619      	mov	r1, r3
 80046f4:	f04f 0c0a 	mov.w	ip, #10
 80046f8:	4620      	mov	r0, r4
 80046fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046fe:	3a30      	subs	r2, #48	; 0x30
 8004700:	2a09      	cmp	r2, #9
 8004702:	d903      	bls.n	800470c <_vfiprintf_r+0x1d0>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0c6      	beq.n	8004696 <_vfiprintf_r+0x15a>
 8004708:	9105      	str	r1, [sp, #20]
 800470a:	e7c4      	b.n	8004696 <_vfiprintf_r+0x15a>
 800470c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004710:	4604      	mov	r4, r0
 8004712:	2301      	movs	r3, #1
 8004714:	e7f0      	b.n	80046f8 <_vfiprintf_r+0x1bc>
 8004716:	ab03      	add	r3, sp, #12
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	462a      	mov	r2, r5
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <_vfiprintf_r+0x22c>)
 800471e:	a904      	add	r1, sp, #16
 8004720:	4630      	mov	r0, r6
 8004722:	f3af 8000 	nop.w
 8004726:	4607      	mov	r7, r0
 8004728:	1c78      	adds	r0, r7, #1
 800472a:	d1d6      	bne.n	80046da <_vfiprintf_r+0x19e>
 800472c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800472e:	07d9      	lsls	r1, r3, #31
 8004730:	d405      	bmi.n	800473e <_vfiprintf_r+0x202>
 8004732:	89ab      	ldrh	r3, [r5, #12]
 8004734:	059a      	lsls	r2, r3, #22
 8004736:	d402      	bmi.n	800473e <_vfiprintf_r+0x202>
 8004738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800473a:	f7ff fd2f 	bl	800419c <__retarget_lock_release_recursive>
 800473e:	89ab      	ldrh	r3, [r5, #12]
 8004740:	065b      	lsls	r3, r3, #25
 8004742:	f53f af1d 	bmi.w	8004580 <_vfiprintf_r+0x44>
 8004746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004748:	e71c      	b.n	8004584 <_vfiprintf_r+0x48>
 800474a:	ab03      	add	r3, sp, #12
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	462a      	mov	r2, r5
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <_vfiprintf_r+0x22c>)
 8004752:	a904      	add	r1, sp, #16
 8004754:	4630      	mov	r0, r6
 8004756:	f000 f879 	bl	800484c <_printf_i>
 800475a:	e7e4      	b.n	8004726 <_vfiprintf_r+0x1ea>
 800475c:	08004e54 	.word	0x08004e54
 8004760:	08004e5e 	.word	0x08004e5e
 8004764:	00000000 	.word	0x00000000
 8004768:	08004517 	.word	0x08004517
 800476c:	08004e5a 	.word	0x08004e5a

08004770 <_printf_common>:
 8004770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	4616      	mov	r6, r2
 8004776:	4699      	mov	r9, r3
 8004778:	688a      	ldr	r2, [r1, #8]
 800477a:	690b      	ldr	r3, [r1, #16]
 800477c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004780:	4293      	cmp	r3, r2
 8004782:	bfb8      	it	lt
 8004784:	4613      	movlt	r3, r2
 8004786:	6033      	str	r3, [r6, #0]
 8004788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800478c:	4607      	mov	r7, r0
 800478e:	460c      	mov	r4, r1
 8004790:	b10a      	cbz	r2, 8004796 <_printf_common+0x26>
 8004792:	3301      	adds	r3, #1
 8004794:	6033      	str	r3, [r6, #0]
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	0699      	lsls	r1, r3, #26
 800479a:	bf42      	ittt	mi
 800479c:	6833      	ldrmi	r3, [r6, #0]
 800479e:	3302      	addmi	r3, #2
 80047a0:	6033      	strmi	r3, [r6, #0]
 80047a2:	6825      	ldr	r5, [r4, #0]
 80047a4:	f015 0506 	ands.w	r5, r5, #6
 80047a8:	d106      	bne.n	80047b8 <_printf_common+0x48>
 80047aa:	f104 0a19 	add.w	sl, r4, #25
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	6832      	ldr	r2, [r6, #0]
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	dc26      	bgt.n	8004806 <_printf_common+0x96>
 80047b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047bc:	1e13      	subs	r3, r2, #0
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	bf18      	it	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	0692      	lsls	r2, r2, #26
 80047c6:	d42b      	bmi.n	8004820 <_printf_common+0xb0>
 80047c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047cc:	4649      	mov	r1, r9
 80047ce:	4638      	mov	r0, r7
 80047d0:	47c0      	blx	r8
 80047d2:	3001      	adds	r0, #1
 80047d4:	d01e      	beq.n	8004814 <_printf_common+0xa4>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	f003 0306 	and.w	r3, r3, #6
 80047de:	2b04      	cmp	r3, #4
 80047e0:	bf02      	ittt	eq
 80047e2:	68e5      	ldreq	r5, [r4, #12]
 80047e4:	6833      	ldreq	r3, [r6, #0]
 80047e6:	1aed      	subeq	r5, r5, r3
 80047e8:	68a3      	ldr	r3, [r4, #8]
 80047ea:	bf0c      	ite	eq
 80047ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047f0:	2500      	movne	r5, #0
 80047f2:	4293      	cmp	r3, r2
 80047f4:	bfc4      	itt	gt
 80047f6:	1a9b      	subgt	r3, r3, r2
 80047f8:	18ed      	addgt	r5, r5, r3
 80047fa:	2600      	movs	r6, #0
 80047fc:	341a      	adds	r4, #26
 80047fe:	42b5      	cmp	r5, r6
 8004800:	d11a      	bne.n	8004838 <_printf_common+0xc8>
 8004802:	2000      	movs	r0, #0
 8004804:	e008      	b.n	8004818 <_printf_common+0xa8>
 8004806:	2301      	movs	r3, #1
 8004808:	4652      	mov	r2, sl
 800480a:	4649      	mov	r1, r9
 800480c:	4638      	mov	r0, r7
 800480e:	47c0      	blx	r8
 8004810:	3001      	adds	r0, #1
 8004812:	d103      	bne.n	800481c <_printf_common+0xac>
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481c:	3501      	adds	r5, #1
 800481e:	e7c6      	b.n	80047ae <_printf_common+0x3e>
 8004820:	18e1      	adds	r1, r4, r3
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	2030      	movs	r0, #48	; 0x30
 8004826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800482a:	4422      	add	r2, r4
 800482c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004834:	3302      	adds	r3, #2
 8004836:	e7c7      	b.n	80047c8 <_printf_common+0x58>
 8004838:	2301      	movs	r3, #1
 800483a:	4622      	mov	r2, r4
 800483c:	4649      	mov	r1, r9
 800483e:	4638      	mov	r0, r7
 8004840:	47c0      	blx	r8
 8004842:	3001      	adds	r0, #1
 8004844:	d0e6      	beq.n	8004814 <_printf_common+0xa4>
 8004846:	3601      	adds	r6, #1
 8004848:	e7d9      	b.n	80047fe <_printf_common+0x8e>
	...

0800484c <_printf_i>:
 800484c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	7e0f      	ldrb	r7, [r1, #24]
 8004852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004854:	2f78      	cmp	r7, #120	; 0x78
 8004856:	4691      	mov	r9, r2
 8004858:	4680      	mov	r8, r0
 800485a:	460c      	mov	r4, r1
 800485c:	469a      	mov	sl, r3
 800485e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004862:	d807      	bhi.n	8004874 <_printf_i+0x28>
 8004864:	2f62      	cmp	r7, #98	; 0x62
 8004866:	d80a      	bhi.n	800487e <_printf_i+0x32>
 8004868:	2f00      	cmp	r7, #0
 800486a:	f000 80d4 	beq.w	8004a16 <_printf_i+0x1ca>
 800486e:	2f58      	cmp	r7, #88	; 0x58
 8004870:	f000 80c0 	beq.w	80049f4 <_printf_i+0x1a8>
 8004874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800487c:	e03a      	b.n	80048f4 <_printf_i+0xa8>
 800487e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004882:	2b15      	cmp	r3, #21
 8004884:	d8f6      	bhi.n	8004874 <_printf_i+0x28>
 8004886:	a101      	add	r1, pc, #4	; (adr r1, 800488c <_printf_i+0x40>)
 8004888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800488c:	080048e5 	.word	0x080048e5
 8004890:	080048f9 	.word	0x080048f9
 8004894:	08004875 	.word	0x08004875
 8004898:	08004875 	.word	0x08004875
 800489c:	08004875 	.word	0x08004875
 80048a0:	08004875 	.word	0x08004875
 80048a4:	080048f9 	.word	0x080048f9
 80048a8:	08004875 	.word	0x08004875
 80048ac:	08004875 	.word	0x08004875
 80048b0:	08004875 	.word	0x08004875
 80048b4:	08004875 	.word	0x08004875
 80048b8:	080049fd 	.word	0x080049fd
 80048bc:	08004925 	.word	0x08004925
 80048c0:	080049b7 	.word	0x080049b7
 80048c4:	08004875 	.word	0x08004875
 80048c8:	08004875 	.word	0x08004875
 80048cc:	08004a1f 	.word	0x08004a1f
 80048d0:	08004875 	.word	0x08004875
 80048d4:	08004925 	.word	0x08004925
 80048d8:	08004875 	.word	0x08004875
 80048dc:	08004875 	.word	0x08004875
 80048e0:	080049bf 	.word	0x080049bf
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	1d1a      	adds	r2, r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	602a      	str	r2, [r5, #0]
 80048ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048f4:	2301      	movs	r3, #1
 80048f6:	e09f      	b.n	8004a38 <_printf_i+0x1ec>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	682b      	ldr	r3, [r5, #0]
 80048fc:	0607      	lsls	r7, r0, #24
 80048fe:	f103 0104 	add.w	r1, r3, #4
 8004902:	6029      	str	r1, [r5, #0]
 8004904:	d501      	bpl.n	800490a <_printf_i+0xbe>
 8004906:	681e      	ldr	r6, [r3, #0]
 8004908:	e003      	b.n	8004912 <_printf_i+0xc6>
 800490a:	0646      	lsls	r6, r0, #25
 800490c:	d5fb      	bpl.n	8004906 <_printf_i+0xba>
 800490e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004912:	2e00      	cmp	r6, #0
 8004914:	da03      	bge.n	800491e <_printf_i+0xd2>
 8004916:	232d      	movs	r3, #45	; 0x2d
 8004918:	4276      	negs	r6, r6
 800491a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800491e:	485a      	ldr	r0, [pc, #360]	; (8004a88 <_printf_i+0x23c>)
 8004920:	230a      	movs	r3, #10
 8004922:	e012      	b.n	800494a <_printf_i+0xfe>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	6820      	ldr	r0, [r4, #0]
 8004928:	1d19      	adds	r1, r3, #4
 800492a:	6029      	str	r1, [r5, #0]
 800492c:	0605      	lsls	r5, r0, #24
 800492e:	d501      	bpl.n	8004934 <_printf_i+0xe8>
 8004930:	681e      	ldr	r6, [r3, #0]
 8004932:	e002      	b.n	800493a <_printf_i+0xee>
 8004934:	0641      	lsls	r1, r0, #25
 8004936:	d5fb      	bpl.n	8004930 <_printf_i+0xe4>
 8004938:	881e      	ldrh	r6, [r3, #0]
 800493a:	4853      	ldr	r0, [pc, #332]	; (8004a88 <_printf_i+0x23c>)
 800493c:	2f6f      	cmp	r7, #111	; 0x6f
 800493e:	bf0c      	ite	eq
 8004940:	2308      	moveq	r3, #8
 8004942:	230a      	movne	r3, #10
 8004944:	2100      	movs	r1, #0
 8004946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800494a:	6865      	ldr	r5, [r4, #4]
 800494c:	60a5      	str	r5, [r4, #8]
 800494e:	2d00      	cmp	r5, #0
 8004950:	bfa2      	ittt	ge
 8004952:	6821      	ldrge	r1, [r4, #0]
 8004954:	f021 0104 	bicge.w	r1, r1, #4
 8004958:	6021      	strge	r1, [r4, #0]
 800495a:	b90e      	cbnz	r6, 8004960 <_printf_i+0x114>
 800495c:	2d00      	cmp	r5, #0
 800495e:	d04b      	beq.n	80049f8 <_printf_i+0x1ac>
 8004960:	4615      	mov	r5, r2
 8004962:	fbb6 f1f3 	udiv	r1, r6, r3
 8004966:	fb03 6711 	mls	r7, r3, r1, r6
 800496a:	5dc7      	ldrb	r7, [r0, r7]
 800496c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004970:	4637      	mov	r7, r6
 8004972:	42bb      	cmp	r3, r7
 8004974:	460e      	mov	r6, r1
 8004976:	d9f4      	bls.n	8004962 <_printf_i+0x116>
 8004978:	2b08      	cmp	r3, #8
 800497a:	d10b      	bne.n	8004994 <_printf_i+0x148>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	07de      	lsls	r6, r3, #31
 8004980:	d508      	bpl.n	8004994 <_printf_i+0x148>
 8004982:	6923      	ldr	r3, [r4, #16]
 8004984:	6861      	ldr	r1, [r4, #4]
 8004986:	4299      	cmp	r1, r3
 8004988:	bfde      	ittt	le
 800498a:	2330      	movle	r3, #48	; 0x30
 800498c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004990:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004994:	1b52      	subs	r2, r2, r5
 8004996:	6122      	str	r2, [r4, #16]
 8004998:	f8cd a000 	str.w	sl, [sp]
 800499c:	464b      	mov	r3, r9
 800499e:	aa03      	add	r2, sp, #12
 80049a0:	4621      	mov	r1, r4
 80049a2:	4640      	mov	r0, r8
 80049a4:	f7ff fee4 	bl	8004770 <_printf_common>
 80049a8:	3001      	adds	r0, #1
 80049aa:	d14a      	bne.n	8004a42 <_printf_i+0x1f6>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	b004      	add	sp, #16
 80049b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	f043 0320 	orr.w	r3, r3, #32
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	4833      	ldr	r0, [pc, #204]	; (8004a8c <_printf_i+0x240>)
 80049c0:	2778      	movs	r7, #120	; 0x78
 80049c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	6829      	ldr	r1, [r5, #0]
 80049ca:	061f      	lsls	r7, r3, #24
 80049cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80049d0:	d402      	bmi.n	80049d8 <_printf_i+0x18c>
 80049d2:	065f      	lsls	r7, r3, #25
 80049d4:	bf48      	it	mi
 80049d6:	b2b6      	uxthmi	r6, r6
 80049d8:	07df      	lsls	r7, r3, #31
 80049da:	bf48      	it	mi
 80049dc:	f043 0320 	orrmi.w	r3, r3, #32
 80049e0:	6029      	str	r1, [r5, #0]
 80049e2:	bf48      	it	mi
 80049e4:	6023      	strmi	r3, [r4, #0]
 80049e6:	b91e      	cbnz	r6, 80049f0 <_printf_i+0x1a4>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	f023 0320 	bic.w	r3, r3, #32
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	2310      	movs	r3, #16
 80049f2:	e7a7      	b.n	8004944 <_printf_i+0xf8>
 80049f4:	4824      	ldr	r0, [pc, #144]	; (8004a88 <_printf_i+0x23c>)
 80049f6:	e7e4      	b.n	80049c2 <_printf_i+0x176>
 80049f8:	4615      	mov	r5, r2
 80049fa:	e7bd      	b.n	8004978 <_printf_i+0x12c>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	6826      	ldr	r6, [r4, #0]
 8004a00:	6961      	ldr	r1, [r4, #20]
 8004a02:	1d18      	adds	r0, r3, #4
 8004a04:	6028      	str	r0, [r5, #0]
 8004a06:	0635      	lsls	r5, r6, #24
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	d501      	bpl.n	8004a10 <_printf_i+0x1c4>
 8004a0c:	6019      	str	r1, [r3, #0]
 8004a0e:	e002      	b.n	8004a16 <_printf_i+0x1ca>
 8004a10:	0670      	lsls	r0, r6, #25
 8004a12:	d5fb      	bpl.n	8004a0c <_printf_i+0x1c0>
 8004a14:	8019      	strh	r1, [r3, #0]
 8004a16:	2300      	movs	r3, #0
 8004a18:	6123      	str	r3, [r4, #16]
 8004a1a:	4615      	mov	r5, r2
 8004a1c:	e7bc      	b.n	8004998 <_printf_i+0x14c>
 8004a1e:	682b      	ldr	r3, [r5, #0]
 8004a20:	1d1a      	adds	r2, r3, #4
 8004a22:	602a      	str	r2, [r5, #0]
 8004a24:	681d      	ldr	r5, [r3, #0]
 8004a26:	6862      	ldr	r2, [r4, #4]
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f7fb fbe0 	bl	80001f0 <memchr>
 8004a30:	b108      	cbz	r0, 8004a36 <_printf_i+0x1ea>
 8004a32:	1b40      	subs	r0, r0, r5
 8004a34:	6060      	str	r0, [r4, #4]
 8004a36:	6863      	ldr	r3, [r4, #4]
 8004a38:	6123      	str	r3, [r4, #16]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a40:	e7aa      	b.n	8004998 <_printf_i+0x14c>
 8004a42:	6923      	ldr	r3, [r4, #16]
 8004a44:	462a      	mov	r2, r5
 8004a46:	4649      	mov	r1, r9
 8004a48:	4640      	mov	r0, r8
 8004a4a:	47d0      	blx	sl
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d0ad      	beq.n	80049ac <_printf_i+0x160>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	079b      	lsls	r3, r3, #30
 8004a54:	d413      	bmi.n	8004a7e <_printf_i+0x232>
 8004a56:	68e0      	ldr	r0, [r4, #12]
 8004a58:	9b03      	ldr	r3, [sp, #12]
 8004a5a:	4298      	cmp	r0, r3
 8004a5c:	bfb8      	it	lt
 8004a5e:	4618      	movlt	r0, r3
 8004a60:	e7a6      	b.n	80049b0 <_printf_i+0x164>
 8004a62:	2301      	movs	r3, #1
 8004a64:	4632      	mov	r2, r6
 8004a66:	4649      	mov	r1, r9
 8004a68:	4640      	mov	r0, r8
 8004a6a:	47d0      	blx	sl
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d09d      	beq.n	80049ac <_printf_i+0x160>
 8004a70:	3501      	adds	r5, #1
 8004a72:	68e3      	ldr	r3, [r4, #12]
 8004a74:	9903      	ldr	r1, [sp, #12]
 8004a76:	1a5b      	subs	r3, r3, r1
 8004a78:	42ab      	cmp	r3, r5
 8004a7a:	dcf2      	bgt.n	8004a62 <_printf_i+0x216>
 8004a7c:	e7eb      	b.n	8004a56 <_printf_i+0x20a>
 8004a7e:	2500      	movs	r5, #0
 8004a80:	f104 0619 	add.w	r6, r4, #25
 8004a84:	e7f5      	b.n	8004a72 <_printf_i+0x226>
 8004a86:	bf00      	nop
 8004a88:	08004e65 	.word	0x08004e65
 8004a8c:	08004e76 	.word	0x08004e76

08004a90 <__sflush_r>:
 8004a90:	898a      	ldrh	r2, [r1, #12]
 8004a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a96:	4605      	mov	r5, r0
 8004a98:	0710      	lsls	r0, r2, #28
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	d458      	bmi.n	8004b50 <__sflush_r+0xc0>
 8004a9e:	684b      	ldr	r3, [r1, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	dc05      	bgt.n	8004ab0 <__sflush_r+0x20>
 8004aa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	dc02      	bgt.n	8004ab0 <__sflush_r+0x20>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ab2:	2e00      	cmp	r6, #0
 8004ab4:	d0f9      	beq.n	8004aaa <__sflush_r+0x1a>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004abc:	682f      	ldr	r7, [r5, #0]
 8004abe:	6a21      	ldr	r1, [r4, #32]
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	d032      	beq.n	8004b2a <__sflush_r+0x9a>
 8004ac4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	075a      	lsls	r2, r3, #29
 8004aca:	d505      	bpl.n	8004ad8 <__sflush_r+0x48>
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	1ac0      	subs	r0, r0, r3
 8004ad0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ad2:	b10b      	cbz	r3, 8004ad8 <__sflush_r+0x48>
 8004ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ad6:	1ac0      	subs	r0, r0, r3
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4602      	mov	r2, r0
 8004adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ade:	6a21      	ldr	r1, [r4, #32]
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b0      	blx	r6
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	d106      	bne.n	8004af8 <__sflush_r+0x68>
 8004aea:	6829      	ldr	r1, [r5, #0]
 8004aec:	291d      	cmp	r1, #29
 8004aee:	d82b      	bhi.n	8004b48 <__sflush_r+0xb8>
 8004af0:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <__sflush_r+0x108>)
 8004af2:	410a      	asrs	r2, r1
 8004af4:	07d6      	lsls	r6, r2, #31
 8004af6:	d427      	bmi.n	8004b48 <__sflush_r+0xb8>
 8004af8:	2200      	movs	r2, #0
 8004afa:	6062      	str	r2, [r4, #4]
 8004afc:	04d9      	lsls	r1, r3, #19
 8004afe:	6922      	ldr	r2, [r4, #16]
 8004b00:	6022      	str	r2, [r4, #0]
 8004b02:	d504      	bpl.n	8004b0e <__sflush_r+0x7e>
 8004b04:	1c42      	adds	r2, r0, #1
 8004b06:	d101      	bne.n	8004b0c <__sflush_r+0x7c>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b903      	cbnz	r3, 8004b0e <__sflush_r+0x7e>
 8004b0c:	6560      	str	r0, [r4, #84]	; 0x54
 8004b0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b10:	602f      	str	r7, [r5, #0]
 8004b12:	2900      	cmp	r1, #0
 8004b14:	d0c9      	beq.n	8004aaa <__sflush_r+0x1a>
 8004b16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b1a:	4299      	cmp	r1, r3
 8004b1c:	d002      	beq.n	8004b24 <__sflush_r+0x94>
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f7ff fb3e 	bl	80041a0 <_free_r>
 8004b24:	2000      	movs	r0, #0
 8004b26:	6360      	str	r0, [r4, #52]	; 0x34
 8004b28:	e7c0      	b.n	8004aac <__sflush_r+0x1c>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b0      	blx	r6
 8004b30:	1c41      	adds	r1, r0, #1
 8004b32:	d1c8      	bne.n	8004ac6 <__sflush_r+0x36>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0c5      	beq.n	8004ac6 <__sflush_r+0x36>
 8004b3a:	2b1d      	cmp	r3, #29
 8004b3c:	d001      	beq.n	8004b42 <__sflush_r+0xb2>
 8004b3e:	2b16      	cmp	r3, #22
 8004b40:	d101      	bne.n	8004b46 <__sflush_r+0xb6>
 8004b42:	602f      	str	r7, [r5, #0]
 8004b44:	e7b1      	b.n	8004aaa <__sflush_r+0x1a>
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b4c:	81a3      	strh	r3, [r4, #12]
 8004b4e:	e7ad      	b.n	8004aac <__sflush_r+0x1c>
 8004b50:	690f      	ldr	r7, [r1, #16]
 8004b52:	2f00      	cmp	r7, #0
 8004b54:	d0a9      	beq.n	8004aaa <__sflush_r+0x1a>
 8004b56:	0793      	lsls	r3, r2, #30
 8004b58:	680e      	ldr	r6, [r1, #0]
 8004b5a:	bf08      	it	eq
 8004b5c:	694b      	ldreq	r3, [r1, #20]
 8004b5e:	600f      	str	r7, [r1, #0]
 8004b60:	bf18      	it	ne
 8004b62:	2300      	movne	r3, #0
 8004b64:	eba6 0807 	sub.w	r8, r6, r7
 8004b68:	608b      	str	r3, [r1, #8]
 8004b6a:	f1b8 0f00 	cmp.w	r8, #0
 8004b6e:	dd9c      	ble.n	8004aaa <__sflush_r+0x1a>
 8004b70:	6a21      	ldr	r1, [r4, #32]
 8004b72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b74:	4643      	mov	r3, r8
 8004b76:	463a      	mov	r2, r7
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b0      	blx	r6
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	dc06      	bgt.n	8004b8e <__sflush_r+0xfe>
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b86:	81a3      	strh	r3, [r4, #12]
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	e78e      	b.n	8004aac <__sflush_r+0x1c>
 8004b8e:	4407      	add	r7, r0
 8004b90:	eba8 0800 	sub.w	r8, r8, r0
 8004b94:	e7e9      	b.n	8004b6a <__sflush_r+0xda>
 8004b96:	bf00      	nop
 8004b98:	dfbffffe 	.word	0xdfbffffe

08004b9c <_fflush_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	690b      	ldr	r3, [r1, #16]
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	b913      	cbnz	r3, 8004bac <_fflush_r+0x10>
 8004ba6:	2500      	movs	r5, #0
 8004ba8:	4628      	mov	r0, r5
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	b118      	cbz	r0, 8004bb6 <_fflush_r+0x1a>
 8004bae:	6a03      	ldr	r3, [r0, #32]
 8004bb0:	b90b      	cbnz	r3, 8004bb6 <_fflush_r+0x1a>
 8004bb2:	f7fe fff9 	bl	8003ba8 <__sinit>
 8004bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f3      	beq.n	8004ba6 <_fflush_r+0xa>
 8004bbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bc0:	07d0      	lsls	r0, r2, #31
 8004bc2:	d404      	bmi.n	8004bce <_fflush_r+0x32>
 8004bc4:	0599      	lsls	r1, r3, #22
 8004bc6:	d402      	bmi.n	8004bce <_fflush_r+0x32>
 8004bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bca:	f7ff fae6 	bl	800419a <__retarget_lock_acquire_recursive>
 8004bce:	4628      	mov	r0, r5
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	f7ff ff5d 	bl	8004a90 <__sflush_r>
 8004bd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bd8:	07da      	lsls	r2, r3, #31
 8004bda:	4605      	mov	r5, r0
 8004bdc:	d4e4      	bmi.n	8004ba8 <_fflush_r+0xc>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	059b      	lsls	r3, r3, #22
 8004be2:	d4e1      	bmi.n	8004ba8 <_fflush_r+0xc>
 8004be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004be6:	f7ff fad9 	bl	800419c <__retarget_lock_release_recursive>
 8004bea:	e7dd      	b.n	8004ba8 <_fflush_r+0xc>

08004bec <__swhatbuf_r>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	460c      	mov	r4, r1
 8004bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	b096      	sub	sp, #88	; 0x58
 8004bf8:	4615      	mov	r5, r2
 8004bfa:	461e      	mov	r6, r3
 8004bfc:	da0d      	bge.n	8004c1a <__swhatbuf_r+0x2e>
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c04:	f04f 0100 	mov.w	r1, #0
 8004c08:	bf0c      	ite	eq
 8004c0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c0e:	2340      	movne	r3, #64	; 0x40
 8004c10:	2000      	movs	r0, #0
 8004c12:	6031      	str	r1, [r6, #0]
 8004c14:	602b      	str	r3, [r5, #0]
 8004c16:	b016      	add	sp, #88	; 0x58
 8004c18:	bd70      	pop	{r4, r5, r6, pc}
 8004c1a:	466a      	mov	r2, sp
 8004c1c:	f000 f862 	bl	8004ce4 <_fstat_r>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	dbec      	blt.n	8004bfe <__swhatbuf_r+0x12>
 8004c24:	9901      	ldr	r1, [sp, #4]
 8004c26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004c2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004c2e:	4259      	negs	r1, r3
 8004c30:	4159      	adcs	r1, r3
 8004c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c36:	e7eb      	b.n	8004c10 <__swhatbuf_r+0x24>

08004c38 <__smakebuf_r>:
 8004c38:	898b      	ldrh	r3, [r1, #12]
 8004c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c3c:	079d      	lsls	r5, r3, #30
 8004c3e:	4606      	mov	r6, r0
 8004c40:	460c      	mov	r4, r1
 8004c42:	d507      	bpl.n	8004c54 <__smakebuf_r+0x1c>
 8004c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	6163      	str	r3, [r4, #20]
 8004c50:	b002      	add	sp, #8
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	ab01      	add	r3, sp, #4
 8004c56:	466a      	mov	r2, sp
 8004c58:	f7ff ffc8 	bl	8004bec <__swhatbuf_r>
 8004c5c:	9900      	ldr	r1, [sp, #0]
 8004c5e:	4605      	mov	r5, r0
 8004c60:	4630      	mov	r0, r6
 8004c62:	f7fe fe89 	bl	8003978 <_malloc_r>
 8004c66:	b948      	cbnz	r0, 8004c7c <__smakebuf_r+0x44>
 8004c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6c:	059a      	lsls	r2, r3, #22
 8004c6e:	d4ef      	bmi.n	8004c50 <__smakebuf_r+0x18>
 8004c70:	f023 0303 	bic.w	r3, r3, #3
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	e7e3      	b.n	8004c44 <__smakebuf_r+0xc>
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	6020      	str	r0, [r4, #0]
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	9b00      	ldr	r3, [sp, #0]
 8004c88:	6163      	str	r3, [r4, #20]
 8004c8a:	9b01      	ldr	r3, [sp, #4]
 8004c8c:	6120      	str	r0, [r4, #16]
 8004c8e:	b15b      	cbz	r3, 8004ca8 <__smakebuf_r+0x70>
 8004c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c94:	4630      	mov	r0, r6
 8004c96:	f000 f837 	bl	8004d08 <_isatty_r>
 8004c9a:	b128      	cbz	r0, 8004ca8 <__smakebuf_r+0x70>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	f023 0303 	bic.w	r3, r3, #3
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	81a3      	strh	r3, [r4, #12]
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	431d      	orrs	r5, r3
 8004cac:	81a5      	strh	r5, [r4, #12]
 8004cae:	e7cf      	b.n	8004c50 <__smakebuf_r+0x18>

08004cb0 <memmove>:
 8004cb0:	4288      	cmp	r0, r1
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	eb01 0402 	add.w	r4, r1, r2
 8004cb8:	d902      	bls.n	8004cc0 <memmove+0x10>
 8004cba:	4284      	cmp	r4, r0
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	d807      	bhi.n	8004cd0 <memmove+0x20>
 8004cc0:	1e43      	subs	r3, r0, #1
 8004cc2:	42a1      	cmp	r1, r4
 8004cc4:	d008      	beq.n	8004cd8 <memmove+0x28>
 8004cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cce:	e7f8      	b.n	8004cc2 <memmove+0x12>
 8004cd0:	4402      	add	r2, r0
 8004cd2:	4601      	mov	r1, r0
 8004cd4:	428a      	cmp	r2, r1
 8004cd6:	d100      	bne.n	8004cda <memmove+0x2a>
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ce2:	e7f7      	b.n	8004cd4 <memmove+0x24>

08004ce4 <_fstat_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4d07      	ldr	r5, [pc, #28]	; (8004d04 <_fstat_r+0x20>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	602b      	str	r3, [r5, #0]
 8004cf2:	f7fc f942 	bl	8000f7a <_fstat>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	d102      	bne.n	8004d00 <_fstat_r+0x1c>
 8004cfa:	682b      	ldr	r3, [r5, #0]
 8004cfc:	b103      	cbz	r3, 8004d00 <_fstat_r+0x1c>
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	bd38      	pop	{r3, r4, r5, pc}
 8004d02:	bf00      	nop
 8004d04:	200003f4 	.word	0x200003f4

08004d08 <_isatty_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d06      	ldr	r5, [pc, #24]	; (8004d24 <_isatty_r+0x1c>)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	602b      	str	r3, [r5, #0]
 8004d14:	f7fc f941 	bl	8000f9a <_isatty>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_isatty_r+0x1a>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_isatty_r+0x1a>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	200003f4 	.word	0x200003f4

08004d28 <memcpy>:
 8004d28:	440a      	add	r2, r1
 8004d2a:	4291      	cmp	r1, r2
 8004d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d30:	d100      	bne.n	8004d34 <memcpy+0xc>
 8004d32:	4770      	bx	lr
 8004d34:	b510      	push	{r4, lr}
 8004d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d3e:	4291      	cmp	r1, r2
 8004d40:	d1f9      	bne.n	8004d36 <memcpy+0xe>
 8004d42:	bd10      	pop	{r4, pc}

08004d44 <_realloc_r>:
 8004d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d48:	4680      	mov	r8, r0
 8004d4a:	4614      	mov	r4, r2
 8004d4c:	460e      	mov	r6, r1
 8004d4e:	b921      	cbnz	r1, 8004d5a <_realloc_r+0x16>
 8004d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d54:	4611      	mov	r1, r2
 8004d56:	f7fe be0f 	b.w	8003978 <_malloc_r>
 8004d5a:	b92a      	cbnz	r2, 8004d68 <_realloc_r+0x24>
 8004d5c:	f7ff fa20 	bl	80041a0 <_free_r>
 8004d60:	4625      	mov	r5, r4
 8004d62:	4628      	mov	r0, r5
 8004d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d68:	f000 f81b 	bl	8004da2 <_malloc_usable_size_r>
 8004d6c:	4284      	cmp	r4, r0
 8004d6e:	4607      	mov	r7, r0
 8004d70:	d802      	bhi.n	8004d78 <_realloc_r+0x34>
 8004d72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d76:	d812      	bhi.n	8004d9e <_realloc_r+0x5a>
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	f7fe fdfc 	bl	8003978 <_malloc_r>
 8004d80:	4605      	mov	r5, r0
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d0ed      	beq.n	8004d62 <_realloc_r+0x1e>
 8004d86:	42bc      	cmp	r4, r7
 8004d88:	4622      	mov	r2, r4
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	bf28      	it	cs
 8004d8e:	463a      	movcs	r2, r7
 8004d90:	f7ff ffca 	bl	8004d28 <memcpy>
 8004d94:	4631      	mov	r1, r6
 8004d96:	4640      	mov	r0, r8
 8004d98:	f7ff fa02 	bl	80041a0 <_free_r>
 8004d9c:	e7e1      	b.n	8004d62 <_realloc_r+0x1e>
 8004d9e:	4635      	mov	r5, r6
 8004da0:	e7df      	b.n	8004d62 <_realloc_r+0x1e>

08004da2 <_malloc_usable_size_r>:
 8004da2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da6:	1f18      	subs	r0, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bfbc      	itt	lt
 8004dac:	580b      	ldrlt	r3, [r1, r0]
 8004dae:	18c0      	addlt	r0, r0, r3
 8004db0:	4770      	bx	lr
	...

08004db4 <_init>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	bf00      	nop
 8004db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dba:	bc08      	pop	{r3}
 8004dbc:	469e      	mov	lr, r3
 8004dbe:	4770      	bx	lr

08004dc0 <_fini>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr
